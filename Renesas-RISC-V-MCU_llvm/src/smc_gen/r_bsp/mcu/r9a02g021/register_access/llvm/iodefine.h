/*
 * This software is supplied by Renesas Electronics Corporation and is only intended for 
 * use with Renesas products. No other uses are authorized. This software is owned by 
 * Renesas Electronics Corporation and is protected under all applicable laws, including 
 * copyright laws. 
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING 
 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. 
 * ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM EXTENT PERMITTED NOT 
 * PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED 
 * COMPANIES SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL 
 * DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE 
 * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 
 * 
 * Renesas reserves the right, without notice, to make changes to this software and to 
 * discontinue the availability of this software. By using this software, you agree to 
 * the additional terms and conditions found by accessing the following link: 
 * http://www.renesas.com/disclaimer 
 * 
 *
 * @file     R9A02G021.h
 * @brief    CMSIS HeaderFile
 * @version  1.10.00 + 202304131714_CPU
 * @date     14. February 2024
 * @note     Generated by SVDConv V3.3.42 on Wednesday, 14.02.2024 18:29:13
 *           from File 'R9A02G021_V1.10.00.svd',
 *           last modified on Wednesday, 14.02.2024 09:21:08
 */



/** @addtogroup Renesas Electronics Corporation
  * @{
  */


/** @addtogroup R9A02G021
  * @{
  */


#ifndef R9A02G021_H
#define R9A02G021_H

#ifdef __cplusplus
extern "C" {
#endif

#define __IM   volatile
#define __OM   volatile
#define __IOM  volatile

#include <stdint.h>

/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           SRAM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SRAM Control (SRAM)
  */

typedef struct {                                /*!< (@ 0x40002000) SRAM Structure                                             */
  
  union {
    __IOM uint8_t PARIOAD;                      /*!< (@ 0x00000000) SRAM Parity Error Operation After Detection Register       */
    
    struct {
      __IOM uint8_t OAD         : 1;            /*!< [0..0] Operation After Detection                                          */
            uint8_t             : 7;
    } PARIOAD_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t SRAMPRCR;                     /*!< (@ 0x00000004) SRAM Protection Register                                   */
    
    struct {
      __IOM uint8_t SRAMPRCR    : 1;            /*!< [0..0] Register Write Control                                             */
      __OM  uint8_t KW          : 7;            /*!< [7..1] Write Key Code                                                     */
    } SRAMPRCR_b;
  } ;
  __IM  uint8_t   RESERVED1[187];
  
  union {
    __IOM uint8_t ECCMODE;                      /*!< (@ 0x000000C0) ECC Operating Mode Control Register                        */
    
    struct {
      __IOM uint8_t ECCMOD      : 2;            /*!< [1..0] ECC Operating Mode Select                                          */
            uint8_t             : 6;
    } ECCMODE_b;
  } ;
  
  union {
    __IOM uint8_t ECC2STS;                      /*!< (@ 0x000000C1) ECC 2-Bit Error Status Register                            */
    
    struct {
      __IOM uint8_t ECC2ERR     : 1;            /*!< [0..0] ECC 2-Bit Error Status                                             */
            uint8_t             : 7;
    } ECC2STS_b;
  } ;
  
  union {
    __IOM uint8_t ECC1STSEN;                    /*!< (@ 0x000000C2) ECC 1-Bit Error Information Update Enable Register         */
    
    struct {
      __IOM uint8_t E1STSEN     : 1;            /*!< [0..0] ECC 1-Bit Error Information Update Enable                          */
            uint8_t             : 7;
    } ECC1STSEN_b;
  } ;
  
  union {
    __IOM uint8_t ECC1STS;                      /*!< (@ 0x000000C3) ECC 1-Bit Error Status Register                            */
    
    struct {
      __IOM uint8_t ECC1ERR     : 1;            /*!< [0..0] ECC 1-Bit Error Status                                             */
            uint8_t             : 7;
    } ECC1STS_b;
  } ;
  
  union {
    __IOM uint8_t ECCPRCR;                      /*!< (@ 0x000000C4) ECC Protection Register                                    */
    
    struct {
      __IOM uint8_t ECCPRCR     : 1;            /*!< [0..0] Register Write Control                                             */
      __OM  uint8_t KW          : 7;            /*!< [7..1] Write Key Code                                                     */
    } ECCPRCR_b;
  } ;
  __IM  uint8_t   RESERVED2[11];
  
  union {
    __IOM uint8_t ECCPRCR2;                     /*!< (@ 0x000000D0) ECC Protection Register 2                                  */
    
    struct {
      __IOM uint8_t ECCPRCR2    : 1;            /*!< [0..0] Register Write Control                                             */
      __OM  uint8_t KW2         : 7;            /*!< [7..1] Write Key Code                                                     */
    } ECCPRCR2_b;
  } ;
  __IM  uint8_t   RESERVED3[3];
  
  union {
    __IOM uint8_t ECCETST;                      /*!< (@ 0x000000D4) ECC Test Control Register                                  */
    
    struct {
      __IOM uint8_t TSTBYP      : 1;            /*!< [0..0] ECC Bypass Select                                                  */
            uint8_t             : 7;
    } ECCETST_b;
  } ;
  __IM  uint8_t   RESERVED4[3];
  
  union {
    __IOM uint8_t ECCOAD;                       /*!< (@ 0x000000D8) SRAM ECC Error Operation After Detection Register          */
    
    struct {
      __IOM uint8_t OAD         : 1;            /*!< [0..0] Operation After Detection                                          */
            uint8_t             : 7;
    } ECCOAD_b;
  } ;
} R_SRAM_Type;                                  /*!< Size = 217 (0xd9)                                                         */



/* =========================================================================================================================== */
/* ================                                            BUS                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief BUS Control (BUS)
  */

typedef struct {                                /*!< (@ 0x40003000) BUS Structure                                              */
  __IM  uint32_t  RESERVED[768];
  
  union {
    __IOM uint16_t ILTMEMCTL;                   /*!< (@ 0x00000C00) Illicit Memory Access Detection Control Register           */
    
    struct {
            uint16_t            : 2;
      __IOM uint16_t ILTMEMEN   : 1;            /*!< [2..2] Illicit Memory Access Detection Enable                             */
            uint16_t            : 5;
      __IOM uint16_t KEY        : 8;            /*!< [15..8] Key Code                                                          */
    } ILTMEMCTL_b;
  } ;
  __IM  uint16_t  RESERVED1;
  __IM  uint32_t  RESERVED2[255];
  
  union {
    __IOM uint16_t BUSMCNTINST;                 /*!< (@ 0x00001000) Control Register INST                                      */
    
    struct {
            uint16_t            : 15;
      __IOM uint16_t IERES      : 1;            /*!< [15..15] Ignore Error Responses                                           */
    } BUSMCNTINST_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t BUSMCNTDAT;                  /*!< (@ 0x00001004) Control Register DAT                                       */
    
    struct {
            uint16_t            : 15;
      __IOM uint16_t IERES      : 1;            /*!< [15..15] Ignore Error Responses                                           */
    } BUSMCNTDAT_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t BUSMCNTDMA;                  /*!< (@ 0x00001008) Control Register DMA                                       */
    
    struct {
            uint16_t            : 15;
      __IOM uint16_t IERES      : 1;            /*!< [15..15] Ignore Error Responses                                           */
    } BUSMCNTDMA_b;
  } ;
  __IM  uint16_t  RESERVED5;
  __IM  uint32_t  RESERVED6[253];
  
  union {
    __IOM uint16_t BUSCNTOAD;                   /*!< (@ 0x00001400) Bus Control Error Operation After Detection Register       */
    
    struct {
      __IOM uint16_t OAD        : 1;            /*!< [0..0] Operation After Detection                                          */
            uint16_t            : 7;
      __IOM uint16_t KEY        : 8;            /*!< [15..8] Key Code                                                          */
    } BUSCNTOAD_b;
  } ;
  __IM  uint16_t  RESERVED7;
  __IM  uint32_t  RESERVED8[255];
  
  union {
    __IM  uint32_t BUS1ERRADD;                  /*!< (@ 0x00001800) Bus Error Address Register 1                               */
    
    struct {
      __IM  uint32_t BERAD      : 32;           /*!< [31..0] Bus Error Address                                                 */
    } BUS1ERRADD_b;
  } ;
  
  union {
    __IM  uint8_t BUS1ERRSTAT;                  /*!< (@ 0x00001804) BUS Error Status Register 1                                */
    
    struct {
      __IM  uint8_t ACCSTAT     : 1;            /*!< [0..0] Error Access Status flag                                           */
            uint8_t             : 4;
      __IM  uint8_t ILTERRSTAT  : 1;            /*!< [5..5] Illicit Memory Access Error Status flag                            */
      __IM  uint8_t SLERRSTAT   : 1;            /*!< [6..6] Slave Bus Error Status flag                                        */
      __IM  uint8_t ILLERRSTAT  : 1;            /*!< [7..7] Illegal Address Access Error Status flag                           */
    } BUS1ERRSTAT_b;
  } ;
  __IM  uint8_t   RESERVED9;
  __IM  uint16_t  RESERVED10;
  __IM  uint32_t  RESERVED11[2];
  
  union {
    __IM  uint32_t BUS2ERRADD;                  /*!< (@ 0x00001810) Bus Error Address Register 2                               */
    
    struct {
      __IM  uint32_t BERAD      : 32;           /*!< [31..0] Bus Error Address                                                 */
    } BUS2ERRADD_b;
  } ;
  
  union {
    __IM  uint8_t BUS2ERRSTAT;                  /*!< (@ 0x00001814) BUS Error Status Register 2                                */
    
    struct {
      __IM  uint8_t ACCSTAT     : 1;            /*!< [0..0] Error Access Status flag                                           */
            uint8_t             : 4;
      __IM  uint8_t ILTERRSTAT  : 1;            /*!< [5..5] Illicit Memory Access Error Status flag                            */
      __IM  uint8_t SLERRSTAT   : 1;            /*!< [6..6] Slave Bus Error Status flag                                        */
      __IM  uint8_t ILLERRSTAT  : 1;            /*!< [7..7] Illegal Address Access Error Status flag                           */
    } BUS2ERRSTAT_b;
  } ;
  __IM  uint8_t   RESERVED12;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14[2];
  
  union {
    __IM  uint32_t BUS3ERRADD;                  /*!< (@ 0x00001820) Bus Error Address Register 3                               */
    
    struct {
      __IM  uint32_t BERAD      : 32;           /*!< [31..0] Bus Error Address                                                 */
    } BUS3ERRADD_b;
  } ;
  
  union {
    __IM  uint8_t BUS3ERRSTAT;                  /*!< (@ 0x00001824) BUS Error Status Register 3                                */
    
    struct {
      __IM  uint8_t ACCSTAT     : 1;            /*!< [0..0] Error Access Status flag                                           */
            uint8_t             : 4;
      __IM  uint8_t ILTERRSTAT  : 1;            /*!< [5..5] Illicit Memory Access Error Status flag                            */
      __IM  uint8_t SLERRSTAT   : 1;            /*!< [6..6] Slave Bus Error Status flag                                        */
      __IM  uint8_t ILLERRSTAT  : 1;            /*!< [7..7] Illegal Address Access Error Status flag                           */
    } BUS3ERRSTAT_b;
  } ;
  __IM  uint8_t   RESERVED15;
  __IM  uint16_t  RESERVED16;
} R_BUS_Type;                                   /*!< Size = 6184 (0x1828)                                                      */



/* =========================================================================================================================== */
/* ================                                            DTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Data Transfer Controller (DTC)
  */

typedef struct {                                /*!< (@ 0x40005400) DTC Structure                                              */
  
  union {
    __IOM uint8_t DTCCR;                        /*!< (@ 0x00000000) DTC Control Register                                       */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t RRS         : 1;            /*!< [4..4] DTC Transfer Information Read Skip Enable                          */
            uint8_t             : 3;
    } DTCCR_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  __IOM uint32_t  DTCVBR;                       /*!< (@ 0x00000004) DTC Vector Base Register                                   */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint8_t DTCST;                        /*!< (@ 0x0000000C) DTC Module Start Register                                  */
    
    struct {
      __IOM uint8_t DTCST       : 1;            /*!< [0..0] DTC Module Start                                                   */
            uint8_t             : 7;
    } DTCST_b;
  } ;
  __IM  uint8_t   RESERVED3;
  
  union {
    __IM  uint16_t DTCSTS;                      /*!< (@ 0x0000000E) DTC Status Register                                        */
    
    struct {
      __IM  uint16_t VECN       : 8;            /*!< [7..0] DTC-Activating Vector Number Monitoring                            */
            uint16_t            : 7;
      __IM  uint16_t ACT        : 1;            /*!< [15..15] DTC Active Flag                                                  */
    } DTCSTS_b;
  } ;
} R_DTC_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            ICU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ICU for CPU (ICU)
  */

typedef struct {                                /*!< (@ 0x40006000) ICU Structure                                              */
  
  union {
    __IOM uint8_t IRQCR0;                       /*!< (@ 0x00000000) IRQ Control Register 0                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR0_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR1;                       /*!< (@ 0x00000001) IRQ Control Register 1                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR1_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR2;                       /*!< (@ 0x00000002) IRQ Control Register 2                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR2_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR3;                       /*!< (@ 0x00000003) IRQ Control Register 3                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR3_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR4;                       /*!< (@ 0x00000004) IRQ Control Register 4                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR4_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR5;                       /*!< (@ 0x00000005) IRQ Control Register 5                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR5_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR6;                       /*!< (@ 0x00000006) IRQ Control Register 6                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR6_b;
  } ;
  
  union {
    __IOM uint8_t IRQCR7;                       /*!< (@ 0x00000007) IRQ Control Register 7                                     */
    
    struct {
      __IOM uint8_t IRQMD       : 2;            /*!< [1..0] IRQi Detection Sense Select                                        */
            uint8_t             : 2;
      __IOM uint8_t FCLKSEL     : 2;            /*!< [5..4] IRQi Digital Filter Sampling Clock Select                          */
            uint8_t             : 1;
      __IOM uint8_t FLTEN       : 1;            /*!< [7..7] IRQi Digital Filter Enable                                         */
    } IRQCR7_b;
  } ;
  __IM  uint32_t  RESERVED[62];
  
  union {
    __IOM uint8_t NMICR;                        /*!< (@ 0x00000100) NMI Pin Interrupt Control Register                         */
    
    struct {
      __IOM uint8_t NMIMD       : 1;            /*!< [0..0] NMI Detection Set                                                  */
            uint8_t             : 3;
      __IOM uint8_t NFCLKSEL    : 2;            /*!< [5..4] NMI Digital Filter Sampling Clock Select                           */
            uint8_t             : 1;
      __IOM uint8_t NFLTEN      : 1;            /*!< [7..7] NMI Digital Filter Enable                                          */
    } NMICR_b;
  } ;
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
  __IM  uint32_t  RESERVED3[7];
  
  union {
    __IOM uint16_t NMIER;                       /*!< (@ 0x00000120) Non-Maskable Interrupt Enable Register                     */
    
    struct {
      __IOM uint16_t IWDTEN     : 1;            /*!< [0..0] IWDT Underflow/Refresh Error Interrupt Enable                      */
      __IOM uint16_t WDTEN      : 1;            /*!< [1..1] WDT Underflow/Refresh Error Interrupt Enable                       */
      __IOM uint16_t LVD1EN     : 1;            /*!< [2..2] Voltage monitor 1 Interrupt Enable                                 */
      __IOM uint16_t LVD2EN     : 1;            /*!< [3..3] Voltage monitor 2 Interrupt Enable                                 */
            uint16_t            : 3;
      __IOM uint16_t NMIEN      : 1;            /*!< [7..7] NMI Pin Interrupt Enable                                           */
      __IOM uint16_t RPEEN      : 1;            /*!< [8..8] SRAM Parity Error Interrupt Enable                                 */
      __IOM uint16_t RECCEN     : 1;            /*!< [9..9] SRAM ECC Error Interrupt Enable                                    */
            uint16_t            : 2;
      __IOM uint16_t BUSEN      : 1;            /*!< [12..12] Bus Error Interrupt Enable                                       */
            uint16_t            : 3;
    } NMIER_b;
  } ;
  __IM  uint16_t  RESERVED4;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint16_t NMICLR;                      /*!< (@ 0x00000130) Non-Maskable Interrupt Status Clear Register               */
    
    struct {
      __IOM uint16_t IWDTCLR    : 1;            /*!< [0..0] IWDT Underflow/Refresh Error Interrupt Status Flag Clear           */
      __IOM uint16_t WDTCLR     : 1;            /*!< [1..1] WDT Underflow/Refresh Error Interrupt Status Flag Clear            */
      __IOM uint16_t LVD1CLR    : 1;            /*!< [2..2] Voltage Monitor 1 Interrupt Status Flag Clear                      */
      __IOM uint16_t LVD2CLR    : 1;            /*!< [3..3] Voltage Monitor 2 Interrupt Status Flag Clear                      */
            uint16_t            : 3;
      __IOM uint16_t NMICLR     : 1;            /*!< [7..7] NMI Pin Interrupt Status Flag Clear                                */
      __IOM uint16_t RPECLR     : 1;            /*!< [8..8] SRAM Parity Error Interrupt Status Flag Clear                      */
      __IOM uint16_t RECCCLR    : 1;            /*!< [9..9] SRAM ECC Error Interrupt Status Flag Clear                         */
            uint16_t            : 2;
      __IOM uint16_t BUSCLR     : 1;            /*!< [12..12] Bus Error Interrupt Status Flag Clear                            */
            uint16_t            : 3;
    } NMICLR_b;
  } ;
  __IM  uint16_t  RESERVED6;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IM  uint16_t NMISR;                       /*!< (@ 0x00000140) Non-Maskable Interrupt Status Register                     */
    
    struct {
      __IM  uint16_t IWDTST     : 1;            /*!< [0..0] IWDT Underflow/Refresh Error Interrupt Status Flag                 */
      __IM  uint16_t WDTST      : 1;            /*!< [1..1] WDT Underflow/Refresh Error Interrupt Status Flag                  */
      __IM  uint16_t LVD1ST     : 1;            /*!< [2..2] Voltage Monitor 1 Interrupt Status Flag                            */
      __IM  uint16_t LVD2ST     : 1;            /*!< [3..3] Voltage Monitor 2 Interrupt Status Flag                            */
            uint16_t            : 3;
      __IM  uint16_t NMIST      : 1;            /*!< [7..7] NMI Pin Interrupt Status Flag                                      */
      __IM  uint16_t RPEST      : 1;            /*!< [8..8] SRAM Parity Error Interrupt Status Flag                            */
      __IM  uint16_t RECCST     : 1;            /*!< [9..9] SRAM ECC Error Interrupt Status Flag                               */
            uint16_t            : 2;
      __IM  uint16_t BUSST      : 1;            /*!< [12..12] BUS Error Interrupt Status Flag                                  */
            uint16_t            : 3;
    } NMISR_b;
  } ;
  __IM  uint16_t  RESERVED8;
  __IM  uint32_t  RESERVED9[23];
  
  union {
    __IOM uint32_t WUPEN0;                      /*!< (@ 0x000001A0) Wake Up Interrupt Enable Register 0                        */
    
    struct {
      __IOM uint32_t IRQWUPEN   : 8;            /*!< [7..0] IRQn (n = 0 to 7) Interrupt Software Standby/Snooze Mode
                                                     Returns Enable, whereas IRQn corresponds to IRQWUPEN[n]                   */
            uint32_t            : 8;
      __IOM uint32_t IWDTWUPEN  : 1;            /*!< [16..16] IWDT Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
      __IOM uint32_t KEYWUPEN   : 1;            /*!< [17..17] Key Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
      __IOM uint32_t LVD1WUPEN  : 1;            /*!< [18..18] LVD1 Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
      __IOM uint32_t LVD2WUPEN  : 1;            /*!< [19..19] LVD2 Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
            uint32_t            : 4;
      __IOM uint32_t RTCWUPEN   : 1;            /*!< [24..24] RTC Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
            uint32_t            : 1;
      __IOM uint32_t TML32WUPEN : 1;            /*!< [26..26] TML32 Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
            uint32_t            : 5;
    } WUPEN0_b;
  } ;
  
  union {
    __IOM uint32_t WUPEN1;                      /*!< (@ 0x000001A4) Wake Up Interrupt Enable Register 1                        */
    
    struct {
      __IOM uint32_t IICA0WUPEN : 1;            /*!< [0..0] IIC0_ENDI/IIC0_WUI Interrupt Software Standby/Snooze
                                                     Mode Returns Enable                                                       */
      __IOM uint32_t IICA1WUPEN : 1;            /*!< [1..1] IIC1_ENDI/IIC1_WUI Interrupt Software Standby/Snooze
                                                     Mode Returns Enable                                                       */
      __IOM uint32_t UARTARXENDI0WUPEN : 1;     /*!< [2..2] UARTA_RX_ENDI0 Interrupt Software Standby/Snooze Mode
                                                     Returns Enable                                                            */
      __IOM uint32_t UARTARXERI0WUPEN : 1;      /*!< [3..3] UARTA_RX_ERI0 Interrupt Software Standby/Snooze Mode
                                                     Returns Enable                                                            */
      __IOM uint32_t UARTARXENDI1WUPEN : 1;     /*!< [4..4] UARTA_RX_ENDI1 Interrupt Software Standby/Snooze Mode
                                                     Returns Enable                                                            */
      __IOM uint32_t UARTARXERI1WUPEN : 1;      /*!< [5..5] UARTA_RX_ERI1 Interrupt Software Standby/Snooze Mode
                                                     Returns Enable                                                            */
      __IOM uint32_t COMPDET0WUPEN : 1;         /*!< [6..6] COMP_DET0 Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
      __IOM uint32_t COMPDET1WUPEN : 1;         /*!< [7..7] COMP_DET1 Interrupt Software Standby/Snooze Mode Returns
                                                     Enable                                                                    */
            uint32_t            : 24;
    } WUPEN1_b;
  } ;
  __IM  uint32_t  RESERVED10[6];
  
  union {
    __IOM uint8_t IELEN;                        /*!< (@ 0x000001C0) ICU Event Enable Register                                  */
    
    struct {
      __IOM uint8_t RTCEN       : 1;            /*!< [0..0] RTC Interrupt Enable (when LPOPT.LPOPTEN bit = 1)                  */
      __IOM uint8_t IELEN       : 1;            /*!< [1..1] Parts Asynchronous Interrupts Enable (when LPOPTEN bit
                                                     = 1)                                                                      */
            uint8_t             : 6;
    } IELEN_b;
  } ;
  __IM  uint8_t   RESERVED11;
  __IM  uint16_t  RESERVED12;
  __IM  uint32_t  RESERVED13[15];
  __IOM uint16_t  SELSR0;                       /*!< (@ 0x00000200) SYS Event Link Setting Register                            */
  __IM  uint16_t  RESERVED14;
  __IM  uint32_t  RESERVED15[63];
  __IOM uint32_t  IELSR0;                       /*!< (@ 0x00000300) ICU Event Link Setting Register 0                          */
  __IOM uint32_t  IELSR1;                       /*!< (@ 0x00000304) ICU Event Link Setting Register 1                          */
  __IOM uint32_t  IELSR2;                       /*!< (@ 0x00000308) ICU Event Link Setting Register 2                          */
  __IOM uint32_t  IELSR3;                       /*!< (@ 0x0000030C) ICU Event Link Setting Register 3                          */
  __IOM uint32_t  IELSR4;                       /*!< (@ 0x00000310) ICU Event Link Setting Register 4                          */
  __IOM uint32_t  IELSR5;                       /*!< (@ 0x00000314) ICU Event Link Setting Register 5                          */
  __IOM uint32_t  IELSR6;                       /*!< (@ 0x00000318) ICU Event Link Setting Register 6                          */
  __IOM uint32_t  IELSR7;                       /*!< (@ 0x0000031C) ICU Event Link Setting Register 7                          */
  __IOM uint32_t  IELSR8;                       /*!< (@ 0x00000320) ICU Event Link Setting Register 8                          */
  __IOM uint32_t  IELSR9;                       /*!< (@ 0x00000324) ICU Event Link Setting Register 9                          */
  __IOM uint32_t  IELSR10;                      /*!< (@ 0x00000328) ICU Event Link Setting Register 10                         */
  __IOM uint32_t  IELSR11;                      /*!< (@ 0x0000032C) ICU Event Link Setting Register 11                         */
  __IOM uint32_t  IELSR12;                      /*!< (@ 0x00000330) ICU Event Link Setting Register 12                         */
  __IOM uint32_t  IELSR13;                      /*!< (@ 0x00000334) ICU Event Link Setting Register 13                         */
  __IOM uint32_t  IELSR14;                      /*!< (@ 0x00000338) ICU Event Link Setting Register 14                         */
  __IOM uint32_t  IELSR15;                      /*!< (@ 0x0000033C) ICU Event Link Setting Register 15                         */
  __IOM uint32_t  IELSR16;                      /*!< (@ 0x00000340) ICU Event Link Setting Register 16                         */
  __IOM uint32_t  IELSR17;                      /*!< (@ 0x00000344) ICU Event Link Setting Register 17                         */
  __IOM uint32_t  IELSR18;                      /*!< (@ 0x00000348) ICU Event Link Setting Register 18                         */
  __IOM uint32_t  IELSR19;                      /*!< (@ 0x0000034C) ICU Event Link Setting Register 19                         */
  __IOM uint32_t  IELSR20;                      /*!< (@ 0x00000350) ICU Event Link Setting Register 20                         */
  __IOM uint32_t  IELSR21;                      /*!< (@ 0x00000354) ICU Event Link Setting Register 21                         */
  __IOM uint32_t  IELSR22;                      /*!< (@ 0x00000358) ICU Event Link Setting Register 22                         */
  __IOM uint32_t  IELSR23;                      /*!< (@ 0x0000035C) ICU Event Link Setting Register 23                         */
  __IOM uint32_t  IELSR24;                      /*!< (@ 0x00000360) ICU Event Link Setting Register 24                         */
  __IOM uint32_t  IELSR25;                      /*!< (@ 0x00000364) ICU Event Link Setting Register 25                         */
  __IOM uint32_t  IELSR26;                      /*!< (@ 0x00000368) ICU Event Link Setting Register 26                         */
  __IOM uint32_t  IELSR27;                      /*!< (@ 0x0000036C) ICU Event Link Setting Register 27                         */
  __IOM uint32_t  IELSR28;                      /*!< (@ 0x00000370) ICU Event Link Setting Register 28                         */
  __IOM uint32_t  IELSR29;                      /*!< (@ 0x00000374) ICU Event Link Setting Register 29                         */
  __IOM uint32_t  IELSR30;                      /*!< (@ 0x00000378) ICU Event Link Setting Register 30                         */
  __IOM uint32_t  IELSR31;                      /*!< (@ 0x0000037C) ICU Event Link Setting Register 31                         */
} R_ICU_Type;                                   /*!< Size = 896 (0x380)                                                        */



/* =========================================================================================================================== */
/* ================                                           SYSC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control (SYSC)
  */

typedef struct {                                /*!< (@ 0x4001E000) SYSC Structure                                             */
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint16_t SBYCR;                       /*!< (@ 0x0000000C) Standby Control Register                                   */
    
    struct {
            uint16_t            : 15;
      __IOM uint16_t SSBY       : 1;            /*!< [15..15] Software Standby Mode Select                                     */
    } SBYCR_b;
  } ;
  __IM  uint16_t  RESERVED1;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t MSTPCRA;                     /*!< (@ 0x0000001C) Module Stop Control Register A                             */
    
    struct {
            uint32_t            : 22;
      __IOM uint32_t MSTPA22    : 1;            /*!< [22..22] DTC Module Stop                                                  */
            uint32_t            : 9;
    } MSTPCRA_b;
  } ;
  
  union {
    __IOM uint32_t SCKDIVCR;                    /*!< (@ 0x00000020) System Clock Division Control Register                     */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t PCKB       : 3;            /*!< [10..8] Peripheral Module Clock B (PCLKB) Select                          */
            uint32_t            : 13;
      __IOM uint32_t ICK        : 3;            /*!< [26..24] System Clock (ICLK) Select                                       */
            uint32_t            : 5;
    } SCKDIVCR_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint8_t SCKSCR;                       /*!< (@ 0x00000026) System Clock Source Control Register                       */
    
    struct {
      __IOM uint8_t CKSEL       : 3;            /*!< [2..0] Clock Source Select                                                */
            uint8_t             : 5;
    } SCKSCR_b;
  } ;
  __IM  uint8_t   RESERVED4;
  __IM  uint32_t  RESERVED5[2];
  __IM  uint8_t   RESERVED6;
  
  union {
    __IOM uint8_t MEMWAIT;                      /*!< (@ 0x00000031) Memory Wait Cycle Control Register for Code Flash          */
    
    struct {
      __IOM uint8_t MEMWAIT     : 1;            /*!< [0..0] Memory Wait Cycle Select for Code Flash                            */
            uint8_t             : 7;
    } MEMWAIT_b;
  } ;
  
  union {
    __IOM uint8_t MOSCCR;                       /*!< (@ 0x00000032) External Clock Input Control Register                      */
    
    struct {
      __IOM uint8_t MOSTP       : 1;            /*!< [0..0] External Clock Input Stop                                          */
            uint8_t             : 7;
    } MOSCCR_b;
  } ;
  __IM  uint8_t   RESERVED7;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint8_t HOCOCR;                       /*!< (@ 0x00000036) High-Speed On-Chip Oscillator Control Register             */
    
    struct {
      __IOM uint8_t HCSTP       : 1;            /*!< [0..0] HOCO Stop                                                          */
            uint8_t             : 7;
    } HOCOCR_b;
  } ;
  
  union {
    __IOM uint8_t HOCOCR2;                      /*!< (@ 0x00000037) High-Speed On-Chip Oscillator Control Register
                                                                    2                                                          */
    
    struct {
            uint8_t             : 3;
      __IOM uint8_t HCFRQ1      : 3;            /*!< [5..3] HOCO Frequency Setting 1                                           */
            uint8_t             : 2;
    } HOCOCR2_b;
  } ;
  
  union {
    __IOM uint8_t MOCOCR;                       /*!< (@ 0x00000038) Middle-Speed On-Chip Oscillator Control Register           */
    
    struct {
      __IOM uint8_t MCSTP       : 1;            /*!< [0..0] MOCO Stop                                                          */
            uint8_t             : 7;
    } MOCOCR_b;
  } ;
  __IM  uint8_t   RESERVED9;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IM  uint8_t OSCSF;                        /*!< (@ 0x0000003C) Oscillation Stabilization Flag Register                    */
    
    struct {
      __IM  uint8_t HOCOSF      : 1;            /*!< [0..0] HOCO Clock Oscillation Stabilization Flag                          */
            uint8_t             : 7;
    } OSCSF_b;
  } ;
  __IM  uint8_t   RESERVED11;
  
  union {
    __IOM uint8_t CKOCR;                        /*!< (@ 0x0000003E) Clock Out Control Register                                 */
    
    struct {
      __IOM uint8_t CKOSEL      : 3;            /*!< [2..0] Clock Out Source Select                                            */
            uint8_t             : 1;
      __IOM uint8_t CKODIV      : 3;            /*!< [6..4] Clock Output Frequency Division Ratio                              */
      __IOM uint8_t CKOEN       : 1;            /*!< [7..7] Clock Out Enable                                                   */
    } CKOCR_b;
  } ;
  __IM  uint8_t   RESERVED12;
  __IM  uint32_t  RESERVED13[3];
  
  union {
    __IOM uint8_t LPOPT;                        /*!< (@ 0x0000004C) Lower Power Operation Control Register                     */
    
    struct {
            uint8_t             : 3;
      __IOM uint8_t BPFCLKDIS   : 1;            /*!< [3..3] BPF Clock Disable Control                                          */
            uint8_t             : 3;
      __IOM uint8_t LPOPTEN     : 1;            /*!< [7..7] Lower Power Operation Enable                                       */
    } LPOPT_b;
  } ;
  __IM  uint8_t   RESERVED14;
  __IM  uint16_t  RESERVED15;
  __IM  uint32_t  RESERVED16;
  
  union {
    __IOM uint8_t OSMCR;                        /*!< (@ 0x00000054) Subsystem Clock Supply Mode Control Register               */
    
    struct {
      __IOM uint8_t WUTMMCK0    : 1;            /*!< [0..0] Selection of the operating clock for the realtime clock,
                                                     32-bit interval timer, serial interfaces UARTA0 and UARTA1,
                                                     remote control signal receiver                                            */
            uint8_t             : 7;
    } OSMCR_b;
  } ;
  __IM  uint8_t   RESERVED17;
  __IM  uint16_t  RESERVED18;
  __IM  uint32_t  RESERVED19[2];
  __IM  uint8_t   RESERVED20;
  
  union {
    __IOM uint8_t MOCOUTCR;                     /*!< (@ 0x00000061) MOCO User Trimming Control Register                        */
    
    struct {
      __IOM uint8_t MOCOUTRM    : 8;            /*!< [7..0] MOCO User Trimming                                                 */
    } MOCOUTCR_b;
  } ;
  
  union {
    __IOM uint8_t HOCOUTCR;                     /*!< (@ 0x00000062) HOCO User Trimming Control Register                        */
    
    struct {
      __IOM uint8_t HOCOUTRM    : 8;            /*!< [7..0] HOCO User Trimming                                                 */
    } HOCOUTCR_b;
  } ;
  __IM  uint8_t   RESERVED21;
  __IM  uint32_t  RESERVED22[11];
  __IM  uint16_t  RESERVED23;
  
  union {
    __IOM uint8_t SNZCR;                        /*!< (@ 0x00000092) Snooze Control Register                                    */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t SNZDTCEN    : 1;            /*!< [1..1] DTC Enable in Snooze mode                                          */
      __IOM uint8_t RXD0REQEN   : 1;            /*!< [2..2] RXD0 or SCK00 Snooze Request Enable                                */
      __IOM uint8_t RXD2REQEN   : 1;            /*!< [3..3] RXD2 or SCK20 Snooze Request Enable                                */
      __IOM uint8_t REMC0REQEN  : 1;            /*!< [4..4] RIN0 Snooze Request Enable                                         */
            uint8_t             : 2;
      __IOM uint8_t SNZE        : 1;            /*!< [7..7] Snooze mode Enable                                                 */
    } SNZCR_b;
  } ;
  __IM  uint8_t   RESERVED24;
  
  union {
    __IOM uint8_t SNZEDCR0;                     /*!< (@ 0x00000094) Snooze End Control Register 0                              */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t DTCZRED     : 1;            /*!< [1..1] Last DTC Transmission Completion Snooze End Enable                 */
      __IOM uint8_t DTCNZRED    : 1;            /*!< [2..2] Not Last DTC Transmission Completion Snooze End Enable             */
      __IOM uint8_t ADNCRED     : 1;            /*!< [3..3] ADC Compare Mismatch Snooze End Enable                             */
            uint8_t             : 4;
    } SNZEDCR0_b;
  } ;
  
  union {
    __IOM uint8_t SNZEDCR1;                     /*!< (@ 0x00000095) Snooze End Control Register 1                              */
    
    struct {
      __IOM uint8_t TMLOIED     : 1;            /*!< [0..0] TML32 Interrupt Snooze End Enable                                  */
      __IOM uint8_t REMCNCRED   : 1;            /*!< [1..1] REMC No-Interrupt Completion Snooze End Enable                     */
            uint8_t             : 2;
      __IOM uint8_t SAU0NCRED   : 1;            /*!< [4..4] SAU0 No-Interrupt Error Completion Snooze End Enable               */
      __IOM uint8_t SAU1NCRED   : 1;            /*!< [5..5] SAU1 No-Interrupt Error Completion Snooze End Enable               */
            uint8_t             : 2;
    } SNZEDCR1_b;
  } ;
  __IM  uint16_t  RESERVED25;
  
  union {
    __IOM uint32_t SNZREQCR0;                   /*!< (@ 0x00000098) Snooze Request Control Register 0                          */
    
    struct {
      __IOM uint32_t SNZREQEN0  : 1;            /*!< [0..0] Enable IRQ0 pin snooze request                                     */
      __IOM uint32_t SNZREQEN1  : 1;            /*!< [1..1] Enable IRQ1 pin snooze request                                     */
      __IOM uint32_t SNZREQEN2  : 1;            /*!< [2..2] Enable IRQ2 pin snooze request                                     */
      __IOM uint32_t SNZREQEN3  : 1;            /*!< [3..3] Enable IRQ3 pin snooze request                                     */
      __IOM uint32_t SNZREQEN4  : 1;            /*!< [4..4] Enable IRQ4 pin snooze request                                     */
      __IOM uint32_t SNZREQEN5  : 1;            /*!< [5..5] Enable IRQ5 pin snooze request                                     */
      __IOM uint32_t SNZREQEN6  : 1;            /*!< [6..6] Enable IRQ6 pin snooze request                                     */
      __IOM uint32_t SNZREQEN7  : 1;            /*!< [7..7] Enable IRQ7 pin snooze request                                     */
            uint32_t            : 9;
      __IOM uint32_t SNZREQEN17 : 1;            /*!< [17..17] Enable KEY_INTKR snooze request                                  */
            uint32_t            : 6;
      __IOM uint32_t SNZREQEN24 : 1;            /*!< [24..24] Enable RTC alarm snooze request                                  */
            uint32_t            : 1;
      __IOM uint32_t SNZREQEN26 : 1;            /*!< [26..26] Enable TML32 snooze request                                      */
            uint32_t            : 5;
    } SNZREQCR0_b;
  } ;
  __IM  uint16_t  RESERVED26;
  __IM  uint8_t   RESERVED27;
  
  union {
    __IOM uint8_t PSMCR;                        /*!< (@ 0x0000009F) Power Save Memory Control Register                         */
    
    struct {
      __IOM uint8_t PSMC        : 2;            /*!< [1..0] Power Save Memory Control                                          */
            uint8_t             : 6;
    } PSMCR_b;
  } ;
  
  union {
    __IOM uint8_t OPCCR;                        /*!< (@ 0x000000A0) Operating Power Control Register                           */
    
    struct {
      __IOM uint8_t OPCM        : 2;            /*!< [1..0] Operating Power Control Mode Select                                */
            uint8_t             : 2;
      __IM  uint8_t OPCMTSF     : 1;            /*!< [4..4] Operating Power Control Mode Transition Status Flag                */
            uint8_t             : 3;
    } OPCCR_b;
  } ;
  __IM  uint8_t   RESERVED28;
  __IM  uint16_t  RESERVED29;
  __IM  uint32_t  RESERVED30;
  __IM  uint16_t  RESERVED31;
  
  union {
    __IOM uint8_t SOPCCR;                       /*!< (@ 0x000000AA) Sub Operating Power Control Register                       */
    
    struct {
      __IOM uint8_t SOPCM       : 1;            /*!< [0..0] Sub Operating Power Control Mode Select                            */
            uint8_t             : 3;
      __IM  uint8_t SOPCMTSF    : 1;            /*!< [4..4] Operating Power Control Mode Transition Status Flag                */
            uint8_t             : 3;
    } SOPCCR_b;
  } ;
  __IM  uint8_t   RESERVED32;
  __IM  uint32_t  RESERVED33[5];
  
  union {
    __IOM uint16_t RSTSR1;                      /*!< (@ 0x000000C0) Reset Status Register 1                                    */
    
    struct {
      __IOM uint16_t IWDTRF     : 1;            /*!< [0..0] Independent Watchdog Timer Reset Detect Flag                       */
      __IOM uint16_t WDTRF      : 1;            /*!< [1..1] Watchdog Timer Reset Detect Flag                                   */
      __IOM uint16_t SWRF       : 1;            /*!< [2..2] Software Reset Detect Flag                                         */
            uint16_t            : 5;
      __IOM uint16_t RPERF      : 1;            /*!< [8..8] SRAM Parity Error Reset Detect Flag                                */
      __IOM uint16_t REERF      : 1;            /*!< [9..9] SRAM ECC Error Reset Detect Flag                                   */
            uint16_t            : 2;
      __IOM uint16_t BUSERF     : 1;            /*!< [12..12] Bus Error Reset Detect Flag                                      */
            uint16_t            : 3;
    } RSTSR1_b;
  } ;
  __IM  uint16_t  RESERVED34;
  __IM  uint32_t  RESERVED35[7];
  
  union {
    __IOM uint8_t LVD1CR1;                      /*!< (@ 0x000000E0) Voltage Monitor 1 Circuit Control Register                 */
    
    struct {
      __IOM uint8_t IDTSEL      : 2;            /*!< [1..0] Voltage Monitor 1 Interrupt Generation Condition Select            */
      __IOM uint8_t IRQSEL      : 1;            /*!< [2..2] Voltage Monitor 1 Interrupt Type Select                            */
            uint8_t             : 5;
    } LVD1CR1_b;
  } ;
  
  union {
    __IOM uint8_t LVD1SR;                       /*!< (@ 0x000000E1) Voltage Monitor 1 Circuit Status Register                  */
    
    struct {
      __IOM uint8_t DET         : 1;            /*!< [0..0] Voltage Monitor 1 Voltage Variation Detection Flag                 */
      __IM  uint8_t MON         : 1;            /*!< [1..1] Voltage Monitor 1 Signal Monitor Flag                              */
            uint8_t             : 6;
    } LVD1SR_b;
  } ;
  
  union {
    __IOM uint8_t LVD2CR1;                      /*!< (@ 0x000000E2) Voltage Monitor 2 Circuit Control Register 1               */
    
    struct {
      __IOM uint8_t IDTSEL      : 2;            /*!< [1..0] Voltage Monitor 2 Interrupt Generation Condition Select            */
      __IOM uint8_t IRQSEL      : 1;            /*!< [2..2] Voltage Monitor 2 Interrupt Type Select                            */
            uint8_t             : 5;
    } LVD2CR1_b;
  } ;
  
  union {
    __IOM uint8_t LVD2SR;                       /*!< (@ 0x000000E3) Voltage Monitor 2 Circuit Status Register                  */
    
    struct {
      __IOM uint8_t DET         : 1;            /*!< [0..0] Voltage Monitor 2 Voltage Variation Detection Flag                 */
      __IM  uint8_t MON         : 1;            /*!< [1..1] Voltage Monitor 2 Signal Monitor Flag                              */
            uint8_t             : 6;
    } LVD2SR_b;
  } ;
  __IM  uint32_t  RESERVED36[198];
  __IM  uint16_t  RESERVED37;
  
  union {
    __IOM uint16_t PRCR;                        /*!< (@ 0x000003FE) Protect Register                                           */
    
    struct {
      __IOM uint16_t PRC0       : 1;            /*!< [0..0] Enable writing to the registers related to the clock
                                                     generation circuit                                                        */
      __IOM uint16_t PRC1       : 1;            /*!< [1..1] Enable writing to the registers related to the low power
                                                     modes                                                                     */
            uint16_t            : 1;
      __IOM uint16_t PRC3       : 1;            /*!< [3..3] Enable writing to the registers related to the LVD                 */
            uint16_t            : 4;
      __OM  uint16_t PRKEY      : 8;            /*!< [15..8] PRC Key Code                                                      */
    } PRCR_b;
  } ;
  __IM  uint32_t  RESERVED38[3];
  __IM  uint16_t  RESERVED39;
  
  union {
    __IOM uint8_t SYOCDCR;                      /*!< (@ 0x0000040E) System Control OCD Control Register                        */
    
    struct {
            uint8_t             : 7;
      __IOM uint8_t DBGEN       : 1;            /*!< [7..7] Debugger Enable bit                                                */
    } SYOCDCR_b;
  } ;
  __IM  uint8_t   RESERVED40;
  
  union {
    __IOM uint8_t RSTSR0;                       /*!< (@ 0x00000410) Reset Status Register 0                                    */
    
    struct {
      __IOM uint8_t PORF        : 1;            /*!< [0..0] Power-On Reset Detect Flag                                         */
      __IOM uint8_t LVD0RF      : 1;            /*!< [1..1] Voltage Monitor 0 Reset Detect Flag                                */
      __IOM uint8_t LVD1RF      : 1;            /*!< [2..2] Voltage Monitor 1 Reset Detect Flag                                */
      __IOM uint8_t LVD2RF      : 1;            /*!< [3..3] Voltage Monitor 2 Reset Detect Flag                                */
            uint8_t             : 4;
    } RSTSR0_b;
  } ;
  
  union {
    __IOM uint8_t RSTSR2;                       /*!< (@ 0x00000411) Reset Status Register 2                                    */
    
    struct {
      __IOM uint8_t CWSF        : 1;            /*!< [0..0] Cold/Warm Start Determination Flag                                 */
            uint8_t             : 7;
    } RSTSR2_b;
  } ;
  __IM  uint16_t  RESERVED41[2];
  __IM  uint8_t   RESERVED42;
  
  union {
    __IOM uint8_t LVCMPCR;                      /*!< (@ 0x00000417) Voltage Monitor Circuit Control Register                   */
    
    struct {
            uint8_t             : 5;
      __IOM uint8_t LVD1E       : 1;            /*!< [5..5] Voltage Detection 1 Enable                                         */
      __IOM uint8_t LVD2E       : 1;            /*!< [6..6] Voltage Detection 2 Enable                                         */
            uint8_t             : 1;
    } LVCMPCR_b;
  } ;
  
  union {
    __IOM uint8_t LVDLVLR;                      /*!< (@ 0x00000418) Voltage Detection Level Select Register                    */
    
    struct {
      __IOM uint8_t LVD1LVL     : 5;            /*!< [4..0] Voltage Detection 1 Level Select (Standard voltage during
                                                     fall in voltage)                                                          */
      __IOM uint8_t LVD2LVL     : 3;            /*!< [7..5] Voltage Detection 2 Level Select (Standard voltage during
                                                     fall in voltage)                                                          */
    } LVDLVLR_b;
  } ;
  __IM  uint8_t   RESERVED43;
  
  union {
    __IOM uint8_t LVD1CR0;                      /*!< (@ 0x0000041A) Voltage Monitor 1 Circuit Control Register 0               */
    
    struct {
      __IOM uint8_t RIE         : 1;            /*!< [0..0] Voltage Monitor 1 Interrupt/Reset Enable                           */
            uint8_t             : 1;
      __IOM uint8_t CMPE        : 1;            /*!< [2..2] Voltage Monitor 1 Circuit Comparison Result Output Enable          */
            uint8_t             : 3;
      __IOM uint8_t RI          : 1;            /*!< [6..6] Voltage Monitor 1 Circuit Mode Select                              */
      __IOM uint8_t RN          : 1;            /*!< [7..7] Voltage Monitor 1 Reset Negate Select                              */
    } LVD1CR0_b;
  } ;
  
  union {
    __IOM uint8_t LVD2CR0;                      /*!< (@ 0x0000041B) Voltage Monitor 2 Circuit Control Register 0               */
    
    struct {
      __IOM uint8_t RIE         : 1;            /*!< [0..0] Voltage Monitor 2 Interrupt/Reset Enable                           */
            uint8_t             : 1;
      __IOM uint8_t CMPE        : 1;            /*!< [2..2] Voltage Monitor 2 Circuit Comparison Result Output Enable          */
            uint8_t             : 3;
      __IOM uint8_t RI          : 1;            /*!< [6..6] Voltage Monitor 2 Circuit Mode Select                              */
      __IOM uint8_t RN          : 1;            /*!< [7..7] Voltage Monitor 2 Reset Negate Select                              */
    } LVD2CR0_b;
  } ;
  __IM  uint32_t  RESERVED44[25];
  
  union {
    __IOM uint8_t SOSCCR;                       /*!< (@ 0x00000480) Sub-Clock Oscillator Control Register                      */
    
    struct {
      __IOM uint8_t SOSTP       : 1;            /*!< [0..0] Sub Clock Oscillator Stop                                          */
            uint8_t             : 7;
    } SOSCCR_b;
  } ;
  
  union {
    __IOM uint8_t SOMCR;                        /*!< (@ 0x00000481) Sub-Clock Oscillator Mode Control Register                 */
    
    struct {
      __IOM uint8_t SODRV       : 2;            /*!< [1..0] Sub-Clock Oscillator Drive Capability Switching                    */
            uint8_t             : 6;
    } SOMCR_b;
  } ;
  
  union {
    __IOM uint8_t SOMRG;                        /*!< (@ 0x00000482) Sub-Clock Oscillator Margin Check Register                 */
    
    struct {
      __IOM uint8_t SOSCMRG     : 2;            /*!< [1..0] Sub Clock Oscillator Margin check Switching                        */
            uint8_t             : 6;
    } SOMRG_b;
  } ;
  __IM  uint8_t   RESERVED45;
  __IM  uint32_t  RESERVED46[3];
  
  union {
    __IOM uint8_t LOCOCR;                       /*!< (@ 0x00000490) Low-Speed On-Chip Oscillator Control Register              */
    
    struct {
      __IOM uint8_t LCSTP       : 1;            /*!< [0..0] LOCO Stop                                                          */
            uint8_t             : 7;
    } LOCOCR_b;
  } ;
  __IM  uint8_t   RESERVED47;
  
  union {
    __IOM uint8_t LOCOUTCR;                     /*!< (@ 0x00000492) LOCO User Trimming Control Register                        */
    
    struct {
      __IOM uint8_t LOCOUTRM    : 8;            /*!< [7..0] LOCO User Trimming                                                 */
    } LOCOUTCR_b;
  } ;
  __IM  uint8_t   RESERVED48;
} R_SYSC_Type;                                  /*!< Size = 1172 (0x494)                                                       */



/* =========================================================================================================================== */
/* ================                                           PORT0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Port 0 Control Registers (PORT0)
  */

typedef struct {                                /*!< (@ 0x40040000) PORT0 Structure                                            */
  
  union {
    union {
      __IOM uint32_t PCNTR1;                    /*!< (@ 0x00000000) Port Control Register 1                                    */
      
      struct {
        __IOM uint32_t PDR00    : 1;            /*!< [0..0] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR01    : 1;            /*!< [1..1] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR02    : 1;            /*!< [2..2] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR03    : 1;            /*!< [3..3] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR04    : 1;            /*!< [4..4] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR05    : 1;            /*!< [5..5] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR06    : 1;            /*!< [6..6] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR07    : 1;            /*!< [7..7] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR08    : 1;            /*!< [8..8] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR09    : 1;            /*!< [9..9] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR10    : 1;            /*!< [10..10] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR11    : 1;            /*!< [11..11] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR12    : 1;            /*!< [12..12] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR13    : 1;            /*!< [13..13] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR14    : 1;            /*!< [14..14] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR15    : 1;            /*!< [15..15] Pin and Pjn Direction                                            */
        __IOM uint32_t PODR00   : 1;            /*!< [16..16] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR01   : 1;            /*!< [17..17] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR02   : 1;            /*!< [18..18] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR03   : 1;            /*!< [19..19] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR04   : 1;            /*!< [20..20] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR05   : 1;            /*!< [21..21] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR06   : 1;            /*!< [22..22] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR07   : 1;            /*!< [23..23] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR08   : 1;            /*!< [24..24] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR09   : 1;            /*!< [25..25] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR10   : 1;            /*!< [26..26] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR11   : 1;            /*!< [27..27] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR12   : 1;            /*!< [28..28] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR13   : 1;            /*!< [29..29] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR14   : 1;            /*!< [30..30] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR15   : 1;            /*!< [31..31] Pin and Pjn Output Data                                          */
      } PCNTR1_b;
    } ;
    
    struct {
      union {
        __IOM uint16_t PODR;                    /*!< (@ 0x00000000) Port Control Register 1                                    */
        
        struct {
          __IOM uint16_t PODR00 : 1;            /*!< [0..0] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR01 : 1;            /*!< [1..1] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR02 : 1;            /*!< [2..2] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR03 : 1;            /*!< [3..3] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR04 : 1;            /*!< [4..4] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR05 : 1;            /*!< [5..5] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR06 : 1;            /*!< [6..6] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR07 : 1;            /*!< [7..7] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR08 : 1;            /*!< [8..8] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR09 : 1;            /*!< [9..9] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR10 : 1;            /*!< [10..10] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR11 : 1;            /*!< [11..11] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR12 : 1;            /*!< [12..12] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR13 : 1;            /*!< [13..13] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR14 : 1;            /*!< [14..14] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR15 : 1;            /*!< [15..15] Pin and Pjn Output Data                                          */
        } PODR_b;
      } ;
      
      union {
        __IOM uint16_t PDR;                     /*!< (@ 0x00000002) Port Control Register 1                                    */
        
        struct {
          __IOM uint16_t PDR00  : 1;            /*!< [0..0] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR01  : 1;            /*!< [1..1] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR02  : 1;            /*!< [2..2] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR03  : 1;            /*!< [3..3] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR04  : 1;            /*!< [4..4] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR05  : 1;            /*!< [5..5] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR06  : 1;            /*!< [6..6] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR07  : 1;            /*!< [7..7] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR08  : 1;            /*!< [8..8] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR09  : 1;            /*!< [9..9] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR10  : 1;            /*!< [10..10] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR11  : 1;            /*!< [11..11] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR12  : 1;            /*!< [12..12] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR13  : 1;            /*!< [13..13] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR14  : 1;            /*!< [14..14] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR15  : 1;            /*!< [15..15] Pin and Pjn Direction                                            */
        } PDR_b;
      } ;
    };
  };
  
  union {
    union {
      __IM  uint32_t PCNTR2;                    /*!< (@ 0x00000004) Port Control Register 2                                    */
      
      struct {
        __IM  uint32_t PIDR00   : 1;            /*!< [0..0] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR01   : 1;            /*!< [1..1] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR02   : 1;            /*!< [2..2] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR03   : 1;            /*!< [3..3] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR04   : 1;            /*!< [4..4] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR05   : 1;            /*!< [5..5] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR06   : 1;            /*!< [6..6] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR07   : 1;            /*!< [7..7] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR08   : 1;            /*!< [8..8] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR09   : 1;            /*!< [9..9] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR10   : 1;            /*!< [10..10] Pin and Pjn State                                                */
        __IM  uint32_t PIDR11   : 1;            /*!< [11..11] Pin and Pjn State                                                */
        __IM  uint32_t PIDR12   : 1;            /*!< [12..12] Pin and Pjn State                                                */
        __IM  uint32_t PIDR13   : 1;            /*!< [13..13] Pin and Pjn State                                                */
        __IM  uint32_t PIDR14   : 1;            /*!< [14..14] Pin and Pjn State                                                */
        __IM  uint32_t PIDR15   : 1;            /*!< [15..15] Pin and Pjn State                                                */
        __IM  uint32_t EIDR00   : 1;            /*!< [16..16] Port Event Input Data                                            */
        __IM  uint32_t EIDR01   : 1;            /*!< [17..17] Port Event Input Data                                            */
        __IM  uint32_t EIDR02   : 1;            /*!< [18..18] Port Event Input Data                                            */
        __IM  uint32_t EIDR03   : 1;            /*!< [19..19] Port Event Input Data                                            */
        __IM  uint32_t EIDR04   : 1;            /*!< [20..20] Port Event Input Data                                            */
        __IM  uint32_t EIDR05   : 1;            /*!< [21..21] Port Event Input Data                                            */
        __IM  uint32_t EIDR06   : 1;            /*!< [22..22] Port Event Input Data                                            */
        __IM  uint32_t EIDR07   : 1;            /*!< [23..23] Port Event Input Data                                            */
        __IM  uint32_t EIDR08   : 1;            /*!< [24..24] Port Event Input Data                                            */
        __IM  uint32_t EIDR09   : 1;            /*!< [25..25] Port Event Input Data                                            */
        __IM  uint32_t EIDR10   : 1;            /*!< [26..26] Port Event Input Data                                            */
        __IM  uint32_t EIDR11   : 1;            /*!< [27..27] Port Event Input Data                                            */
        __IM  uint32_t EIDR12   : 1;            /*!< [28..28] Port Event Input Data                                            */
        __IM  uint32_t EIDR13   : 1;            /*!< [29..29] Port Event Input Data                                            */
        __IM  uint32_t EIDR14   : 1;            /*!< [30..30] Port Event Input Data                                            */
        __IM  uint32_t EIDR15   : 1;            /*!< [31..31] Port Event Input Data                                            */
      } PCNTR2_b;
    } ;
    
    struct {
      union {
        __IM  uint16_t EIDR;                    /*!< (@ 0x00000004) Port Control Register 2                                    */
        
        struct {
          __IM  uint16_t EIDR00 : 1;            /*!< [0..0] Port Event Input Data                                              */
          __IM  uint16_t EIDR01 : 1;            /*!< [1..1] Port Event Input Data                                              */
          __IM  uint16_t EIDR02 : 1;            /*!< [2..2] Port Event Input Data                                              */
          __IM  uint16_t EIDR03 : 1;            /*!< [3..3] Port Event Input Data                                              */
          __IM  uint16_t EIDR04 : 1;            /*!< [4..4] Port Event Input Data                                              */
          __IM  uint16_t EIDR05 : 1;            /*!< [5..5] Port Event Input Data                                              */
          __IM  uint16_t EIDR06 : 1;            /*!< [6..6] Port Event Input Data                                              */
          __IM  uint16_t EIDR07 : 1;            /*!< [7..7] Port Event Input Data                                              */
          __IM  uint16_t EIDR08 : 1;            /*!< [8..8] Port Event Input Data                                              */
          __IM  uint16_t EIDR09 : 1;            /*!< [9..9] Port Event Input Data                                              */
          __IM  uint16_t EIDR10 : 1;            /*!< [10..10] Port Event Input Data                                            */
          __IM  uint16_t EIDR11 : 1;            /*!< [11..11] Port Event Input Data                                            */
          __IM  uint16_t EIDR12 : 1;            /*!< [12..12] Port Event Input Data                                            */
          __IM  uint16_t EIDR13 : 1;            /*!< [13..13] Port Event Input Data                                            */
          __IM  uint16_t EIDR14 : 1;            /*!< [14..14] Port Event Input Data                                            */
          __IM  uint16_t EIDR15 : 1;            /*!< [15..15] Port Event Input Data                                            */
        } EIDR_b;
      } ;
      
      union {
        __IM  uint16_t PIDR;                    /*!< (@ 0x00000006) Port Control Register 2                                    */
        
        struct {
          __IM  uint16_t PIDR00 : 1;            /*!< [0..0] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR01 : 1;            /*!< [1..1] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR02 : 1;            /*!< [2..2] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR03 : 1;            /*!< [3..3] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR04 : 1;            /*!< [4..4] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR05 : 1;            /*!< [5..5] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR06 : 1;            /*!< [6..6] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR07 : 1;            /*!< [7..7] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR08 : 1;            /*!< [8..8] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR09 : 1;            /*!< [9..9] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR10 : 1;            /*!< [10..10] Pin and Pjn State                                                */
          __IM  uint16_t PIDR11 : 1;            /*!< [11..11] Pin and Pjn State                                                */
          __IM  uint16_t PIDR12 : 1;            /*!< [12..12] Pin and Pjn State                                                */
          __IM  uint16_t PIDR13 : 1;            /*!< [13..13] Pin and Pjn State                                                */
          __IM  uint16_t PIDR14 : 1;            /*!< [14..14] Pin and Pjn State                                                */
          __IM  uint16_t PIDR15 : 1;            /*!< [15..15] Pin and Pjn State                                                */
        } PIDR_b;
      } ;
    };
  };
  
  union {
    union {
      __OM  uint32_t PCNTR3;                    /*!< (@ 0x00000008) Port Control Register 3                                    */
      
      struct {
        __OM  uint32_t POSR00   : 1;            /*!< [0..0] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR01   : 1;            /*!< [1..1] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR02   : 1;            /*!< [2..2] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR03   : 1;            /*!< [3..3] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR04   : 1;            /*!< [4..4] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR05   : 1;            /*!< [5..5] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR06   : 1;            /*!< [6..6] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR07   : 1;            /*!< [7..7] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR08   : 1;            /*!< [8..8] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR09   : 1;            /*!< [9..9] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR10   : 1;            /*!< [10..10] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR11   : 1;            /*!< [11..11] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR12   : 1;            /*!< [12..12] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR13   : 1;            /*!< [13..13] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR14   : 1;            /*!< [14..14] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR15   : 1;            /*!< [15..15] Pin and Pjn Output Set                                           */
        __OM  uint32_t PORR00   : 1;            /*!< [16..16] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR01   : 1;            /*!< [17..17] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR02   : 1;            /*!< [18..18] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR03   : 1;            /*!< [19..19] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR04   : 1;            /*!< [20..20] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR05   : 1;            /*!< [21..21] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR06   : 1;            /*!< [22..22] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR07   : 1;            /*!< [23..23] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR08   : 1;            /*!< [24..24] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR09   : 1;            /*!< [25..25] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR10   : 1;            /*!< [26..26] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR11   : 1;            /*!< [27..27] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR12   : 1;            /*!< [28..28] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR13   : 1;            /*!< [29..29] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR14   : 1;            /*!< [30..30] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR15   : 1;            /*!< [31..31] Pin and Pjn Output Reset                                         */
      } PCNTR3_b;
    } ;
    
    struct {
      union {
        __OM  uint16_t PORR;                    /*!< (@ 0x00000008) Port Control Register 3                                    */
        
        struct {
          __OM  uint16_t PORR00 : 1;            /*!< [0..0] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR01 : 1;            /*!< [1..1] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR02 : 1;            /*!< [2..2] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR03 : 1;            /*!< [3..3] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR04 : 1;            /*!< [4..4] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR05 : 1;            /*!< [5..5] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR06 : 1;            /*!< [6..6] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR07 : 1;            /*!< [7..7] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR08 : 1;            /*!< [8..8] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR09 : 1;            /*!< [9..9] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR10 : 1;            /*!< [10..10] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR11 : 1;            /*!< [11..11] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR12 : 1;            /*!< [12..12] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR13 : 1;            /*!< [13..13] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR14 : 1;            /*!< [14..14] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR15 : 1;            /*!< [15..15] Pin and Pjn Output Reset                                         */
        } PORR_b;
      } ;
      
      union {
        __OM  uint16_t POSR;                    /*!< (@ 0x0000000A) Port Control Register 3                                    */
        
        struct {
          __OM  uint16_t POSR00 : 1;            /*!< [0..0] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR01 : 1;            /*!< [1..1] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR02 : 1;            /*!< [2..2] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR03 : 1;            /*!< [3..3] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR04 : 1;            /*!< [4..4] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR05 : 1;            /*!< [5..5] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR06 : 1;            /*!< [6..6] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR07 : 1;            /*!< [7..7] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR08 : 1;            /*!< [8..8] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR09 : 1;            /*!< [9..9] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR10 : 1;            /*!< [10..10] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR11 : 1;            /*!< [11..11] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR12 : 1;            /*!< [12..12] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR13 : 1;            /*!< [13..13] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR14 : 1;            /*!< [14..14] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR15 : 1;            /*!< [15..15] Pin and Pjn Output Set                                           */
        } POSR_b;
      } ;
    };
  };
} R_PORT0_Type;                                 /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           PORT1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Port 1 Control Registers (PORT1)
  */

typedef struct {                                /*!< (@ 0x40040020) PORT1 Structure                                            */
  
  union {
    union {
      __IOM uint32_t PCNTR1;                    /*!< (@ 0x00000000) Port Control Register 1                                    */
      
      struct {
        __IOM uint32_t PDR00    : 1;            /*!< [0..0] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR01    : 1;            /*!< [1..1] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR02    : 1;            /*!< [2..2] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR03    : 1;            /*!< [3..3] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR04    : 1;            /*!< [4..4] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR05    : 1;            /*!< [5..5] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR06    : 1;            /*!< [6..6] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR07    : 1;            /*!< [7..7] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR08    : 1;            /*!< [8..8] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR09    : 1;            /*!< [9..9] Pin and Pjn Direction                                              */
        __IOM uint32_t PDR10    : 1;            /*!< [10..10] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR11    : 1;            /*!< [11..11] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR12    : 1;            /*!< [12..12] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR13    : 1;            /*!< [13..13] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR14    : 1;            /*!< [14..14] Pin and Pjn Direction                                            */
        __IOM uint32_t PDR15    : 1;            /*!< [15..15] Pin and Pjn Direction                                            */
        __IOM uint32_t PODR00   : 1;            /*!< [16..16] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR01   : 1;            /*!< [17..17] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR02   : 1;            /*!< [18..18] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR03   : 1;            /*!< [19..19] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR04   : 1;            /*!< [20..20] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR05   : 1;            /*!< [21..21] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR06   : 1;            /*!< [22..22] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR07   : 1;            /*!< [23..23] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR08   : 1;            /*!< [24..24] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR09   : 1;            /*!< [25..25] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR10   : 1;            /*!< [26..26] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR11   : 1;            /*!< [27..27] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR12   : 1;            /*!< [28..28] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR13   : 1;            /*!< [29..29] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR14   : 1;            /*!< [30..30] Pin and Pjn Output Data                                          */
        __IOM uint32_t PODR15   : 1;            /*!< [31..31] Pin and Pjn Output Data                                          */
      } PCNTR1_b;
    } ;
    
    struct {
      union {
        __IOM uint16_t PODR;                    /*!< (@ 0x00000000) Port Control Register 1                                    */
        
        struct {
          __IOM uint16_t PODR00 : 1;            /*!< [0..0] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR01 : 1;            /*!< [1..1] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR02 : 1;            /*!< [2..2] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR03 : 1;            /*!< [3..3] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR04 : 1;            /*!< [4..4] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR05 : 1;            /*!< [5..5] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR06 : 1;            /*!< [6..6] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR07 : 1;            /*!< [7..7] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR08 : 1;            /*!< [8..8] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR09 : 1;            /*!< [9..9] Pin and Pjn Output Data                                            */
          __IOM uint16_t PODR10 : 1;            /*!< [10..10] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR11 : 1;            /*!< [11..11] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR12 : 1;            /*!< [12..12] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR13 : 1;            /*!< [13..13] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR14 : 1;            /*!< [14..14] Pin and Pjn Output Data                                          */
          __IOM uint16_t PODR15 : 1;            /*!< [15..15] Pin and Pjn Output Data                                          */
        } PODR_b;
      } ;
      
      union {
        __IOM uint16_t PDR;                     /*!< (@ 0x00000002) Port Control Register 1                                    */
        
        struct {
          __IOM uint16_t PDR00  : 1;            /*!< [0..0] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR01  : 1;            /*!< [1..1] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR02  : 1;            /*!< [2..2] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR03  : 1;            /*!< [3..3] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR04  : 1;            /*!< [4..4] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR05  : 1;            /*!< [5..5] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR06  : 1;            /*!< [6..6] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR07  : 1;            /*!< [7..7] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR08  : 1;            /*!< [8..8] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR09  : 1;            /*!< [9..9] Pin and Pjn Direction                                              */
          __IOM uint16_t PDR10  : 1;            /*!< [10..10] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR11  : 1;            /*!< [11..11] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR12  : 1;            /*!< [12..12] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR13  : 1;            /*!< [13..13] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR14  : 1;            /*!< [14..14] Pin and Pjn Direction                                            */
          __IOM uint16_t PDR15  : 1;            /*!< [15..15] Pin and Pjn Direction                                            */
        } PDR_b;
      } ;
    };
  };
  
  union {
    union {
      __IM  uint32_t PCNTR2;                    /*!< (@ 0x00000004) Port Control Register 2                                    */
      
      struct {
        __IM  uint32_t PIDR00   : 1;            /*!< [0..0] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR01   : 1;            /*!< [1..1] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR02   : 1;            /*!< [2..2] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR03   : 1;            /*!< [3..3] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR04   : 1;            /*!< [4..4] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR05   : 1;            /*!< [5..5] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR06   : 1;            /*!< [6..6] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR07   : 1;            /*!< [7..7] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR08   : 1;            /*!< [8..8] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR09   : 1;            /*!< [9..9] Pin and Pjn State                                                  */
        __IM  uint32_t PIDR10   : 1;            /*!< [10..10] Pin and Pjn State                                                */
        __IM  uint32_t PIDR11   : 1;            /*!< [11..11] Pin and Pjn State                                                */
        __IM  uint32_t PIDR12   : 1;            /*!< [12..12] Pin and Pjn State                                                */
        __IM  uint32_t PIDR13   : 1;            /*!< [13..13] Pin and Pjn State                                                */
        __IM  uint32_t PIDR14   : 1;            /*!< [14..14] Pin and Pjn State                                                */
        __IM  uint32_t PIDR15   : 1;            /*!< [15..15] Pin and Pjn State                                                */
        __IM  uint32_t EIDR00   : 1;            /*!< [16..16] Port Event Input Data                                            */
        __IM  uint32_t EIDR01   : 1;            /*!< [17..17] Port Event Input Data                                            */
        __IM  uint32_t EIDR02   : 1;            /*!< [18..18] Port Event Input Data                                            */
        __IM  uint32_t EIDR03   : 1;            /*!< [19..19] Port Event Input Data                                            */
        __IM  uint32_t EIDR04   : 1;            /*!< [20..20] Port Event Input Data                                            */
        __IM  uint32_t EIDR05   : 1;            /*!< [21..21] Port Event Input Data                                            */
        __IM  uint32_t EIDR06   : 1;            /*!< [22..22] Port Event Input Data                                            */
        __IM  uint32_t EIDR07   : 1;            /*!< [23..23] Port Event Input Data                                            */
        __IM  uint32_t EIDR08   : 1;            /*!< [24..24] Port Event Input Data                                            */
        __IM  uint32_t EIDR09   : 1;            /*!< [25..25] Port Event Input Data                                            */
        __IM  uint32_t EIDR10   : 1;            /*!< [26..26] Port Event Input Data                                            */
        __IM  uint32_t EIDR11   : 1;            /*!< [27..27] Port Event Input Data                                            */
        __IM  uint32_t EIDR12   : 1;            /*!< [28..28] Port Event Input Data                                            */
        __IM  uint32_t EIDR13   : 1;            /*!< [29..29] Port Event Input Data                                            */
        __IM  uint32_t EIDR14   : 1;            /*!< [30..30] Port Event Input Data                                            */
        __IM  uint32_t EIDR15   : 1;            /*!< [31..31] Port Event Input Data                                            */
      } PCNTR2_b;
    } ;
    
    struct {
      union {
        __IM  uint16_t EIDR;                    /*!< (@ 0x00000004) Port Control Register 2                                    */
        
        struct {
          __IM  uint16_t EIDR00 : 1;            /*!< [0..0] Port Event Input Data                                              */
          __IM  uint16_t EIDR01 : 1;            /*!< [1..1] Port Event Input Data                                              */
          __IM  uint16_t EIDR02 : 1;            /*!< [2..2] Port Event Input Data                                              */
          __IM  uint16_t EIDR03 : 1;            /*!< [3..3] Port Event Input Data                                              */
          __IM  uint16_t EIDR04 : 1;            /*!< [4..4] Port Event Input Data                                              */
          __IM  uint16_t EIDR05 : 1;            /*!< [5..5] Port Event Input Data                                              */
          __IM  uint16_t EIDR06 : 1;            /*!< [6..6] Port Event Input Data                                              */
          __IM  uint16_t EIDR07 : 1;            /*!< [7..7] Port Event Input Data                                              */
          __IM  uint16_t EIDR08 : 1;            /*!< [8..8] Port Event Input Data                                              */
          __IM  uint16_t EIDR09 : 1;            /*!< [9..9] Port Event Input Data                                              */
          __IM  uint16_t EIDR10 : 1;            /*!< [10..10] Port Event Input Data                                            */
          __IM  uint16_t EIDR11 : 1;            /*!< [11..11] Port Event Input Data                                            */
          __IM  uint16_t EIDR12 : 1;            /*!< [12..12] Port Event Input Data                                            */
          __IM  uint16_t EIDR13 : 1;            /*!< [13..13] Port Event Input Data                                            */
          __IM  uint16_t EIDR14 : 1;            /*!< [14..14] Port Event Input Data                                            */
          __IM  uint16_t EIDR15 : 1;            /*!< [15..15] Port Event Input Data                                            */
        } EIDR_b;
      } ;
      
      union {
        __IM  uint16_t PIDR;                    /*!< (@ 0x00000006) Port Control Register 2                                    */
        
        struct {
          __IM  uint16_t PIDR00 : 1;            /*!< [0..0] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR01 : 1;            /*!< [1..1] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR02 : 1;            /*!< [2..2] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR03 : 1;            /*!< [3..3] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR04 : 1;            /*!< [4..4] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR05 : 1;            /*!< [5..5] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR06 : 1;            /*!< [6..6] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR07 : 1;            /*!< [7..7] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR08 : 1;            /*!< [8..8] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR09 : 1;            /*!< [9..9] Pin and Pjn State                                                  */
          __IM  uint16_t PIDR10 : 1;            /*!< [10..10] Pin and Pjn State                                                */
          __IM  uint16_t PIDR11 : 1;            /*!< [11..11] Pin and Pjn State                                                */
          __IM  uint16_t PIDR12 : 1;            /*!< [12..12] Pin and Pjn State                                                */
          __IM  uint16_t PIDR13 : 1;            /*!< [13..13] Pin and Pjn State                                                */
          __IM  uint16_t PIDR14 : 1;            /*!< [14..14] Pin and Pjn State                                                */
          __IM  uint16_t PIDR15 : 1;            /*!< [15..15] Pin and Pjn State                                                */
        } PIDR_b;
      } ;
    };
  };
  
  union {
    union {
      __OM  uint32_t PCNTR3;                    /*!< (@ 0x00000008) Port Control Register 3                                    */
      
      struct {
        __OM  uint32_t POSR00   : 1;            /*!< [0..0] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR01   : 1;            /*!< [1..1] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR02   : 1;            /*!< [2..2] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR03   : 1;            /*!< [3..3] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR04   : 1;            /*!< [4..4] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR05   : 1;            /*!< [5..5] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR06   : 1;            /*!< [6..6] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR07   : 1;            /*!< [7..7] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR08   : 1;            /*!< [8..8] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR09   : 1;            /*!< [9..9] Pin and Pjn Output Set                                             */
        __OM  uint32_t POSR10   : 1;            /*!< [10..10] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR11   : 1;            /*!< [11..11] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR12   : 1;            /*!< [12..12] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR13   : 1;            /*!< [13..13] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR14   : 1;            /*!< [14..14] Pin and Pjn Output Set                                           */
        __OM  uint32_t POSR15   : 1;            /*!< [15..15] Pin and Pjn Output Set                                           */
        __OM  uint32_t PORR00   : 1;            /*!< [16..16] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR01   : 1;            /*!< [17..17] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR02   : 1;            /*!< [18..18] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR03   : 1;            /*!< [19..19] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR04   : 1;            /*!< [20..20] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR05   : 1;            /*!< [21..21] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR06   : 1;            /*!< [22..22] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR07   : 1;            /*!< [23..23] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR08   : 1;            /*!< [24..24] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR09   : 1;            /*!< [25..25] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR10   : 1;            /*!< [26..26] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR11   : 1;            /*!< [27..27] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR12   : 1;            /*!< [28..28] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR13   : 1;            /*!< [29..29] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR14   : 1;            /*!< [30..30] Pin and Pjn Output Reset                                         */
        __OM  uint32_t PORR15   : 1;            /*!< [31..31] Pin and Pjn Output Reset                                         */
      } PCNTR3_b;
    } ;
    
    struct {
      union {
        __OM  uint16_t PORR;                    /*!< (@ 0x00000008) Port Control Register 3                                    */
        
        struct {
          __OM  uint16_t PORR00 : 1;            /*!< [0..0] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR01 : 1;            /*!< [1..1] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR02 : 1;            /*!< [2..2] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR03 : 1;            /*!< [3..3] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR04 : 1;            /*!< [4..4] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR05 : 1;            /*!< [5..5] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR06 : 1;            /*!< [6..6] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR07 : 1;            /*!< [7..7] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR08 : 1;            /*!< [8..8] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR09 : 1;            /*!< [9..9] Pin and Pjn Output Reset                                           */
          __OM  uint16_t PORR10 : 1;            /*!< [10..10] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR11 : 1;            /*!< [11..11] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR12 : 1;            /*!< [12..12] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR13 : 1;            /*!< [13..13] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR14 : 1;            /*!< [14..14] Pin and Pjn Output Reset                                         */
          __OM  uint16_t PORR15 : 1;            /*!< [15..15] Pin and Pjn Output Reset                                         */
        } PORR_b;
      } ;
      
      union {
        __OM  uint16_t POSR;                    /*!< (@ 0x0000000A) Port Control Register 3                                    */
        
        struct {
          __OM  uint16_t POSR00 : 1;            /*!< [0..0] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR01 : 1;            /*!< [1..1] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR02 : 1;            /*!< [2..2] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR03 : 1;            /*!< [3..3] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR04 : 1;            /*!< [4..4] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR05 : 1;            /*!< [5..5] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR06 : 1;            /*!< [6..6] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR07 : 1;            /*!< [7..7] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR08 : 1;            /*!< [8..8] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR09 : 1;            /*!< [9..9] Pin and Pjn Output Set                                             */
          __OM  uint16_t POSR10 : 1;            /*!< [10..10] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR11 : 1;            /*!< [11..11] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR12 : 1;            /*!< [12..12] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR13 : 1;            /*!< [13..13] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR14 : 1;            /*!< [14..14] Pin and Pjn Output Set                                           */
          __OM  uint16_t POSR15 : 1;            /*!< [15..15] Pin and Pjn Output Set                                           */
        } POSR_b;
      } ;
    };
  };
  
  union {
    union {
      __IOM uint32_t PCNTR4;                    /*!< (@ 0x0000000C) Port Control Register 4                                    */
      
      struct {
        __IOM uint32_t EOSR00   : 1;            /*!< [0..0] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR01   : 1;            /*!< [1..1] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR02   : 1;            /*!< [2..2] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR03   : 1;            /*!< [3..3] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR04   : 1;            /*!< [4..4] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR05   : 1;            /*!< [5..5] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR06   : 1;            /*!< [6..6] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR07   : 1;            /*!< [7..7] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR08   : 1;            /*!< [8..8] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR09   : 1;            /*!< [9..9] Pin and Pjn Event Output Set                                       */
        __IOM uint32_t EOSR10   : 1;            /*!< [10..10] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EOSR11   : 1;            /*!< [11..11] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EOSR12   : 1;            /*!< [12..12] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EOSR13   : 1;            /*!< [13..13] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EOSR14   : 1;            /*!< [14..14] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EOSR15   : 1;            /*!< [15..15] Pin and Pjn Event Output Set                                     */
        __IOM uint32_t EORR00   : 1;            /*!< [16..16] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR01   : 1;            /*!< [17..17] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR02   : 1;            /*!< [18..18] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR03   : 1;            /*!< [19..19] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR04   : 1;            /*!< [20..20] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR05   : 1;            /*!< [21..21] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR06   : 1;            /*!< [22..22] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR07   : 1;            /*!< [23..23] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR08   : 1;            /*!< [24..24] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR09   : 1;            /*!< [25..25] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR10   : 1;            /*!< [26..26] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR11   : 1;            /*!< [27..27] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR12   : 1;            /*!< [28..28] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR13   : 1;            /*!< [29..29] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR14   : 1;            /*!< [30..30] Pin and Pjn Event Output Reset                                   */
        __IOM uint32_t EORR15   : 1;            /*!< [31..31] Pin and Pjn Event Output Reset                                   */
      } PCNTR4_b;
    } ;
    
    struct {
      union {
        __IOM uint16_t EORR;                    /*!< (@ 0x0000000C) Port Control Register 4                                    */
        
        struct {
          __IOM uint16_t EORR00 : 1;            /*!< [0..0] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR01 : 1;            /*!< [1..1] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR02 : 1;            /*!< [2..2] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR03 : 1;            /*!< [3..3] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR04 : 1;            /*!< [4..4] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR05 : 1;            /*!< [5..5] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR06 : 1;            /*!< [6..6] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR07 : 1;            /*!< [7..7] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR08 : 1;            /*!< [8..8] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR09 : 1;            /*!< [9..9] Pin and Pjn Event Output Reset                                     */
          __IOM uint16_t EORR10 : 1;            /*!< [10..10] Pin and Pjn Event Output Reset                                   */
          __IOM uint16_t EORR11 : 1;            /*!< [11..11] Pin and Pjn Event Output Reset                                   */
          __IOM uint16_t EORR12 : 1;            /*!< [12..12] Pin and Pjn Event Output Reset                                   */
          __IOM uint16_t EORR13 : 1;            /*!< [13..13] Pin and Pjn Event Output Reset                                   */
          __IOM uint16_t EORR14 : 1;            /*!< [14..14] Pin and Pjn Event Output Reset                                   */
          __IOM uint16_t EORR15 : 1;            /*!< [15..15] Pin and Pjn Event Output Reset                                   */
        } EORR_b;
      } ;
      
      union {
        __IOM uint16_t EOSR;                    /*!< (@ 0x0000000E) Port Control Register 4                                    */
        
        struct {
          __IOM uint16_t EOSR00 : 1;            /*!< [0..0] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR01 : 1;            /*!< [1..1] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR02 : 1;            /*!< [2..2] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR03 : 1;            /*!< [3..3] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR04 : 1;            /*!< [4..4] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR05 : 1;            /*!< [5..5] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR06 : 1;            /*!< [6..6] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR07 : 1;            /*!< [7..7] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR08 : 1;            /*!< [8..8] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR09 : 1;            /*!< [9..9] Pin and Pjn Event Output Set                                       */
          __IOM uint16_t EOSR10 : 1;            /*!< [10..10] Pin and Pjn Event Output Set                                     */
          __IOM uint16_t EOSR11 : 1;            /*!< [11..11] Pin and Pjn Event Output Set                                     */
          __IOM uint16_t EOSR12 : 1;            /*!< [12..12] Pin and Pjn Event Output Set                                     */
          __IOM uint16_t EOSR13 : 1;            /*!< [13..13] Pin and Pjn Event Output Set                                     */
          __IOM uint16_t EOSR14 : 1;            /*!< [14..14] Pin and Pjn Event Output Set                                     */
          __IOM uint16_t EOSR15 : 1;            /*!< [15..15] Pin and Pjn Event Output Set                                     */
        } EOSR_b;
      } ;
    };
  };
} R_PORT1_Type;                                 /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            PFS                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Pmn Pin Function Control Register (PFS)
  */

typedef struct {                                /*!< (@ 0x40040800) PFS Structure                                              */
  
  union {
    union {
      __IOM uint32_t P000PFS;                   /*!< (@ 0x00000000) Port 000 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P000PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED;
          
          union {
            __IOM uint16_t P000PFS_HA;          /*!< (@ 0x00000002) Port 000 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P000PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED1;
          __IM  uint8_t RESERVED2;
          
          union {
            __IOM uint8_t P000PFS_BY;           /*!< (@ 0x00000003) Port 000 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P000PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P001PFS;                   /*!< (@ 0x00000004) Port 001 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P001PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED3;
          
          union {
            __IOM uint16_t P001PFS_HA;          /*!< (@ 0x00000006) Port 001 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P001PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED4;
          __IM  uint8_t RESERVED5;
          
          union {
            __IOM uint8_t P001PFS_BY;           /*!< (@ 0x00000007) Port 001 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P001PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P002PFS;                   /*!< (@ 0x00000008) Port 002 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P002PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED6;
          
          union {
            __IOM uint16_t P002PFS_HA;          /*!< (@ 0x0000000A) Port 002 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P002PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED7;
          __IM  uint8_t RESERVED8;
          
          union {
            __IOM uint8_t P002PFS_BY;           /*!< (@ 0x0000000B) Port 002 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P002PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P003PFS;                   /*!< (@ 0x0000000C) Port 003 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P003PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED9;
          
          union {
            __IOM uint16_t P003PFS_HA;          /*!< (@ 0x0000000E) Port 003 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P003PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED10;
          __IM  uint8_t RESERVED11;
          
          union {
            __IOM uint8_t P003PFS_BY;           /*!< (@ 0x0000000F) Port 003 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P003PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P004PFS;                   /*!< (@ 0x00000010) Port 004 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P004PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED12;
          
          union {
            __IOM uint16_t P004PFS_HA;          /*!< (@ 0x00000012) Port 004 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P004PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED13;
          __IM  uint8_t RESERVED14;
          
          union {
            __IOM uint8_t P004PFS_BY;           /*!< (@ 0x00000013) Port 004 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P004PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P005PFS;                   /*!< (@ 0x00000014) Port 005 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P005PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED15;
          
          union {
            __IOM uint16_t P005PFS_HA;          /*!< (@ 0x00000016) Port 005 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P005PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED16;
          __IM  uint8_t RESERVED17;
          
          union {
            __IOM uint8_t P005PFS_BY;           /*!< (@ 0x00000017) Port 005 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P005PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P006PFS;                   /*!< (@ 0x00000018) Port 006 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P006PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED18;
          
          union {
            __IOM uint16_t P006PFS_HA;          /*!< (@ 0x0000001A) Port 006 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P006PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED19;
          __IM  uint8_t RESERVED20;
          
          union {
            __IOM uint8_t P006PFS_BY;           /*!< (@ 0x0000001B) Port 006 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P006PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P007PFS;                   /*!< (@ 0x0000001C) Port 007 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P007PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED21;
          
          union {
            __IOM uint16_t P007PFS_HA;          /*!< (@ 0x0000001E) Port 007 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P007PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED22;
          __IM  uint8_t RESERVED23;
          
          union {
            __IOM uint8_t P007PFS_BY;           /*!< (@ 0x0000001F) Port 007 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P007PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P008PFS;                   /*!< (@ 0x00000020) Port 008 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P008PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED24;
          
          union {
            __IOM uint16_t P008PFS_HA;          /*!< (@ 0x00000022) Port 008 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P008PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED25;
          __IM  uint8_t RESERVED26;
          
          union {
            __IOM uint8_t P008PFS_BY;           /*!< (@ 0x00000023) Port 008 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P008PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P009PFS;                   /*!< (@ 0x00000024) Port 009 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P009PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED27;
          
          union {
            __IOM uint16_t P009PFS_HA;          /*!< (@ 0x00000026) Port 009 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P009PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED28;
          __IM  uint8_t RESERVED29;
          
          union {
            __IOM uint8_t P009PFS_BY;           /*!< (@ 0x00000027) Port 009 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P009PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P010PFS;                   /*!< (@ 0x00000028) Port 010 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P010PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED30;
          
          union {
            __IOM uint16_t P010PFS_HA;          /*!< (@ 0x0000002A) Port 010 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P010PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED31;
          __IM  uint8_t RESERVED32;
          
          union {
            __IOM uint8_t P010PFS_BY;           /*!< (@ 0x0000002B) Port 010 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P010PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P011PFS;                   /*!< (@ 0x0000002C) Port 011 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P011PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED33;
          
          union {
            __IOM uint16_t P011PFS_HA;          /*!< (@ 0x0000002E) Port 011 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P011PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED34;
          __IM  uint8_t RESERVED35;
          
          union {
            __IOM uint8_t P011PFS_BY;           /*!< (@ 0x0000002F) Port 011 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P011PFS_BY_b;
          } ;
        };
      };
    };
  };
  __IM  uint32_t  RESERVED36[4];
  
  union {
    union {
      __IOM uint32_t P100PFS;                   /*!< (@ 0x00000040) Port 100 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P100PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED37;
          
          union {
            __IOM uint16_t P100PFS_HA;          /*!< (@ 0x00000042) Port 100 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P100PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED38;
          __IM  uint8_t RESERVED39;
          
          union {
            __IOM uint8_t P100PFS_BY;           /*!< (@ 0x00000043) Port 100 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P100PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P101PFS;                   /*!< (@ 0x00000044) Port 101 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P101PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED40;
          
          union {
            __IOM uint16_t P101PFS_HA;          /*!< (@ 0x00000046) Port 101 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P101PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED41;
          __IM  uint8_t RESERVED42;
          
          union {
            __IOM uint8_t P101PFS_BY;           /*!< (@ 0x00000047) Port 101 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P101PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P102PFS;                   /*!< (@ 0x00000048) Port 102 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P102PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED43;
          
          union {
            __IOM uint16_t P102PFS_HA;          /*!< (@ 0x0000004A) Port 102 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P102PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED44;
          __IM  uint8_t RESERVED45;
          
          union {
            __IOM uint8_t P102PFS_BY;           /*!< (@ 0x0000004B) Port 102 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P102PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P103PFS;                   /*!< (@ 0x0000004C) Port 103 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P103PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED46;
          
          union {
            __IOM uint16_t P103PFS_HA;          /*!< (@ 0x0000004E) Port 103 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P103PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED47;
          __IM  uint8_t RESERVED48;
          
          union {
            __IOM uint8_t P103PFS_BY;           /*!< (@ 0x0000004F) Port 103 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P103PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P104PFS;                   /*!< (@ 0x00000050) Port 104 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P104PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED49;
          
          union {
            __IOM uint16_t P104PFS_HA;          /*!< (@ 0x00000052) Port 104 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P104PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED50;
          __IM  uint8_t RESERVED51;
          
          union {
            __IOM uint8_t P104PFS_BY;           /*!< (@ 0x00000053) Port 104 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P104PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P105PFS;                   /*!< (@ 0x00000054) Port 105 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P105PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED52;
          
          union {
            __IOM uint16_t P105PFS_HA;          /*!< (@ 0x00000056) Port 105 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P105PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED53;
          __IM  uint8_t RESERVED54;
          
          union {
            __IOM uint8_t P105PFS_BY;           /*!< (@ 0x00000057) Port 105 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P105PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P106PFS;                   /*!< (@ 0x00000058) Port 106 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P106PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED55;
          
          union {
            __IOM uint16_t P106PFS_HA;          /*!< (@ 0x0000005A) Port 106 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P106PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED56;
          __IM  uint8_t RESERVED57;
          
          union {
            __IOM uint8_t P106PFS_BY;           /*!< (@ 0x0000005B) Port 106 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P106PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P107PFS;                   /*!< (@ 0x0000005C) Port 107 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P107PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED58;
          
          union {
            __IOM uint16_t P107PFS_HA;          /*!< (@ 0x0000005E) Port 107 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P107PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED59;
          __IM  uint8_t RESERVED60;
          
          union {
            __IOM uint8_t P107PFS_BY;           /*!< (@ 0x0000005F) Port 107 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P107PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P108PFS;                   /*!< (@ 0x00000060) Port 108 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P108PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED61;
          
          union {
            __IOM uint16_t P108PFS_HA;          /*!< (@ 0x00000062) Port 108 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P108PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED62;
          __IM  uint8_t RESERVED63;
          
          union {
            __IOM uint8_t P108PFS_BY;           /*!< (@ 0x00000063) Port 108 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P108PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P109PFS;                   /*!< (@ 0x00000064) Port 109 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P109PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED64;
          
          union {
            __IOM uint16_t P109PFS_HA;          /*!< (@ 0x00000066) Port 109 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P109PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED65;
          __IM  uint8_t RESERVED66;
          
          union {
            __IOM uint8_t P109PFS_BY;           /*!< (@ 0x00000067) Port 109 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P109PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P110PFS;                   /*!< (@ 0x00000068) Port 110 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P110PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED67;
          
          union {
            __IOM uint16_t P110PFS_HA;          /*!< (@ 0x0000006A) Port 110 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P110PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED68;
          __IM  uint8_t RESERVED69;
          
          union {
            __IOM uint8_t P110PFS_BY;           /*!< (@ 0x0000006B) Port 110 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P110PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P111PFS;                   /*!< (@ 0x0000006C) Port 111 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P111PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED70;
          
          union {
            __IOM uint16_t P111PFS_HA;          /*!< (@ 0x0000006E) Port 111 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P111PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED71;
          __IM  uint8_t RESERVED72;
          
          union {
            __IOM uint8_t P111PFS_BY;           /*!< (@ 0x0000006F) Port 111 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P111PFS_BY_b;
          } ;
        };
      };
    };
  };
  __IM  uint32_t  RESERVED73[4];
  
  union {
    union {
      __IOM uint32_t P200PFS;                   /*!< (@ 0x00000080) Port 200 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P200PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED74;
          
          union {
            __IOM uint16_t P200PFS_HA;          /*!< (@ 0x00000082) Port 200 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P200PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED75;
          __IM  uint8_t RESERVED76;
          
          union {
            __IOM uint8_t P200PFS_BY;           /*!< (@ 0x00000083) Port 200 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P200PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P201PFS;                   /*!< (@ 0x00000084) Port 201 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P201PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED77;
          
          union {
            __IOM uint16_t P201PFS_HA;          /*!< (@ 0x00000086) Port 201 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P201PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED78;
          __IM  uint8_t RESERVED79;
          
          union {
            __IOM uint8_t P201PFS_BY;           /*!< (@ 0x00000087) Port 201 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P201PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P202PFS;                   /*!< (@ 0x00000088) Port 202 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P202PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED80;
          
          union {
            __IOM uint16_t P202PFS_HA;          /*!< (@ 0x0000008A) Port 202 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P202PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED81;
          __IM  uint8_t RESERVED82;
          
          union {
            __IOM uint8_t P202PFS_BY;           /*!< (@ 0x0000008B) Port 202 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P202PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P203PFS;                   /*!< (@ 0x0000008C) Port 203 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P203PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED83;
          
          union {
            __IOM uint16_t P203PFS_HA;          /*!< (@ 0x0000008E) Port 203 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P203PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED84;
          __IM  uint8_t RESERVED85;
          
          union {
            __IOM uint8_t P203PFS_BY;           /*!< (@ 0x0000008F) Port 203 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P203PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P204PFS;                   /*!< (@ 0x00000090) Port 204 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P204PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED86;
          
          union {
            __IOM uint16_t P204PFS_HA;          /*!< (@ 0x00000092) Port 204 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P204PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED87;
          __IM  uint8_t RESERVED88;
          
          union {
            __IOM uint8_t P204PFS_BY;           /*!< (@ 0x00000093) Port 204 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P204PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P205PFS;                   /*!< (@ 0x00000094) Port 205 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P205PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED89;
          
          union {
            __IOM uint16_t P205PFS_HA;          /*!< (@ 0x00000096) Port 205 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P205PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED90;
          __IM  uint8_t RESERVED91;
          
          union {
            __IOM uint8_t P205PFS_BY;           /*!< (@ 0x00000097) Port 205 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P205PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P206PFS;                   /*!< (@ 0x00000098) Port 206 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P206PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED92;
          
          union {
            __IOM uint16_t P206PFS_HA;          /*!< (@ 0x0000009A) Port 206 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P206PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED93;
          __IM  uint8_t RESERVED94;
          
          union {
            __IOM uint8_t P206PFS_BY;           /*!< (@ 0x0000009B) Port 206 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P206PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P207PFS;                   /*!< (@ 0x0000009C) Port 207 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P207PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED95;
          
          union {
            __IOM uint16_t P207PFS_HA;          /*!< (@ 0x0000009E) Port 207 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P207PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED96;
          __IM  uint8_t RESERVED97;
          
          union {
            __IOM uint8_t P207PFS_BY;           /*!< (@ 0x0000009F) Port 207 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P207PFS_BY_b;
          } ;
        };
      };
    };
  };
  __IM  uint32_t  RESERVED98[8];
  
  union {
    union {
      __IOM uint32_t P300PFS;                   /*!< (@ 0x000000C0) Port 300 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P300PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED99;
          
          union {
            __IOM uint16_t P300PFS_HA;          /*!< (@ 0x000000C2) Port 300 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P300PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED100;
          __IM  uint8_t RESERVED101;
          
          union {
            __IOM uint8_t P300PFS_BY;           /*!< (@ 0x000000C3) Port 300 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P300PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P301PFS;                   /*!< (@ 0x000000C4) Port 301 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P301PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED102;
          
          union {
            __IOM uint16_t P301PFS_HA;          /*!< (@ 0x000000C6) Port 301 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P301PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED103;
          __IM  uint8_t RESERVED104;
          
          union {
            __IOM uint8_t P301PFS_BY;           /*!< (@ 0x000000C7) Port 301 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P301PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P302PFS;                   /*!< (@ 0x000000C8) Port 302 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P302PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED105;
          
          union {
            __IOM uint16_t P302PFS_HA;          /*!< (@ 0x000000CA) Port 302 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P302PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED106;
          __IM  uint8_t RESERVED107;
          
          union {
            __IOM uint8_t P302PFS_BY;           /*!< (@ 0x000000CB) Port 302 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P302PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P303PFS;                   /*!< (@ 0x000000CC) Port 303 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P303PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED108;
          
          union {
            __IOM uint16_t P303PFS_HA;          /*!< (@ 0x000000CE) Port 303 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P303PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED109;
          __IM  uint8_t RESERVED110;
          
          union {
            __IOM uint8_t P303PFS_BY;           /*!< (@ 0x000000CF) Port 303 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P303PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P304PFS;                   /*!< (@ 0x000000D0) Port 304 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P304PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED111;
          
          union {
            __IOM uint16_t P304PFS_HA;          /*!< (@ 0x000000D2) Port 304 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P304PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED112;
          __IM  uint8_t RESERVED113;
          
          union {
            __IOM uint8_t P304PFS_BY;           /*!< (@ 0x000000D3) Port 304 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P304PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P305PFS;                   /*!< (@ 0x000000D4) Port 305 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P305PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED114;
          
          union {
            __IOM uint16_t P305PFS_HA;          /*!< (@ 0x000000D6) Port 305 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P305PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED115;
          __IM  uint8_t RESERVED116;
          
          union {
            __IOM uint8_t P305PFS_BY;           /*!< (@ 0x000000D7) Port 305 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P305PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P306PFS;                   /*!< (@ 0x000000D8) Port 306 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P306PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED117;
          
          union {
            __IOM uint16_t P306PFS_HA;          /*!< (@ 0x000000DA) Port 306 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P306PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED118;
          __IM  uint8_t RESERVED119;
          
          union {
            __IOM uint8_t P306PFS_BY;           /*!< (@ 0x000000DB) Port 306 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P306PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P307PFS;                   /*!< (@ 0x000000DC) Port 307 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P307PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED120;
          
          union {
            __IOM uint16_t P307PFS_HA;          /*!< (@ 0x000000DE) Port 307 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P307PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED121;
          __IM  uint8_t RESERVED122;
          
          union {
            __IOM uint8_t P307PFS_BY;           /*!< (@ 0x000000DF) Port 307 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P307PFS_BY_b;
          } ;
        };
      };
    };
  };
  __IM  uint32_t  RESERVED123[8];
  
  union {
    union {
      __IOM uint32_t P400PFS;                   /*!< (@ 0x00000100) Port 400 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P400PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED124;
          
          union {
            __IOM uint16_t P400PFS_HA;          /*!< (@ 0x00000102) Port 400 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P400PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED125;
          __IM  uint8_t RESERVED126;
          
          union {
            __IOM uint8_t P400PFS_BY;           /*!< (@ 0x00000103) Port 400 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P400PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P401PFS;                   /*!< (@ 0x00000104) Port 401 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P401PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED127;
          
          union {
            __IOM uint16_t P401PFS_HA;          /*!< (@ 0x00000106) Port 401 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P401PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED128;
          __IM  uint8_t RESERVED129;
          
          union {
            __IOM uint8_t P401PFS_BY;           /*!< (@ 0x00000107) Port 401 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P401PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P402PFS;                   /*!< (@ 0x00000108) Port 402 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P402PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED130;
          
          union {
            __IOM uint16_t P402PFS_HA;          /*!< (@ 0x0000010A) Port 402 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P402PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED131;
          __IM  uint8_t RESERVED132;
          
          union {
            __IOM uint8_t P402PFS_BY;           /*!< (@ 0x0000010B) Port 402 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P402PFS_BY_b;
          } ;
        };
      };
    };
  };
  
  union {
    union {
      __IOM uint32_t P403PFS;                   /*!< (@ 0x0000010C) Port 403 Pin Function Select Register                      */
      
      struct {
        __IOM uint32_t PODR     : 1;            /*!< [0..0] Port Output Data                                                   */
        __IM  uint32_t PIDR     : 1;            /*!< [1..1] Pmn State                                                          */
        __IOM uint32_t PDR      : 1;            /*!< [2..2] Port Direction                                                     */
              uint32_t          : 1;
        __IOM uint32_t PCR      : 1;            /*!< [4..4] Pull-up Control                                                    */
              uint32_t          : 1;
        __IOM uint32_t NCODR    : 1;            /*!< [6..6] N-Channel Open-Drain Control                                       */
              uint32_t          : 3;
        __IOM uint32_t DSCR     : 2;            /*!< [11..10] Port Output Current Control                                      */
        __IOM uint32_t EOFR     : 2;            /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
        __IOM uint32_t ISEL     : 1;            /*!< [14..14] IRQ Input Enable                                                 */
        __IOM uint32_t ASEL     : 1;            /*!< [15..15] Analog Input Enable                                              */
        __IOM uint32_t PMR      : 1;            /*!< [16..16] Port Mode Control                                                */
              uint32_t          : 7;
        __IOM uint32_t PSEL     : 5;            /*!< [28..24] Peripheral Select                                                */
              uint32_t          : 3;
      } P403PFS_b;
    } ;
    
    struct {
      union {
        struct {
          __IM  uint16_t RESERVED133;
          
          union {
            __IOM uint16_t P403PFS_HA;          /*!< (@ 0x0000010E) Port 403 Pin Function Select Register                      */
            
            struct {
              __IOM uint16_t PODR : 1;          /*!< [0..0] Port Output Data                                                   */
              __IM  uint16_t PIDR : 1;          /*!< [1..1] Pmn State                                                          */
              __IOM uint16_t PDR : 1;           /*!< [2..2] Port Direction                                                     */
                    uint16_t    : 1;
              __IOM uint16_t PCR : 1;           /*!< [4..4] Pull-up Control                                                    */
                    uint16_t    : 1;
              __IOM uint16_t NCODR : 1;         /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint16_t    : 3;
              __IOM uint16_t DSCR : 2;          /*!< [11..10] Port Output Current Control                                      */
              __IOM uint16_t EOFR : 2;          /*!< [13..12] Event on Falling (EOF)/Event on Rising (EOR)                     */
              __IOM uint16_t ISEL : 1;          /*!< [14..14] IRQ Input Enable                                                 */
              __IOM uint16_t ASEL : 1;          /*!< [15..15] Analog Input Enable                                              */
            } P403PFS_HA_b;
          } ;
        };
        
        struct {
          __IM  uint16_t RESERVED134;
          __IM  uint8_t RESERVED135;
          
          union {
            __IOM uint8_t P403PFS_BY;           /*!< (@ 0x0000010F) Port 403 Pin Function Select Register                      */
            
            struct {
              __IOM uint8_t PODR : 1;           /*!< [0..0] Port Output Data                                                   */
              __IM  uint8_t PIDR : 1;           /*!< [1..1] Pmn State                                                          */
              __IOM uint8_t PDR : 1;            /*!< [2..2] Port Direction                                                     */
                    uint8_t     : 1;
              __IOM uint8_t PCR : 1;            /*!< [4..4] Pull-up Control                                                    */
                    uint8_t     : 1;
              __IOM uint8_t NCODR : 1;          /*!< [6..6] N-Channel Open-Drain Control                                       */
                    uint8_t     : 1;
            } P403PFS_BY_b;
          } ;
        };
      };
    };
  };
  __IM  uint32_t  RESERVED136[252];
  __IM  uint16_t  RESERVED137;
  __IM  uint8_t   RESERVED138;
  
  union {
    __IOM uint8_t PWPR;                         /*!< (@ 0x00000503) Write-Protect Register                                     */
    
    struct {
            uint8_t             : 6;
      __IOM uint8_t PFSWE       : 1;            /*!< [6..6] PmnPFS Register Write Enable                                       */
      __IOM uint8_t B0WI        : 1;            /*!< [7..7] PFSWE Bit Write Disable                                            */
    } PWPR_b;
  } ;
  __IM  uint32_t  RESERVED139[2];
  __IM  uint16_t  RESERVED140;
  __IM  uint8_t   RESERVED141;
  
  union {
    __OM  uint8_t PRWCNTR;                      /*!< (@ 0x0000050F) Port Read Wait Control Register                            */
    
    struct {
      __OM  uint8_t WAIT        : 2;            /*!< [1..0] Wait Cycle Control                                                 */
            uint8_t             : 6;
    } PRWCNTR_b;
  } ;
} R_PFS_Type;                                   /*!< Size = 1296 (0x510)                                                       */



/* =========================================================================================================================== */
/* ================                                            ELC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Event Link Controller (ELC)
  */

typedef struct {                                /*!< (@ 0x40041000) ELC Structure                                              */
  
  union {
    __IOM uint8_t ELCR;                         /*!< (@ 0x00000000) Event Link Controller Register                             */
    
    struct {
            uint8_t             : 7;
      __IOM uint8_t ELCON       : 1;            /*!< [7..7] All Event Link Enable                                              */
    } ELCR_b;
  } ;
  __IM  uint8_t   RESERVED;
  
  union {
    __IOM uint8_t ELSEGR0;                      /*!< (@ 0x00000002) Event Link Software Event Generation Register
                                                                    0                                                          */
    
    struct {
      __OM  uint8_t SEG         : 1;            /*!< [0..0] Software Event Generation                                          */
            uint8_t             : 5;
      __IOM uint8_t WE          : 1;            /*!< [6..6] SEG Bit Write Enable                                               */
      __OM  uint8_t WI          : 1;            /*!< [7..7] ELSEGR Register Write Disable                                      */
    } ELSEGR0_b;
  } ;
  __IM  uint8_t   RESERVED1;
  
  union {
    __IOM uint8_t ELSEGR1;                      /*!< (@ 0x00000004) Event Link Software Event Generation Register
                                                                    1                                                          */
    
    struct {
      __OM  uint8_t SEG         : 1;            /*!< [0..0] Software Event Generation                                          */
            uint8_t             : 5;
      __IOM uint8_t WE          : 1;            /*!< [6..6] SEG Bit Write Enable                                               */
      __OM  uint8_t WI          : 1;            /*!< [7..7] ELSEGR Register Write Disable                                      */
    } ELSEGR1_b;
  } ;
  __IM  uint8_t   RESERVED2;
  __IM  uint16_t  RESERVED3[21];
  
  union {
    __IOM uint16_t ELSR8;                       /*!< (@ 0x00000030) Event Link Setting Register 8                              */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR8_b;
  } ;
  __IM  uint16_t  RESERVED4[11];
  
  union {
    __IOM uint16_t ELSR14;                      /*!< (@ 0x00000048) Event Link Setting Register 14                             */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR14_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t ELSR15;                      /*!< (@ 0x0000004C) Event Link Setting Register 15                             */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR15_b;
  } ;
  __IM  uint16_t  RESERVED6[7];
  
  union {
    __IOM uint16_t ELSR19;                      /*!< (@ 0x0000005C) Event Link Setting Register 19                             */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR19_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t ELSR20;                      /*!< (@ 0x00000060) Event Link Setting Register 20                             */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR20_b;
  } ;
  __IM  uint16_t  RESERVED8[5];
  
  union {
    __IOM uint16_t ELSR23;                      /*!< (@ 0x0000006C) Event Link Setting Register 23                             */
    
    struct {
      __IOM uint16_t ELS        : 8;            /*!< [7..0] Event Link Select                                                  */
            uint16_t            : 8;
    } ELSR23_b;
  } ;
} R_ELC_Type;                                   /*!< Size = 110 (0x6e)                                                         */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40044200) WDT Structure                                              */
  __IOM uint8_t   WDTRR;                        /*!< (@ 0x00000000) WDT Refresh Register                                       */
  __IM  uint8_t   RESERVED;
  
  union {
    __IOM uint16_t WDTCR;                       /*!< (@ 0x00000002) WDT Control Register                                       */
    
    struct {
      __IOM uint16_t TOPS       : 2;            /*!< [1..0] Timeout Period Select                                              */
            uint16_t            : 2;
      __IOM uint16_t CKS        : 4;            /*!< [7..4] Clock Division Ratio Select                                        */
      __IOM uint16_t RPES       : 2;            /*!< [9..8] Window End Position Select                                         */
            uint16_t            : 2;
      __IOM uint16_t RPSS       : 2;            /*!< [13..12] Window Start Position Select                                     */
            uint16_t            : 2;
    } WDTCR_b;
  } ;
  
  union {
    __IOM uint16_t WDTSR;                       /*!< (@ 0x00000004) WDT Status Register                                        */
    
    struct {
      __IM  uint16_t CNTVAL     : 14;           /*!< [13..0] Down-Counter Value                                                */
      __IOM uint16_t UNDFF      : 1;            /*!< [14..14] Underflow Flag                                                   */
      __IOM uint16_t REFEF      : 1;            /*!< [15..15] Refresh Error Flag                                               */
    } WDTSR_b;
  } ;
  
  union {
    __IOM uint8_t WDTRCR;                       /*!< (@ 0x00000006) WDT Reset Control Register                                 */
    
    struct {
            uint8_t             : 7;
      __IOM uint8_t RSTIRQS     : 1;            /*!< [7..7] WDT Behavior Selection                                             */
    } WDTRCR_b;
  } ;
  __IM  uint8_t   RESERVED1;
  
  union {
    __IOM uint8_t WDTCSTPR;                     /*!< (@ 0x00000008) WDT Count Stop Control Register                            */
    
    struct {
            uint8_t             : 7;
      __IOM uint8_t SLCSTP      : 1;            /*!< [7..7] Sleep Mode Count Stop Control Register                             */
    } WDTCSTPR_b;
  } ;
  __IM  uint8_t   RESERVED2;
  __IM  uint16_t  RESERVED3;
} R_WDT_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           IWDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent Watchdog Timer (IWDT)
  */

typedef struct {                                /*!< (@ 0x40044400) IWDT Structure                                             */
  __IOM uint8_t   IWDTRR;                       /*!< (@ 0x00000000) IWDT Refresh Register                                      */
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t IWDTSR;                      /*!< (@ 0x00000004) IWDT Status Register                                       */
    
    struct {
      __IM  uint16_t CNTVAL     : 14;           /*!< [13..0] Down-counter Value                                                */
      __IOM uint16_t UNDFF      : 1;            /*!< [14..14] Underflow Flag                                                   */
      __IOM uint16_t REFEF      : 1;            /*!< [15..15] Refresh Error Flag                                               */
    } IWDTSR_b;
  } ;
} R_IWDT_Type;                                  /*!< Size = 6 (0x6)                                                            */



/* =========================================================================================================================== */
/* ================                                            CAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock Frequency Accuracy Measurement Circuit (CAC)
  */

typedef struct {                                /*!< (@ 0x40044600) CAC Structure                                              */
  
  union {
    __IOM uint8_t CACR0;                        /*!< (@ 0x00000000) CAC Control Register 0                                     */
    
    struct {
      __IOM uint8_t CFME        : 1;            /*!< [0..0] Clock Frequency Measurement Enable                                 */
            uint8_t             : 7;
    } CACR0_b;
  } ;
  
  union {
    __IOM uint8_t CACR1;                        /*!< (@ 0x00000001) CAC Control Register 1                                     */
    
    struct {
      __IOM uint8_t CACREFE     : 1;            /*!< [0..0] CACREF Pin Input Enable                                            */
      __IOM uint8_t FMCS        : 3;            /*!< [3..1] Measurement Target Clock Select                                    */
      __IOM uint8_t TCSS        : 2;            /*!< [5..4] Timer Count Clock Source Select                                    */
      __IOM uint8_t EDGES       : 2;            /*!< [7..6] Valid Edge Select                                                  */
    } CACR1_b;
  } ;
  
  union {
    __IOM uint8_t CACR2;                        /*!< (@ 0x00000002) CAC Control Register 2                                     */
    
    struct {
      __IOM uint8_t RPS         : 1;            /*!< [0..0] Reference Signal Select                                            */
      __IOM uint8_t RSCS        : 3;            /*!< [3..1] Measurement Reference Clock Select                                 */
      __IOM uint8_t RCDS        : 2;            /*!< [5..4] Measurement Reference Clock Frequency Division Ratio
                                                     Select                                                                    */
      __IOM uint8_t DFS         : 2;            /*!< [7..6] Digital Filter Select                                              */
    } CACR2_b;
  } ;
  
  union {
    __IOM uint8_t CAICR;                        /*!< (@ 0x00000003) CAC Interrupt Control Register                             */
    
    struct {
      __IOM uint8_t FERRIE      : 1;            /*!< [0..0] Frequency Error Interrupt Request Enable                           */
      __IOM uint8_t MENDIE      : 1;            /*!< [1..1] Measurement End Interrupt Request Enable                           */
      __IOM uint8_t OVFIE       : 1;            /*!< [2..2] Overflow Interrupt Request Enable                                  */
            uint8_t             : 1;
      __OM  uint8_t FERRFCL     : 1;            /*!< [4..4] FERRF Clear                                                        */
      __OM  uint8_t MENDFCL     : 1;            /*!< [5..5] MENDF Clear                                                        */
      __OM  uint8_t OVFFCL      : 1;            /*!< [6..6] OVFF Clear                                                         */
            uint8_t             : 1;
    } CAICR_b;
  } ;
  
  union {
    __IM  uint8_t CASTR;                        /*!< (@ 0x00000004) CAC Status Register                                        */
    
    struct {
      __IM  uint8_t FERRF       : 1;            /*!< [0..0] Frequency Error Flag                                               */
      __IM  uint8_t MENDF       : 1;            /*!< [1..1] Measurement End Flag                                               */
      __IM  uint8_t OVFF        : 1;            /*!< [2..2] Overflow Flag                                                      */
            uint8_t             : 5;
    } CASTR_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IOM uint16_t  CAULVR;                       /*!< (@ 0x00000006) CAC Upper-Limit Value Setting Register                     */
  __IOM uint16_t  CALLVR;                       /*!< (@ 0x00000008) CAC Lower-Limit Value Setting Register                     */
  __IM  uint16_t  CACNTBR;                      /*!< (@ 0x0000000A) CAC Counter Buffer Register                                */
} R_CAC_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           MSTP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Module Stop Control B, C, D (MSTP)
  */

typedef struct {                                /*!< (@ 0x40047000) MSTP Structure                                             */
  
  union {
    __IOM uint32_t MSTPCRB;                     /*!< (@ 0x00000000) Module Stop Control Register B                             */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t MSTPB8     : 1;            /*!< [8..8] I2C Bus Interface 1 Module Stop                                    */
      __IOM uint32_t MSTPB9     : 1;            /*!< [9..9] I2C Bus Interface 0 Module Stop                                    */
            uint32_t            : 7;
      __IOM uint32_t MSTPB17    : 1;            /*!< [17..17] Serial Interface UARTA0/UARTA1 Module Stop                       */
            uint32_t            : 2;
      __IOM uint32_t MSTPB20    : 1;            /*!< [20..20] Serial Array Unit 1 Module Stop                                  */
      __IOM uint32_t MSTPB21    : 1;            /*!< [21..21] Serial Array Unit 0 Module Stop                                  */
            uint32_t            : 10;
    } MSTPCRB_b;
  } ;
  
  union {
    __IOM uint32_t MSTPCRC;                     /*!< (@ 0x00000004) Module Stop Control Register C                             */
    
    struct {
      __IOM uint32_t MSTPC0     : 1;            /*!< [0..0] Clock Frequency Accuracy Measurement Circuit Module Stop           */
      __IOM uint32_t MSTPC1     : 1;            /*!< [1..1] Cyclic Redundancy Check Calculator Module Stop                     */
            uint32_t            : 11;
      __IOM uint32_t MSTPC13    : 1;            /*!< [13..13] Data Operation Circuit Module Stop                               */
      __IOM uint32_t MSTPC14    : 1;            /*!< [14..14] Event Link Controller Module Stop                                */
            uint32_t            : 4;
      __IOM uint32_t MSTPC19    : 1;            /*!< [19..19] Remote Control Signal Receiver Module Stop                       */
            uint32_t            : 2;
      __IOM uint32_t MSTPC22    : 1;            /*!< [22..22] 8-bit D/A Converter Module Stop                                  */
            uint32_t            : 5;
      __IOM uint32_t MSTPC28    : 1;            /*!< [28..28] True Random Number Generator Module Stop                         */
            uint32_t            : 3;
    } MSTPCRC_b;
  } ;
  
  union {
    __IOM uint32_t MSTPCRD;                     /*!< (@ 0x00000008) Module Stop Control Register D                             */
    
    struct {
            uint32_t            : 9;
      __IOM uint32_t MSTPD9     : 1;            /*!< [9..9] 32-bit Interval Timer Module Stop                                  */
      __IOM uint32_t MSTPD10    : 1;            /*!< [10..10] Timer Array Unit Module Stop                                     */
            uint32_t            : 5;
      __IOM uint32_t MSTPD16    : 1;            /*!< [16..16] 12-bit A/D Converter Module Stop                                 */
            uint32_t            : 3;
      __IOM uint32_t MSTPD20    : 1;            /*!< [20..20] 8-bit D/A Converter Module Stop                                  */
            uint32_t            : 7;
      __IOM uint32_t MSTPD28    : 1;            /*!< [28..28] Comparator Module Stop                                           */
            uint32_t            : 3;
    } MSTPCRD_b;
  } ;
  
  union {
    __IOM uint16_t LSMRWDIS;                    /*!< (@ 0x0000000C) Low Speed Module R/W Disable Control Register              */
    
    struct {
      __IOM uint16_t RTCRWDIS   : 1;            /*!< [0..0] RTC Register R/W Enable Control                                    */
      __IOM uint16_t WDTDIS     : 1;            /*!< [1..1] WDT Operate Clock Control                                          */
      __IOM uint16_t IWDTDIS    : 1;            /*!< [2..2] IWDT Register Clock Control                                        */
            uint16_t            : 4;
      __IOM uint16_t WREN       : 1;            /*!< [7..7] Write Enable for bits [2:0]                                        */
      __OM  uint16_t PRKEY      : 8;            /*!< [15..8] LSMRWDIS Key Code                                                 */
    } LSMRWDIS_b;
  } ;
  __IM  uint16_t  RESERVED;
} R_MSTP_Type;                                  /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DAC8                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief 8-bit D/A converter (DAC8)
  */

typedef struct {                                /*!< (@ 0x4005E000) DAC8 Structure                                             */
  __IOM uint16_t  DADR0;                        /*!< (@ 0x00000000) D/A Data Register 0                                        */
  __IOM uint16_t  DADR1;                        /*!< (@ 0x00000002) D/A Data Register 1                                        */
  
  union {
    __IOM uint8_t DACR;                         /*!< (@ 0x00000004) D/A Control Register                                       */
    
    struct {
            uint8_t             : 6;
      __IOM uint8_t DAOE0       : 1;            /*!< [6..6] D/A Output Enable 0                                                */
      __IOM uint8_t DAOE1       : 1;            /*!< [7..7] D/A Output Enable 1                                                */
    } DACR_b;
  } ;
  
  union {
    __IOM uint8_t DADPR;                        /*!< (@ 0x00000005) DADRn Format Select Register                               */
    
    struct {
            uint8_t             : 7;
      __IOM uint8_t DPSEL       : 1;            /*!< [7..7] DADRn Format Select                                                */
    } DADPR_b;
  } ;
  __IM  uint16_t  RESERVED[893];
  
  union {
    __IOM uint16_t DAEXOUT;                     /*!< (@ 0x00000700) D/A External Output Enable Register                        */
    
    struct {
            uint16_t            : 6;
      __IOM uint16_t DAEXO0     : 1;            /*!< [6..6] D/A External Pin Output Enable 0                                   */
      __IOM uint16_t DAEXO1     : 1;            /*!< [7..7] D/A External Pin Output Enable 1                                   */
            uint16_t            : 8;
    } DAEXOUT_b;
  } ;
} R_DAC8_Type;                                  /*!< Size = 1794 (0x702)                                                       */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cyclic Redundancy Check Calculator (CRC)
  */

typedef struct {                                /*!< (@ 0x40074000) CRC Structure                                              */
  
  union {
    __IOM uint8_t CRCCR0;                       /*!< (@ 0x00000000) CRC Control Register 0                                     */
    
    struct {
      __IOM uint8_t GPS         : 3;            /*!< [2..0] CRC Generating Polynomial Switching                                */
            uint8_t             : 3;
      __IOM uint8_t LMS         : 1;            /*!< [6..6] CRC Calculation Switching                                          */
      __OM  uint8_t DORCLR      : 1;            /*!< [7..7] CRCDOR/CRCDOR_HA/CRCDOR_BY Register Clear                          */
    } CRCCR0_b;
  } ;
  
  union {
    __IOM uint8_t CRCCR1;                       /*!< (@ 0x00000001) CRC Control Register 1                                     */
    
    struct {
            uint8_t             : 6;
      __IOM uint8_t CRCSWR      : 1;            /*!< [6..6] Snoop-On-Write/Read Switch                                         */
      __IOM uint8_t CRCSEN      : 1;            /*!< [7..7] Snoop Enable                                                       */
    } CRCCR1_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint32_t CRCDIR;                      /*!< (@ 0x00000004) CRC Data Input Register                                    */
    __IOM uint8_t CRCDIR_BY;                    /*!< (@ 0x00000004) CRC Data Input Register                                    */
  };
  
  union {
    __IOM uint32_t CRCDOR;                      /*!< (@ 0x00000008) CRC Data Output Register                                   */
    __IOM uint16_t CRCDOR_HA;                   /*!< (@ 0x00000008) CRC Data Output Register                                   */
    __IOM uint8_t CRCDOR_BY;                    /*!< (@ 0x00000008) CRC Data Output Register                                   */
  };
  
  union {
    __IOM uint16_t CRCSAR;                      /*!< (@ 0x0000000C) Snoop Address Register                                     */
    
    struct {
      __IOM uint16_t CRCSA      : 14;           /*!< [13..0] Register Snoop Address                                            */
            uint16_t            : 2;
    } CRCSAR_b;
  } ;
  __IM  uint16_t  RESERVED1;
} R_CRC_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           KINT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Key Interrupt Function (KINT)
  */

typedef struct {                                /*!< (@ 0x40080000) KINT Structure                                             */
  
  union {
    __IOM uint8_t KRCTL;                        /*!< (@ 0x00000000) Key Return Control Register                                */
    
    struct {
      __IOM uint8_t KREG        : 1;            /*!< [0..0] Detection Edge Selection (KR00 to KR05 pins)                       */
            uint8_t             : 6;
      __IOM uint8_t KRMD        : 1;            /*!< [7..7] Usage of Key Interrupt Flags (KRF.KIF0 to KRF.KIF5)                */
    } KRCTL_b;
  } ;
  __IM  uint8_t   RESERVED[3];
  
  union {
    __IOM uint8_t KRF;                          /*!< (@ 0x00000004) Key Return Flag Register                                   */
    
    struct {
      __IOM uint8_t KIF0        : 1;            /*!< [0..0] Key Interrupt Flag n                                               */
      __IOM uint8_t KIF1        : 1;            /*!< [1..1] Key Interrupt Flag n                                               */
      __IOM uint8_t KIF2        : 1;            /*!< [2..2] Key Interrupt Flag n                                               */
      __IOM uint8_t KIF3        : 1;            /*!< [3..3] Key Interrupt Flag n                                               */
      __IOM uint8_t KIF4        : 1;            /*!< [4..4] Key Interrupt Flag n                                               */
      __IOM uint8_t KIF5        : 1;            /*!< [5..5] Key Interrupt Flag n                                               */
            uint8_t             : 2;
    } KRF_b;
  } ;
  __IM  uint8_t   RESERVED1[3];
  
  union {
    __IOM uint8_t KRM;                          /*!< (@ 0x00000008) Key Return Mode Register                                   */
    
    struct {
      __IOM uint8_t KIMC0       : 1;            /*!< [0..0] Key Interrupt Mode Control n                                       */
      __IOM uint8_t KIMC1       : 1;            /*!< [1..1] Key Interrupt Mode Control n                                       */
      __IOM uint8_t KIMC2       : 1;            /*!< [2..2] Key Interrupt Mode Control n                                       */
      __IOM uint8_t KIMC3       : 1;            /*!< [3..3] Key Interrupt Mode Control n                                       */
      __IOM uint8_t KIMC4       : 1;            /*!< [4..4] Key Interrupt Mode Control n                                       */
      __IOM uint8_t KIMC5       : 1;            /*!< [5..5] Key Interrupt Mode Control n                                       */
            uint8_t             : 2;
    } KRM_b;
  } ;
} R_KINT_Type;                                  /*!< Size = 9 (0x9)                                                            */



/* =========================================================================================================================== */
/* ================                                            DOC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Data Operation Circuit (DOC)
  */

typedef struct {                                /*!< (@ 0x40085F00) DOC Structure                                              */
  
  union {
    __IOM uint8_t DOCR;                         /*!< (@ 0x00000000) DOC Control Register                                       */
    
    struct {
      __IOM uint8_t OMS         : 2;            /*!< [1..0] Operating Mode Select                                              */
            uint8_t             : 1;
      __IOM uint8_t DOBW        : 1;            /*!< [3..3] Data Operation Bit Width Select                                    */
      __IOM uint8_t DCSEL       : 3;            /*!< [6..4] Detection Condition Select                                         */
            uint8_t             : 1;
    } DOCR_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IM  uint8_t DOSR;                         /*!< (@ 0x00000004) DOC Flag Status Register                                   */
    
    struct {
      __IM  uint8_t DOPCF       : 1;            /*!< [0..0] Data Operation Circuit Flag                                        */
            uint8_t             : 7;
    } DOSR_b;
  } ;
  __IM  uint8_t   RESERVED2;
  __IM  uint16_t  RESERVED3;
  
  union {
    __OM  uint8_t DOSCR;                        /*!< (@ 0x00000008) DOC Flag Status Clear Register                             */
    
    struct {
      __OM  uint8_t DOPCFCL     : 1;            /*!< [0..0] DOPCF Clear                                                        */
            uint8_t             : 7;
    } DOSCR_b;
  } ;
  __IM  uint8_t   RESERVED4;
  __IM  uint16_t  RESERVED5;
  __IOM uint32_t  DODIR;                        /*!< (@ 0x0000000C) DOC Data Input Register                                    */
  __IOM uint32_t  DODSR0;                       /*!< (@ 0x00000010) DOC Data Setting Register 0                                */
  __IOM uint32_t  DODSR1;                       /*!< (@ 0x00000014) DOC Data Setting Register 1                                */
} R_DOC_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           PORGA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Product Organize Register (PORGA)
  */

typedef struct {                                /*!< (@ 0x40091000) PORGA Structure                                            */
  
  union {
    __IOM uint8_t SNFEN;                        /*!< (@ 0x00000000) SAU Noise Filter Enable Register                           */
    
    struct {
      __IOM uint8_t SNFEN00     : 1;            /*!< [0..0] Use of noise filter of RxD0 pin                                    */
            uint8_t             : 1;
      __IOM uint8_t SNFEN10     : 1;            /*!< [2..2] Use of noise filter of RxD1 pin                                    */
            uint8_t             : 1;
      __IOM uint8_t SNFEN20     : 1;            /*!< [4..4] Use of noise filter of RxD2 pin                                    */
            uint8_t             : 3;
    } SNFEN_b;
  } ;
  
  union {
    __IOM uint8_t TNFEN;                        /*!< (@ 0x00000001) TAU Noise Filter Enable Register                           */
    
    struct {
      __IOM uint8_t TNFEN00     : 1;            /*!< [0..0] Enabling or disabling use of the noise filter for the
                                                     TI00 pin                                                                  */
      __IOM uint8_t TNFEN01     : 1;            /*!< [1..1] Enabling or disabling use of the noise filter for the
                                                     TI01 pin                                                                  */
      __IOM uint8_t TNFEN02     : 1;            /*!< [2..2] Enabling or disabling use of the noise filter for the
                                                     TI02 pin                                                                  */
      __IOM uint8_t TNFEN03     : 1;            /*!< [3..3] Enabling or disabling use of the noise filter for the
                                                     TI03 pin                                                                  */
      __IOM uint8_t TNFEN04     : 1;            /*!< [4..4] Enabling or disabling use of the noise filter for the
                                                     TI04 pin                                                                  */
      __IOM uint8_t TNFEN05     : 1;            /*!< [5..5] Enabling or disabling use of the noise filter for the
                                                     TI05 pin                                                                  */
      __IOM uint8_t TNFEN06     : 1;            /*!< [6..6] Enabling or disabling use of the noise filter for the
                                                     TI06 pin                                                                  */
      __IOM uint8_t TNFEN07     : 1;            /*!< [7..7] Enabling or disabling use of the noise filter for the
                                                     TI07 pin                                                                  */
    } TNFEN_b;
  } ;
  __IM  uint8_t   RESERVED;
  
  union {
    __IOM uint8_t ISC;                          /*!< (@ 0x00000003) Input Switch Control Register                              */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t ISC1        : 1;            /*!< [1..1] Switching channel 7 input of timer array unit                      */
            uint8_t             : 1;
      __IOM uint8_t ISC43       : 2;            /*!< [4..3] Switch of the serial clock input source of SPI00                   */
            uint8_t             : 1;
      __IOM uint8_t ISC76       : 2;            /*!< [7..6] Switch of the serial clock input source of SPI01                   */
    } ISC_b;
  } ;
  
  union {
    __IOM uint8_t TIS0;                         /*!< (@ 0x00000004) Timer Input Select Register 0                              */
    
    struct {
      __IOM uint8_t TIS         : 3;            /*!< [2..0] Selection of timer input used with channel 5                       */
            uint8_t             : 5;
    } TIS0_b;
  } ;
  __IM  uint8_t   RESERVED1[4];
  
  union {
    __IOM uint8_t ULBS;                         /*!< (@ 0x00000009) UART Loopback Select Register                              */
    
    struct {
      __IOM uint8_t ULBS0       : 1;            /*!< [0..0] Selection of the UART0 loopback function                           */
      __IOM uint8_t ULBS1       : 1;            /*!< [1..1] Selection of the UART1 loopback function                           */
      __IOM uint8_t ULBS2       : 1;            /*!< [2..2] Selection of the UART2 loopback function                           */
            uint8_t             : 1;
      __IOM uint8_t ULBS4       : 1;            /*!< [4..4] Selection of the UARTA0 loopback function                          */
      __IOM uint8_t ULBS5       : 1;            /*!< [5..5] Selection of the UARTA1 loopback function                          */
            uint8_t             : 2;
    } ULBS_b;
  } ;
  __IM  uint8_t   RESERVED2[62];
  
  union {
    __IOM uint8_t CCDE;                         /*!< (@ 0x00000048) Output Current Control Enable Register                     */
    
    struct {
      __IOM uint8_t CCDE00      : 1;            /*!< [0..0] CCDE00 (P100) output control function                              */
      __IOM uint8_t CCDE01      : 1;            /*!< [1..1] CCDE01 (P302) output control function                              */
      __IOM uint8_t CCDE02      : 1;            /*!< [2..2] CCDE02 (P303) output control function                              */
            uint8_t             : 5;
    } CCDE_b;
  } ;
  __IM  uint8_t   RESERVED3[56];
  
  union {
    __IOM uint8_t CCTRM;                        /*!< (@ 0x00000081) Output Current Control Trimming Register                   */
    
    struct {
      __IOM uint8_t IADJ        : 4;            /*!< [3..0] Output current control trimming                                    */
            uint8_t             : 4;
    } CCTRM_b;
  } ;
} R_PORGA_Type;                                 /*!< Size = 130 (0x82)                                                         */



/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief True Random Number Generator (TRNG)
  */

typedef struct {                                /*!< (@ 0x40091100) TRNG Structure                                             */
  __IM  uint8_t   TRNGSDR;                      /*!< (@ 0x00000000) Random Number Seed Data Register                           */
  __IM  uint8_t   RESERVED;
  
  union {
    __IOM uint8_t TRNGSCR0;                     /*!< (@ 0x00000002) Random Number Seed Command Register 0                      */
    
    struct {
            uint8_t             : 2;
      __IOM uint8_t ST          : 1;            /*!< [2..2] Trigger to start generating a random number seed                   */
      __IOM uint8_t EN          : 1;            /*!< [3..3] Control over operation of the true random number generator         */
            uint8_t             : 3;
      __IOM uint8_t RDY         : 1;            /*!< [7..7] Random number seed generation status flag                          */
    } TRNGSCR0_b;
  } ;
  
  union {
    __IOM uint8_t TRNGSCR1;                     /*!< (@ 0x00000003) Random Number Seed Command Register 1                      */
    
    struct {
      __IOM uint8_t INTEN       : 1;            /*!< [0..0] TRNG Interrupt                                                     */
            uint8_t             : 7;
    } TRNGSCR1_b;
  } ;
} R_TRNG_Type;                                  /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                            CMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator (CMP)
  */

typedef struct {                                /*!< (@ 0x40091200) CMP Structure                                              */
  
  union {
    __IOM uint8_t COMPMDR;                      /*!< (@ 0x00000000) Comparator Mode Setting Register                           */
    
    struct {
      __IOM uint8_t C0ENB       : 1;            /*!< [0..0] Comparator 0 operation enable                                      */
      __IOM uint8_t C0LVL       : 1;            /*!< [1..1] Selection of comparator 0 reference voltage range                  */
      __IOM uint8_t C0VRF       : 1;            /*!< [2..2] Selection of comparator 0 reference voltage                        */
      __IM  uint8_t C0MON       : 1;            /*!< [3..3] Comparator 0 monitor flag                                          */
      __IOM uint8_t C1ENB       : 1;            /*!< [4..4] Comparator 1 operation enable                                      */
      __IOM uint8_t C1LVL       : 1;            /*!< [5..5] Selection of comparator 1 reference voltage range                  */
      __IOM uint8_t C1VRF       : 1;            /*!< [6..6] Selection of comparator 1 reference voltage                        */
      __IM  uint8_t C1MON       : 1;            /*!< [7..7] Comparator 1 monitor flag                                          */
    } COMPMDR_b;
  } ;
  
  union {
    __IOM uint8_t COMPFIR;                      /*!< (@ 0x00000001) Comparator Filter Control Register                         */
    
    struct {
      __IOM uint8_t C0FCK       : 2;            /*!< [1..0] Comparator 0 digital filter selection                              */
      __IOM uint8_t C0EPO       : 1;            /*!< [2..2] Comparator 0 edge polarity switching                               */
      __IOM uint8_t C0EDG       : 1;            /*!< [3..3] Comparator 0 edge detection selection                              */
      __IOM uint8_t C1FCK       : 2;            /*!< [5..4] Comparator 1 digital filter selection                              */
      __IOM uint8_t C1EPO       : 1;            /*!< [6..6] Comparator 1 edge polarity switching                               */
      __IOM uint8_t C1EDG       : 1;            /*!< [7..7] Comparator 1 edge detection selection                              */
    } COMPFIR_b;
  } ;
  
  union {
    __IOM uint8_t COMPOCR;                      /*!< (@ 0x00000002) Comparator Output Control Register                         */
    
    struct {
      __IOM uint8_t C0IE        : 1;            /*!< [0..0] Comparator 0 interrupt request enable                              */
      __IOM uint8_t C0OE        : 1;            /*!< [1..1] VCOUT0 pin output enable                                           */
      __IOM uint8_t C0OP        : 1;            /*!< [2..2] VCOUT0 output polarity selection                                   */
            uint8_t             : 1;
      __IOM uint8_t C1IE        : 1;            /*!< [4..4] Comparator 1 interrupt request enable                              */
      __IOM uint8_t C1OE        : 1;            /*!< [5..5] VCOUT1 pin output enable                                           */
      __IOM uint8_t C1OP        : 1;            /*!< [6..6] VCOUT1 output polarity selection                                   */
      __IOM uint8_t SPDMD       : 1;            /*!< [7..7] Comparator speed selection                                         */
    } COMPOCR_b;
  } ;
} R_CMP_Type;                                   /*!< Size = 3 (0x3)                                                            */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real Time Clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40092000) RTC Structure                                              */
  
  union {
    __IOM uint8_t SEC;                          /*!< (@ 0x00000000) Second Count Register                                      */
    
    struct {
      __IOM uint8_t SEC1        : 4;            /*!< [3..0] 1-second count                                                     */
      __IOM uint8_t SEC10       : 3;            /*!< [6..4] 10-second count                                                    */
            uint8_t             : 1;
    } SEC_b;
  } ;
  
  union {
    __IOM uint8_t MIN;                          /*!< (@ 0x00000001) Minute Count Register                                      */
    
    struct {
      __IOM uint8_t MIN1        : 4;            /*!< [3..0] 1-minute count                                                     */
      __IOM uint8_t MIN10       : 3;            /*!< [6..4] 10-minute count                                                    */
            uint8_t             : 1;
    } MIN_b;
  } ;
  
  union {
    __IOM uint8_t HOUR;                         /*!< (@ 0x00000002) Hour Count Register                                        */
    
    struct {
      __IOM uint8_t HOUR1       : 4;            /*!< [3..0] 1-hour count                                                       */
      __IOM uint8_t HOUR10      : 2;            /*!< [5..4] 10-hour count                                                      */
            uint8_t             : 2;
    } HOUR_b;
  } ;
  
  union {
    __IOM uint8_t WEEK;                         /*!< (@ 0x00000003) Day-of-Week Count Register                                 */
    
    struct {
      __IOM uint8_t WEEK        : 3;            /*!< [2..0] Day-of-Week Counting                                               */
            uint8_t             : 5;
    } WEEK_b;
  } ;
  
  union {
    __IOM uint8_t DAY;                          /*!< (@ 0x00000004) Day Count Register                                         */
    
    struct {
      __IOM uint8_t DAY1        : 4;            /*!< [3..0] 1-day count                                                        */
      __IOM uint8_t DAY10       : 2;            /*!< [5..4] 10-day count                                                       */
            uint8_t             : 2;
    } DAY_b;
  } ;
  
  union {
    __IOM uint8_t MONTH;                        /*!< (@ 0x00000005) Month Count Register                                       */
    
    struct {
      __IOM uint8_t MONTH1      : 4;            /*!< [3..0] 1-month count                                                      */
      __IOM uint8_t MONTH10     : 1;            /*!< [4..4] 10-month count                                                     */
            uint8_t             : 3;
    } MONTH_b;
  } ;
  
  union {
    __IOM uint8_t YEAR;                         /*!< (@ 0x00000006) Year Count Register                                        */
    
    struct {
      __IOM uint8_t YEAR1       : 4;            /*!< [3..0] 1-year count                                                       */
      __IOM uint8_t YEAR10      : 4;            /*!< [7..4] 10-year count                                                      */
    } YEAR_b;
  } ;
  
  union {
    __IOM uint8_t SUBCUD;                       /*!< (@ 0x00000007) Time Error Correction Register                             */
    
    struct {
      __IOM uint8_t F           : 6;            /*!< [5..0] Adjustment Value                                                   */
      __IOM uint8_t F6          : 1;            /*!< [6..6] Setting of time error correction value                             */
      __IOM uint8_t DEV         : 1;            /*!< [7..7] Setting of time error correction timing                            */
    } SUBCUD_b;
  } ;
  
  union {
    __IOM uint8_t ALARMWM;                      /*!< (@ 0x00000008) Alarm Minute Register                                      */
    
    struct {
      __IOM uint8_t WM1         : 4;            /*!< [3..0] 1-digit minute setting                                             */
      __IOM uint8_t WM10        : 3;            /*!< [6..4] 10-digit minute setting                                            */
            uint8_t             : 1;
    } ALARMWM_b;
  } ;
  
  union {
    __IOM uint8_t ALARMWH;                      /*!< (@ 0x00000009) Alarm Hour Register                                        */
    
    struct {
      __IOM uint8_t WH1         : 4;            /*!< [3..0] 1-digit hour setting                                               */
      __IOM uint8_t WH10        : 2;            /*!< [5..4] 10-digit hour setting                                              */
            uint8_t             : 2;
    } ALARMWH_b;
  } ;
  
  union {
    __IOM uint8_t ALARMWW;                      /*!< (@ 0x0000000A) Alarm Day-of-Week Register                                 */
    
    struct {
      __IOM uint8_t WW0         : 1;            /*!< [0..0] Alarm enabled setting "Sunday"                                     */
      __IOM uint8_t WW1         : 1;            /*!< [1..1] Alarm enabled setting "Monday"                                     */
      __IOM uint8_t WW2         : 1;            /*!< [2..2] Alarm enabled setting "Tuesday"                                    */
      __IOM uint8_t WW3         : 1;            /*!< [3..3] Alarm enabled setting "Wednesday"                                  */
      __IOM uint8_t WW4         : 1;            /*!< [4..4] Alarm enabled setting "Thursday"                                   */
      __IOM uint8_t WW5         : 1;            /*!< [5..5] Alarm enabled setting "Friday"                                     */
      __IOM uint8_t WW6         : 1;            /*!< [6..6] Alarm enabled setting "Saturday"                                   */
            uint8_t             : 1;
    } ALARMWW_b;
  } ;
  
  union {
    __IOM uint8_t RTCC0;                        /*!< (@ 0x0000000B) Realtime Clock Control Register 0                          */
    
    struct {
      __IOM uint8_t CT          : 3;            /*!< [2..0] Fixed-cycle interrupt (RTC_ALM_OR_PRD) selection                   */
      __IOM uint8_t AMPM        : 1;            /*!< [3..3] Selection of 12- or 24-hour system                                 */
      __IOM uint8_t RTC128EN    : 1;            /*!< [4..4] Selection of the operating clock for the realtime clock
                                                     (RTCSCLK/RTCS128CLK)                                                      */
      __IOM uint8_t RCLOE1      : 1;            /*!< [5..5] RTC1HZ pin output control                                          */
            uint8_t             : 1;
      __IOM uint8_t RTCE        : 1;            /*!< [7..7] Realtime clock operation control                                   */
    } RTCC0_b;
  } ;
  
  union {
    __IOM uint8_t RTCC1;                        /*!< (@ 0x0000000C) Realtime Clock Control Register 1                          */
    
    struct {
      __IOM uint8_t RWAIT       : 1;            /*!< [0..0] Wait control of realtime clock                                     */
      __IM  uint8_t RWST        : 1;            /*!< [1..1] Wait status flag of realtime clock                                 */
            uint8_t             : 1;
      __IOM uint8_t RIFG        : 1;            /*!< [3..3] Fixed-cycle interrupt status flag                                  */
      __IOM uint8_t WAFG        : 1;            /*!< [4..4] Alarm detection status flag                                        */
            uint8_t             : 1;
      __IOM uint8_t WALIE       : 1;            /*!< [6..6] Control of alarm interrupt (RTC_ALM_OR_PRD)                        */
      __IOM uint8_t WALE        : 1;            /*!< [7..7] Alarm operation control                                            */
    } RTCC1_b;
  } ;
} R_RTC_Type;                                   /*!< Size = 13 (0xd)                                                           */



/* =========================================================================================================================== */
/* ================                                           REMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Remote Control Signal Receiver (REMC)
  */

typedef struct {                                /*!< (@ 0x40092100) REMC Structure                                             */
  
  union {
    __IOM uint8_t REMCON0;                      /*!< (@ 0x00000000) Function Select Register 0                                 */
    
    struct {
      __IM  uint8_t ENFLG       : 1;            /*!< [0..0] Remote Control Status Flag                                         */
      __IOM uint8_t INV         : 1;            /*!< [1..1] Input Signal Inversion                                             */
      __IOM uint8_t FIL         : 1;            /*!< [2..2] Digital Filter Enable or Disable Setting                           */
      __IM  uint8_t INFLG       : 1;            /*!< [3..3] Input Signal Flag                                                  */
      __IOM uint8_t EC          : 1;            /*!< [4..4] Receive Error Capture Operation Select                             */
            uint8_t             : 1;
      __IOM uint8_t FILSEL      : 1;            /*!< [6..6] Digital Filter Function Select                                     */
            uint8_t             : 1;
    } REMCON0_b;
  } ;
  
  union {
    __IOM uint8_t REMCON1;                      /*!< (@ 0x00000001) Function Select Register 1                                 */
    
    struct {
      __IOM uint8_t TYP         : 2;            /*!< [1..0] Receive Mode Select                                                */
      __IOM uint8_t EN          : 1;            /*!< [2..2] Remote Control                                                     */
      __IOM uint8_t INTMD       : 1;            /*!< [3..3] Interrupt Mode Select                                              */
            uint8_t             : 1;
      __IOM uint8_t CSRC        : 1;            /*!< [5..5] Operating Clock Select                                             */
            uint8_t             : 2;
    } REMCON1_b;
  } ;
  
  union {
    __IOM uint8_t REMSTS;                       /*!< (@ 0x00000002) Status Register                                            */
    
    struct {
      __IM  uint8_t CPFLG       : 1;            /*!< [0..0] Compare Match Flag                                                 */
      __IM  uint8_t REFLG       : 1;            /*!< [1..1] Receive Error Flag                                                 */
      __IM  uint8_t DRFLG       : 1;            /*!< [2..2] Data Receiving Flag                                                */
      __IOM uint8_t BFULFLG     : 1;            /*!< [3..3] Receive Buffer Full Flag                                           */
      __IM  uint8_t HDFLG       : 1;            /*!< [4..4] Header Pattern Match Flag                                          */
      __IM  uint8_t D0FLG       : 1;            /*!< [5..5] Data 0 Pattern Match Flag                                          */
      __IM  uint8_t D1FLG       : 1;            /*!< [6..6] Data 1 Pattern Match Flag                                          */
      __IM  uint8_t SDFLG       : 1;            /*!< [7..7] Special Data Pattern Match Flag                                    */
    } REMSTS_b;
  } ;
  
  union {
    __IOM uint8_t REMINT;                       /*!< (@ 0x00000003) Interrupt Control Register                                 */
    
    struct {
      __IOM uint8_t CPINT       : 1;            /*!< [0..0] Compare Match Interrupt Enable                                     */
      __IOM uint8_t REINT       : 1;            /*!< [1..1] Receive Error Interrupt Enable                                     */
      __IOM uint8_t DRINT       : 1;            /*!< [2..2] Data Receiving Interrupt Enable                                    */
      __IOM uint8_t BFULINT     : 1;            /*!< [3..3] Receive Buffer Full Interrupt Enable                               */
      __IOM uint8_t HDINT       : 1;            /*!< [4..4] Header Pattern Match Interrupt Enable                              */
      __IOM uint8_t DINT        : 1;            /*!< [5..5] Data 0 Pattern or Data 1 Pattern Match Interrupt Enable            */
            uint8_t             : 1;
      __IOM uint8_t SDINT       : 1;            /*!< [7..7] Special Data Pattern Match Interrupt Enable                        */
    } REMINT_b;
  } ;
  __IM  uint8_t   RESERVED;
  
  union {
    __IOM uint8_t REMCPC;                       /*!< (@ 0x00000005) Compare Control Register                                   */
    
    struct {
      __IOM uint8_t CPN         : 4;            /*!< [3..0] Compare Bit Count Specification                                    */
            uint8_t             : 4;
    } REMCPC_b;
  } ;
  __IOM uint16_t  REMCPD;                       /*!< (@ 0x00000006) Compare Value Setting Register                             */
  
  union {
    __IOM uint16_t HDPMIN;                      /*!< (@ 0x00000008) Header Pattern Minimum Width Setting Register              */
    
    struct {
      __IOM uint16_t HDMIN      : 11;           /*!< [10..0] Set the minimum width of the header pattern                       */
            uint16_t            : 5;
    } HDPMIN_b;
  } ;
  
  union {
    __IOM uint16_t HDPMAX;                      /*!< (@ 0x0000000A) Header Pattern Maximum Width Setting Register              */
    
    struct {
      __IOM uint16_t HDMAX      : 11;           /*!< [10..0] Set the maximum width of the header pattern                       */
            uint16_t            : 5;
    } HDPMAX_b;
  } ;
  __IOM uint8_t   D0PMIN;                       /*!< (@ 0x0000000C) Data 0 Pattern Minimum Width Setting Register              */
  __IOM uint8_t   D0PMAX;                       /*!< (@ 0x0000000D) Data 0 Pattern Maximum Width Setting Register              */
  __IOM uint8_t   D1PMIN;                       /*!< (@ 0x0000000E) Data 1 Pattern Minimum Width Setting Register              */
  __IOM uint8_t   D1PMAX;                       /*!< (@ 0x0000000F) Data 1 Pattern Maximum Width Setting Register              */
  
  union {
    __IOM uint16_t SDPMIN;                      /*!< (@ 0x00000010) Special Data Pattern Minimum Width Setting Register        */
    
    struct {
      __IOM uint16_t SDMIN      : 11;           /*!< [10..0] Set the minimum width of the special data pattern                 */
            uint16_t            : 5;
    } SDPMIN_b;
  } ;
  
  union {
    __IOM uint16_t SDPMAX;                      /*!< (@ 0x00000012) Special Data Pattern Maximum Width Setting Register        */
    
    struct {
      __IOM uint16_t SDMAX      : 11;           /*!< [10..0] Set the maximum width of the special data pattern                 */
            uint16_t            : 5;
    } SDPMAX_b;
  } ;
  
  union {
    __IOM uint16_t REMPE;                       /*!< (@ 0x00000014) Pattern End Setting Register                               */
    
    struct {
      __IOM uint16_t PE         : 11;           /*!< [10..0] Set the width of the pattern end                                  */
            uint16_t            : 5;
    } REMPE_b;
  } ;
  
  union {
    __IOM uint8_t REMSTC;                       /*!< (@ 0x00000016) Receiver Standby Control Register                          */
    
    struct {
      __IOM uint8_t SNZON       : 1;            /*!< [0..0] Snooze Mode Operation Control                                      */
      __IOM uint8_t DNFSL       : 1;            /*!< [1..1] Digital Filter Clock Selection                                     */
            uint8_t             : 6;
    } REMSTC_b;
  } ;
  
  union {
    __IOM uint8_t REMRBIT;                      /*!< (@ 0x00000017) Receive Bit Count Register                                 */
    
    struct {
      __IOM uint8_t RBIT0       : 1;            /*!< [0..0] Receive Bit Count Check (bit 0)                                    */
      __IM  uint8_t RBIT        : 6;            /*!< [6..1] Receive Bit Count Check (bit 6 to 1)                               */
            uint8_t             : 1;
    } REMRBIT_b;
  } ;
  
  union {
    __IOM uint8_t REMDAT0;                      /*!< (@ 0x00000018) Receive Data 0 Register                                    */
    
    struct {
      __IOM uint8_t DAT0        : 1;            /*!< [0..0] Receive Data 0 Store (bit 0)                                       */
      __IM  uint8_t DAT         : 7;            /*!< [7..1] Receive Data 0 Store (bit 7 to 1)                                  */
    } REMDAT0_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT1;                      /*!< (@ 0x00000019) Receive Data 1 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT1_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT2;                      /*!< (@ 0x0000001A) Receive Data 2 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT2_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT3;                      /*!< (@ 0x0000001B) Receive Data 3 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT3_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT4;                      /*!< (@ 0x0000001C) Receive Data 4 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT4_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT5;                      /*!< (@ 0x0000001D) Receive Data 5 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT5_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT6;                      /*!< (@ 0x0000001E) Receive Data 6 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT6_b;
  } ;
  
  union {
    __IM  uint8_t REMDAT7;                      /*!< (@ 0x0000001F) Receive Data 7 Register                                    */
    
    struct {
      __IM  uint8_t DAT         : 8;            /*!< [7..0] Receive Data Store                                                 */
    } REMDAT7_b;
  } ;
  
  union {
    __IM  uint16_t REMTIM;                      /*!< (@ 0x00000020) Measurement Result Register                                */
    
    struct {
      __IM  uint16_t TIM        : 11;           /*!< [10..0] Measurement Result                                                */
            uint16_t            : 5;
    } REMTIM_b;
  } ;
} R_REMC_Type;                                  /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                           TML32                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief 32-bit Interval Timer (TML32)
  */

typedef struct {                                /*!< (@ 0x40092200) TML32 Structure                                            */
  
  union {
    __IOM uint16_t ITLCMP00;                    /*!< (@ 0x00000000) Interval Timer Compare Registers 00                        */
    
    struct {
      __IOM uint16_t CMP16      : 16;           /*!< [15..0] 16-bit timer setting compare data for unit n                      */
    } ITLCMP00_b;
  } ;
  
  union {
    __IOM uint16_t ITLCMP01;                    /*!< (@ 0x00000002) Interval Timer Compare Registers 01                        */
    
    struct {
      __IOM uint16_t CMP16      : 16;           /*!< [15..0] 16-bit timer setting compare data for unit n                      */
    } ITLCMP01_b;
  } ;
  __IM  uint16_t  ITLCAP00;                     /*!< (@ 0x00000004) Interval Timer Capture Register 00                         */
  
  union {
    __IOM uint8_t ITLCTL0;                      /*!< (@ 0x00000006) Interval Timer Control Register                            */
    
    struct {
      __IOM uint8_t EN0         : 1;            /*!< [0..0] 8-bit counter mode: ITL000 count enable                            */
      __IOM uint8_t EN1         : 1;            /*!< [1..1] 8-bit counter mode: ITL001 count enable                            */
      __IOM uint8_t EN2         : 1;            /*!< [2..2] 8-bit counter mode: ITL012 count enable                            */
      __IOM uint8_t EN3         : 1;            /*!< [3..3] 8-bit counter mode: ITL013 count enable                            */
            uint8_t             : 2;
      __IOM uint8_t MD0         : 2;            /*!< [7..6] Selection of 8-bit, 16-bit, or 32-bit counter mode                 */
    } ITLCTL0_b;
  } ;
  
  union {
    __IOM uint8_t ITLCSEL0;                     /*!< (@ 0x00000007) Interval Timer Clock Select Register 0                     */
    
    struct {
      __IOM uint8_t ISEL        : 3;            /*!< [2..0] Selection of interval timer count clock (fITL0)                    */
            uint8_t             : 1;
      __IOM uint8_t CSEL        : 3;            /*!< [6..4] Selection of interval timer count clock for capturing
                                                     (fITL1)                                                                   */
            uint8_t             : 1;
    } ITLCSEL0_b;
  } ;
  
  union {
    __IOM uint8_t ITLFDIV00;                    /*!< (@ 0x00000008) Interval Timer Frequency Division Register 0               */
    
    struct {
      __IOM uint8_t FDIV0       : 3;            /*!< [2..0] 8-bit counter mode: Counter clock for ITL000                       */
            uint8_t             : 1;
      __IOM uint8_t FDIV1       : 3;            /*!< [6..4] 8-bit counter mode: Counter clock for ITL001                       */
            uint8_t             : 1;
    } ITLFDIV00_b;
  } ;
  
  union {
    __IOM uint8_t ITLFDIV01;                    /*!< (@ 0x00000009) Interval Timer Frequency Division Register 1               */
    
    struct {
      __IOM uint8_t FDIV2       : 3;            /*!< [2..0] 8-bit counter mode: Counter clock for ITL012                       */
            uint8_t             : 1;
      __IOM uint8_t FDIV3       : 3;            /*!< [6..4] 8-bit counter mode: Counter clock for ITL013                       */
            uint8_t             : 1;
    } ITLFDIV01_b;
  } ;
  
  union {
    __IOM uint8_t ITLCC0;                       /*!< (@ 0x0000000A) Interval Timer Capture Control Register 0                  */
    
    struct {
      __IOM uint8_t CTRS        : 2;            /*!< [1..0] Selection of capture trigger                                       */
            uint8_t             : 1;
      __IOM uint8_t CAPC0CR     : 1;            /*!< [3..3] Selection of capture counter clearing after capturing              */
      __IOM uint8_t CAPR0       : 1;            /*!< [4..4] Software capture trigger                                           */
      __IM  uint8_t CAPF0       : 1;            /*!< [5..5] Capture completion flag                                            */
      __IOM uint8_t CAPF0CR     : 1;            /*!< [6..6] Capture completion flag clear                                      */
      __IOM uint8_t CAPEN0      : 1;            /*!< [7..7] Capture enable                                                     */
    } ITLCC0_b;
  } ;
  
  union {
    __IOM uint8_t ITLS0;                        /*!< (@ 0x0000000B) Interval Timer Status Register                             */
    
    struct {
      __IOM uint8_t ITF00       : 1;            /*!< [0..0] Compare match detection flag for channel 0                         */
      __IOM uint8_t ITF01       : 1;            /*!< [1..1] Compare match detection flag for channel 1                         */
      __IOM uint8_t ITF02       : 1;            /*!< [2..2] Compare match detection flag for channel 2                         */
      __IOM uint8_t ITF03       : 1;            /*!< [3..3] Compare match detection flag for channel 3                         */
      __IOM uint8_t ITF0C       : 1;            /*!< [4..4] Capture detection flag                                             */
            uint8_t             : 3;
    } ITLS0_b;
  } ;
  
  union {
    __IOM uint8_t ITLMKF0;                      /*!< (@ 0x0000000C) Interval Timer Match Detection Mask Register               */
    
    struct {
      __IOM uint8_t MKF00       : 1;            /*!< [0..0] Mask for compare match status flag for channel 0                   */
      __IOM uint8_t MKF01       : 1;            /*!< [1..1] Mask for compare match status flag for channel 1                   */
      __IOM uint8_t MKF02       : 1;            /*!< [2..2] Mask for compare match status flag for channel 2                   */
      __IOM uint8_t MKF03       : 1;            /*!< [3..3] Mask for compare match status flag for channel 3                   */
      __IOM uint8_t MKF0C       : 1;            /*!< [4..4] Mask for capture detection status flag                             */
            uint8_t             : 3;
    } ITLMKF0_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
} R_TML32_Type;                                 /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           IICA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Interface IICA (IICA)
  */

typedef struct {                                /*!< (@ 0x40093000) IICA Structure                                             */
  __IOM uint8_t   IICA0;                        /*!< (@ 0x00000000) IICA Shift Register 0                                      */
  
  union {
    __IM  uint8_t IICS0;                        /*!< (@ 0x00000001) IICA Status Register 0                                     */
    
    struct {
      __IM  uint8_t SPD         : 1;            /*!< [0..0] Detection of stop condition                                        */
      __IM  uint8_t STD         : 1;            /*!< [1..1] Detection of start condition                                       */
      __IM  uint8_t ACKD        : 1;            /*!< [2..2] Detection of acknowledge (ACK)                                     */
      __IM  uint8_t TRC         : 1;            /*!< [3..3] Detection of transmit and receive status                           */
      __IM  uint8_t COI         : 1;            /*!< [4..4] Detection of matching addresses                                    */
      __IM  uint8_t EXC         : 1;            /*!< [5..5] Detection of extension code reception                              */
      __IM  uint8_t ALD         : 1;            /*!< [6..6] Detection of arbitration loss                                      */
      __IM  uint8_t MSTS        : 1;            /*!< [7..7] Master status check flag                                           */
    } IICS0_b;
  } ;
  
  union {
    __IOM uint8_t IICF0;                        /*!< (@ 0x00000002) IICA Flag Register 0                                       */
    
    struct {
      __IOM uint8_t IICRSV      : 1;            /*!< [0..0] Communication reservation function disable bit                     */
      __IOM uint8_t STCEN       : 1;            /*!< [1..1] Initial start enable trigger                                       */
            uint8_t             : 4;
      __IM  uint8_t IICBSY      : 1;            /*!< [6..6] I2C bus status flag                                                */
      __IM  uint8_t STCF        : 1;            /*!< [7..7] IICCTLn0.STT clear flag                                            */
    } IICF0_b;
  } ;
  __IM  uint8_t   RESERVED[125];
  
  union {
    __IOM uint8_t IICCTL00;                     /*!< (@ 0x00000080) IICA Control Register n0                                   */
    
    struct {
      __IOM uint8_t SPT         : 1;            /*!< [0..0] Stop condition trigger                                             */
      __IOM uint8_t STT         : 1;            /*!< [1..1] Start condition trigger                                            */
      __IOM uint8_t ACKE        : 1;            /*!< [2..2] Acknowledgment control                                             */
      __IOM uint8_t WTIM        : 1;            /*!< [3..3] Control of clock stretching and interrupt request generation       */
      __IOM uint8_t SPIE        : 1;            /*!< [4..4] Enable and disable generation of interrupt request when
                                                     stop condition is detected                                                */
      __IOM uint8_t WREL        : 1;            /*!< [5..5] Release from the clock stretch state                               */
      __IOM uint8_t LREL        : 1;            /*!< [6..6] Exit from communications                                           */
      __IOM uint8_t IICE        : 1;            /*!< [7..7] I2C operation enable                                               */
    } IICCTL00_b;
  } ;
  
  union {
    __IOM uint8_t IICCTL01;                     /*!< (@ 0x00000081) IICA Control Register n1                                   */
    
    struct {
      __IOM uint8_t PRS         : 1;            /*!< [0..0] IICA operation clock (fMCK)                                        */
            uint8_t             : 1;
      __IOM uint8_t DFC         : 1;            /*!< [2..2] Digital filter operation control                                   */
      __IOM uint8_t SMC         : 1;            /*!< [3..3] Operation mode switching                                           */
      __IM  uint8_t DAD         : 1;            /*!< [4..4] Detection of SDAAn pin level (valid only when IICCTLn0.IICE
                                                     = 1)                                                                      */
      __IM  uint8_t CLD         : 1;            /*!< [5..5] Detection of SCLAn pin level (valid only when IICCTLn0.IICE
                                                     = 1)                                                                      */
      __IOM uint8_t SVADIS      : 1;            /*!< [6..6] Address match disabling flag                                       */
      __IOM uint8_t WUP         : 1;            /*!< [7..7] Control of address match wakeup                                    */
    } IICCTL01_b;
  } ;
  __IOM uint8_t   IICWL0;                       /*!< (@ 0x00000082) IICA Low-level Width Setting Register 0                    */
  __IOM uint8_t   IICWH0;                       /*!< (@ 0x00000083) IICA High-level Width Setting Register 0                   */
  
  union {
    __IOM uint8_t SVA0;                         /*!< (@ 0x00000084) Slave Address Register 0                                   */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t A           : 7;            /*!< [7..1] 7-bit local address when in slave mode of unit n                   */
    } SVA0_b;
  } ;
  __IM  uint8_t   RESERVED1[123];
  __IOM uint8_t   IICA1;                        /*!< (@ 0x00000100) IICA Shift Register 1                                      */
  
  union {
    __IM  uint8_t IICS1;                        /*!< (@ 0x00000101) IICA Status Register 1                                     */
    
    struct {
      __IM  uint8_t SPD         : 1;            /*!< [0..0] Detection of stop condition                                        */
      __IM  uint8_t STD         : 1;            /*!< [1..1] Detection of start condition                                       */
      __IM  uint8_t ACKD        : 1;            /*!< [2..2] Detection of acknowledge (ACK)                                     */
      __IM  uint8_t TRC         : 1;            /*!< [3..3] Detection of transmit and receive status                           */
      __IM  uint8_t COI         : 1;            /*!< [4..4] Detection of matching addresses                                    */
      __IM  uint8_t EXC         : 1;            /*!< [5..5] Detection of extension code reception                              */
      __IM  uint8_t ALD         : 1;            /*!< [6..6] Detection of arbitration loss                                      */
      __IM  uint8_t MSTS        : 1;            /*!< [7..7] Master status check flag                                           */
    } IICS1_b;
  } ;
  
  union {
    __IOM uint8_t IICF1;                        /*!< (@ 0x00000102) IICA Flag Register 1                                       */
    
    struct {
      __IOM uint8_t IICRSV      : 1;            /*!< [0..0] Communication reservation function disable bit                     */
      __IOM uint8_t STCEN       : 1;            /*!< [1..1] Initial start enable trigger                                       */
            uint8_t             : 4;
      __IM  uint8_t IICBSY      : 1;            /*!< [6..6] I2C bus status flag                                                */
      __IM  uint8_t STCF        : 1;            /*!< [7..7] IICCTLn0.STT clear flag                                            */
    } IICF1_b;
  } ;
  __IM  uint8_t   RESERVED2[125];
  
  union {
    __IOM uint8_t IICCTL10;                     /*!< (@ 0x00000180) IICA Control Register n0                                   */
    
    struct {
      __IOM uint8_t SPT         : 1;            /*!< [0..0] Stop condition trigger                                             */
      __IOM uint8_t STT         : 1;            /*!< [1..1] Start condition trigger                                            */
      __IOM uint8_t ACKE        : 1;            /*!< [2..2] Acknowledgment control                                             */
      __IOM uint8_t WTIM        : 1;            /*!< [3..3] Control of clock stretching and interrupt request generation       */
      __IOM uint8_t SPIE        : 1;            /*!< [4..4] Enable and disable generation of interrupt request when
                                                     stop condition is detected                                                */
      __IOM uint8_t WREL        : 1;            /*!< [5..5] Release from the clock stretch state                               */
      __IOM uint8_t LREL        : 1;            /*!< [6..6] Exit from communications                                           */
      __IOM uint8_t IICE        : 1;            /*!< [7..7] I2C operation enable                                               */
    } IICCTL10_b;
  } ;
  
  union {
    __IOM uint8_t IICCTL11;                     /*!< (@ 0x00000181) IICA Control Register n1                                   */
    
    struct {
      __IOM uint8_t PRS         : 1;            /*!< [0..0] IICA operation clock (fMCK)                                        */
            uint8_t             : 1;
      __IOM uint8_t DFC         : 1;            /*!< [2..2] Digital filter operation control                                   */
      __IOM uint8_t SMC         : 1;            /*!< [3..3] Operation mode switching                                           */
      __IM  uint8_t DAD         : 1;            /*!< [4..4] Detection of SDAAn pin level (valid only when IICCTLn0.IICE
                                                     = 1)                                                                      */
      __IM  uint8_t CLD         : 1;            /*!< [5..5] Detection of SCLAn pin level (valid only when IICCTLn0.IICE
                                                     = 1)                                                                      */
      __IOM uint8_t SVADIS      : 1;            /*!< [6..6] Address match disabling flag                                       */
      __IOM uint8_t WUP         : 1;            /*!< [7..7] Control of address match wakeup                                    */
    } IICCTL11_b;
  } ;
  __IOM uint8_t   IICWL1;                       /*!< (@ 0x00000182) IICA Low-level Width Setting Register 1                    */
  __IOM uint8_t   IICWH1;                       /*!< (@ 0x00000183) IICA High-level Width Setting Register 1                   */
  
  union {
    __IOM uint8_t SVA1;                         /*!< (@ 0x00000184) Slave Address Register 1                                   */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t A           : 7;            /*!< [7..1] 7-bit local address when in slave mode of unit n                   */
    } SVA1_b;
  } ;
} R_IICA_Type;                                  /*!< Size = 389 (0x185)                                                        */



/* =========================================================================================================================== */
/* ================                                           SAU0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Array Unit 0 (SAU0)
  */

typedef struct {                                /*!< (@ 0x40094000) SAU0 Structure                                             */
  
  union {
    __IOM uint16_t SDR00;                       /*!< (@ 0x00000000) Serial Data Register 00                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR00_b;
  } ;
  
  union {
    __IOM uint16_t SDR01;                       /*!< (@ 0x00000002) Serial Data Register 01                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR01_b;
  } ;
  
  union {
    __IOM uint16_t SDR02;                       /*!< (@ 0x00000004) Serial Data Register 02                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR02_b;
  } ;
  
  union {
    __IOM uint16_t SDR03;                       /*!< (@ 0x00000006) Serial Data Register 03                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR03_b;
  } ;
  __IM  uint16_t  RESERVED[60];
  
  union {
    __IM  uint16_t SSR00;                       /*!< (@ 0x00000080) Serial Status Register 00                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
            uint16_t            : 3;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR00_b;
  } ;
  
  union {
    __IM  uint16_t SSR01;                       /*!< (@ 0x00000082) Serial Status Register 01                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
      __IM  uint16_t FEF        : 1;            /*!< [2..2] Framing error detection flag of channel n                          */
            uint16_t            : 2;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR01_b;
  } ;
  
  union {
    __IM  uint16_t SSR02;                       /*!< (@ 0x00000084) Serial Status Register 02                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
            uint16_t            : 3;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR02_b;
  } ;
  
  union {
    __IM  uint16_t SSR03;                       /*!< (@ 0x00000086) Serial Status Register 03                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
      __IM  uint16_t FEF        : 1;            /*!< [2..2] Framing error detection flag of channel n                          */
            uint16_t            : 2;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR03_b;
  } ;
  
  union {
    __IOM uint16_t SIR00;                       /*!< (@ 0x00000088) Serial Flag Clear Trigger Register 00                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
            uint16_t            : 14;
    } SIR00_b;
  } ;
  
  union {
    __IOM uint16_t SIR01;                       /*!< (@ 0x0000008A) Serial Flag Clear Trigger Register 01                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
      __IOM uint16_t FECT       : 1;            /*!< [2..2] Clear trigger of framing error flag of channel n                   */
            uint16_t            : 13;
    } SIR01_b;
  } ;
  
  union {
    __IOM uint16_t SIR02;                       /*!< (@ 0x0000008C) Serial Flag Clear Trigger Register 02                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
            uint16_t            : 14;
    } SIR02_b;
  } ;
  
  union {
    __IOM uint16_t SIR03;                       /*!< (@ 0x0000008E) Serial Flag Clear Trigger Register 03                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
      __IOM uint16_t FECT       : 1;            /*!< [2..2] Clear trigger of framing error flag of channel n                   */
            uint16_t            : 13;
    } SIR03_b;
  } ;
  
  union {
    __IOM uint16_t SMR00;                       /*!< (@ 0x00000090) Serial Mode Register 00                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 11;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR00_b;
  } ;
  
  union {
    __IOM uint16_t SMR01;                       /*!< (@ 0x00000092) Serial Mode Register 01                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 3;
      __IOM uint16_t SIS0       : 1;            /*!< [6..6] Controls inversion of level of channel n receive data
                                                     in UART mode                                                              */
            uint16_t            : 1;
      __IOM uint16_t STS        : 1;            /*!< [8..8] Selection of start trigger source                                  */
            uint16_t            : 5;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR01_b;
  } ;
  
  union {
    __IOM uint16_t SMR02;                       /*!< (@ 0x00000094) Serial Mode Register 02                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 11;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR02_b;
  } ;
  
  union {
    __IOM uint16_t SMR03;                       /*!< (@ 0x00000096) Serial Mode Register 03                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 3;
      __IOM uint16_t SIS0       : 1;            /*!< [6..6] Controls inversion of level of channel n receive data
                                                     in UART mode                                                              */
            uint16_t            : 1;
      __IOM uint16_t STS        : 1;            /*!< [8..8] Selection of start trigger source                                  */
            uint16_t            : 5;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR03_b;
  } ;
  
  union {
    __IOM uint16_t SCR00;                       /*!< (@ 0x00000098) Serial Communication Operation Setting Register
                                                                    00                                                         */
    
    struct {
      __IOM uint16_t DLS        : 2;            /*!< [1..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 2;
      __IOM uint16_t SLC        : 2;            /*!< [5..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 1;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
            uint16_t            : 2;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of channel 0 operation mode                              */
    } SCR00_b;
  } ;
  
  union {
    __IOM uint16_t SCR01;                       /*!< (@ 0x0000009A) Serial Communication Operation Setting Register
                                                                    01                                                         */
    
    struct {
      __IOM uint16_t DLS        : 2;            /*!< [1..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 2;
      __IOM uint16_t SLC        : 1;            /*!< [4..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 2;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
      __IOM uint16_t EOC        : 1;            /*!< [10..10] Mask control of error interrupt signal SAU0_INTSRE0
                                                     (m = 0), SAU1_INTSRE2 (m = 1)                                             */
            uint16_t            : 1;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of channel 1 operation mode                              */
    } SCR01_b;
  } ;
  
  union {
    __IOM uint16_t SCR02;                       /*!< (@ 0x0000009C) Serial Communication Operation Setting Register
                                                                    02                                                         */
    
    struct {
      __IOM uint16_t DLS        : 1;            /*!< [0..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 3;
      __IOM uint16_t SLC        : 2;            /*!< [5..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 1;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
            uint16_t            : 2;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of channel 2 operation mode                              */
    } SCR02_b;
  } ;
  
  union {
    __IOM uint16_t SCR03;                       /*!< (@ 0x0000009E) Serial Communication Operation Setting Register
                                                                    03                                                         */
    
    struct {
      __IOM uint16_t DLS        : 1;            /*!< [0..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 3;
      __IOM uint16_t SLC        : 1;            /*!< [4..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 2;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
      __IOM uint16_t EOC        : 1;            /*!< [10..10] Mask control of error interrupt signal SAU0_INTSRE1              */
            uint16_t            : 1;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of operation mode of channel 3                           */
    } SCR03_b;
  } ;
  
  union {
    __IM  uint16_t SE0;                         /*!< (@ 0x000000A0) Serial Channel Enable Status Register 0                    */
    
    struct {
      __IM  uint16_t SE         : 4;            /*!< [3..0] Indication of whether operation of channel n is enabled
                                                     or stopped.                                                               */
            uint16_t            : 12;
    } SE0_b;
  } ;
  
  union {
    __IOM uint16_t SS0;                         /*!< (@ 0x000000A2) Serial Channel Start Register 0                            */
    
    struct {
      __IOM uint16_t SS         : 4;            /*!< [3..0] Operation start trigger of channel n                               */
            uint16_t            : 12;
    } SS0_b;
  } ;
  
  union {
    __IOM uint16_t ST0;                         /*!< (@ 0x000000A4) Serial Channel Stop Register 0                             */
    
    struct {
      __IOM uint16_t ST         : 4;            /*!< [3..0] Operation stop trigger of channel n                                */
            uint16_t            : 12;
    } ST0_b;
  } ;
  
  union {
    __IOM uint16_t SPS0;                        /*!< (@ 0x000000A6) Serial Clock Select Register 0                             */
    
    struct {
      __IOM uint16_t PRS0       : 4;            /*!< [3..0] Selection of operation clock (CKm0)                                */
      __IOM uint16_t PRS1       : 4;            /*!< [7..4] Selection of operation clock (CKm1)                                */
            uint16_t            : 8;
    } SPS0_b;
  } ;
  
  union {
    __IOM uint16_t SO0;                         /*!< (@ 0x000000A8) Serial Output Register 0                                   */
    
    struct {
      __IOM uint16_t SO         : 4;            /*!< [3..0] Serial data output of channel n                                    */
            uint16_t            : 4;
      __IOM uint16_t CKO        : 4;            /*!< [11..8] Serial clock output of channel n                                  */
            uint16_t            : 4;
    } SO0_b;
  } ;
  
  union {
    __IOM uint16_t SOE0;                        /*!< (@ 0x000000AA) Serial Output Enable Register 0                            */
    
    struct {
      __IOM uint16_t SOE        : 4;            /*!< [3..0] Serial output enable or stop of channel n                          */
            uint16_t            : 12;
    } SOE0_b;
  } ;
  __IM  uint16_t  RESERVED1[4];
  
  union {
    __IOM uint16_t SOL0;                        /*!< (@ 0x000000B4) Serial Output Level Register 0                             */
    
    struct {
      __IOM uint16_t SOL0       : 1;            /*!< [0..0] Selects inversion of the level of the transmit data of
                                                     channel 0 in UART mode                                                    */
            uint16_t            : 1;
      __IOM uint16_t SOL2       : 1;            /*!< [2..2] Selects inversion of the level of the transmit data of
                                                     channel 2 in UART mode                                                    */
            uint16_t            : 13;
    } SOL0_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t SSC0;                        /*!< (@ 0x000000B8) Serial Standby Control Register 0                          */
    
    struct {
      __IOM uint16_t SWC        : 1;            /*!< [0..0] Setting of the Snooze mode                                         */
      __IOM uint16_t SSEC       : 1;            /*!< [1..1] Selection of whether to enable or disable the generation
                                                     of communication error interrupts in the Snooze mode                      */
            uint16_t            : 14;
    } SSC0_b;
  } ;
} R_SAU0_Type;                                  /*!< Size = 186 (0xba)                                                         */



/* =========================================================================================================================== */
/* ================                                           SAU1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Array Unit 1 (SAU1)
  */

typedef struct {                                /*!< (@ 0x40094100) SAU1 Structure                                             */
  
  union {
    __IOM uint16_t SDR10;                       /*!< (@ 0x00000000) Serial Data Register 10                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR10_b;
  } ;
  
  union {
    __IOM uint16_t SDR11;                       /*!< (@ 0x00000002) Serial Data Register 11                                    */
    
    struct {
      __IOM uint16_t DAT        : 9;            /*!< [8..0] Data buffer for transmit and receive                               */
      __IOM uint16_t STCLK      : 7;            /*!< [15..9] Transfer clock setting by dividing the operation clock            */
    } SDR11_b;
  } ;
  __IM  uint16_t  RESERVED[62];
  
  union {
    __IM  uint16_t SSR10;                       /*!< (@ 0x00000080) Serial Status Register 10                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
            uint16_t            : 3;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR10_b;
  } ;
  
  union {
    __IM  uint16_t SSR11;                       /*!< (@ 0x00000082) Serial Status Register 11                                  */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Overrun error detection flag of channel n                          */
      __IM  uint16_t PEF        : 1;            /*!< [1..1] Parity or ACK error detection flag of channel n                    */
      __IM  uint16_t FEF        : 1;            /*!< [2..2] Framing error detection flag of channel n                          */
            uint16_t            : 2;
      __IM  uint16_t BFF        : 1;            /*!< [5..5] Flag indicating the state of the buffer register for
                                                     channel n                                                                 */
      __IM  uint16_t TSF        : 1;            /*!< [6..6] Flag indicating the state of communications for channel
                                                     n                                                                         */
            uint16_t            : 9;
    } SSR11_b;
  } ;
  __IM  uint16_t  RESERVED1[2];
  
  union {
    __IOM uint16_t SIR10;                       /*!< (@ 0x00000088) Serial Flag Clear Trigger Register 10                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
            uint16_t            : 14;
    } SIR10_b;
  } ;
  
  union {
    __IOM uint16_t SIR11;                       /*!< (@ 0x0000008A) Serial Flag Clear Trigger Register 11                      */
    
    struct {
      __IOM uint16_t OVCT       : 1;            /*!< [0..0] Clear trigger of overrun error flag of channel n                   */
      __IOM uint16_t PECT       : 1;            /*!< [1..1] Clear trigger of parity error flag of channel n                    */
      __IOM uint16_t FECT       : 1;            /*!< [2..2] Clear trigger of framing error flag of channel n                   */
            uint16_t            : 13;
    } SIR11_b;
  } ;
  __IM  uint16_t  RESERVED2[2];
  
  union {
    __IOM uint16_t SMR10;                       /*!< (@ 0x00000090) Serial Mode Register 10                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 11;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR10_b;
  } ;
  
  union {
    __IOM uint16_t SMR11;                       /*!< (@ 0x00000092) Serial Mode Register 11                                    */
    
    struct {
      __IOM uint16_t MD0        : 1;            /*!< [0..0] Selection of channel n interrupt source                            */
      __IOM uint16_t MD1        : 2;            /*!< [2..1] Setting of channel n operation mode                                */
            uint16_t            : 3;
      __IOM uint16_t SIS0       : 1;            /*!< [6..6] Controls inversion of level of channel n receive data
                                                     in UART mode                                                              */
            uint16_t            : 1;
      __IOM uint16_t STS        : 1;            /*!< [8..8] Selection of start trigger source                                  */
            uint16_t            : 5;
      __IOM uint16_t CCS        : 1;            /*!< [14..14] Selection of transfer clock (fTCLK) of channel n                 */
      __IOM uint16_t CKS        : 1;            /*!< [15..15] Selection of operation clock (fMCK) of channel n                 */
    } SMR11_b;
  } ;
  __IM  uint16_t  RESERVED3[2];
  
  union {
    __IOM uint16_t SCR10;                       /*!< (@ 0x00000098) Serial Communication Operation Setting Register
                                                                    10                                                         */
    
    struct {
      __IOM uint16_t DLS        : 2;            /*!< [1..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 2;
      __IOM uint16_t SLC        : 2;            /*!< [5..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 1;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
            uint16_t            : 2;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of channel 0 operation mode                              */
    } SCR10_b;
  } ;
  
  union {
    __IOM uint16_t SCR11;                       /*!< (@ 0x0000009A) Serial Communication Operation Setting Register
                                                                    11                                                         */
    
    struct {
      __IOM uint16_t DLS        : 2;            /*!< [1..0] Setting of data length in simplified SPI and UART modes            */
            uint16_t            : 2;
      __IOM uint16_t SLC        : 1;            /*!< [4..4] Setting of stop bit in UART mode                                   */
            uint16_t            : 2;
      __IOM uint16_t DIR        : 1;            /*!< [7..7] Selection of data transfer sequence in simplified SPI
                                                     and UART modes                                                            */
      __IOM uint16_t PTC        : 2;            /*!< [9..8] Setting of parity bit in UART mode                                 */
      __IOM uint16_t EOC        : 1;            /*!< [10..10] Mask control of error interrupt signal SAU0_INTSRE0
                                                     (m = 0), SAU1_INTSRE2 (m = 1)                                             */
            uint16_t            : 1;
      __IOM uint16_t DCP        : 2;            /*!< [13..12] Selection of data and clock phase in simplified SPI
                                                     mode                                                                      */
      __IOM uint16_t TRXE       : 2;            /*!< [15..14] Setting of channel 1 operation mode                              */
    } SCR11_b;
  } ;
  __IM  uint16_t  RESERVED4[2];
  
  union {
    __IM  uint16_t SE1;                         /*!< (@ 0x000000A0) Serial Channel Enable Status Register 1                    */
    
    struct {
      __IM  uint16_t SE         : 2;            /*!< [1..0] Indication of whether operation of channel n is enabled
                                                     or stopped.                                                               */
            uint16_t            : 14;
    } SE1_b;
  } ;
  
  union {
    __IOM uint16_t SS1;                         /*!< (@ 0x000000A2) Serial Channel Start Register 1                            */
    
    struct {
      __IOM uint16_t SS         : 2;            /*!< [1..0] Operation start trigger of channel n                               */
            uint16_t            : 14;
    } SS1_b;
  } ;
  
  union {
    __IOM uint16_t ST1;                         /*!< (@ 0x000000A4) Serial Channel Stop Register 1                             */
    
    struct {
      __IOM uint16_t ST         : 2;            /*!< [1..0] Operation stop trigger of channel n                                */
            uint16_t            : 14;
    } ST1_b;
  } ;
  
  union {
    __IOM uint16_t SPS1;                        /*!< (@ 0x000000A6) Serial Clock Select Register 1                             */
    
    struct {
      __IOM uint16_t PRS0       : 4;            /*!< [3..0] Selection of operation clock (CKm0)                                */
      __IOM uint16_t PRS1       : 4;            /*!< [7..4] Selection of operation clock (CKm1)                                */
            uint16_t            : 8;
    } SPS1_b;
  } ;
  
  union {
    __IOM uint16_t SO1;                         /*!< (@ 0x000000A8) Serial Output Register 1                                   */
    
    struct {
      __IOM uint16_t SO         : 2;            /*!< [1..0] Serial data output of channel n                                    */
            uint16_t            : 6;
      __IOM uint16_t CKO        : 2;            /*!< [9..8] Serial clock output of channel n                                   */
            uint16_t            : 6;
    } SO1_b;
  } ;
  
  union {
    __IOM uint16_t SOE1;                        /*!< (@ 0x000000AA) Serial Output Enable Register 1                            */
    
    struct {
      __IOM uint16_t SOE        : 2;            /*!< [1..0] Serial output enable or stop of channel n                          */
            uint16_t            : 14;
    } SOE1_b;
  } ;
  __IM  uint16_t  RESERVED5[4];
  
  union {
    __IOM uint16_t SOL1;                        /*!< (@ 0x000000B4) Serial Output Level Register 1                             */
    
    struct {
      __IOM uint16_t SOL0       : 1;            /*!< [0..0] Selects inversion of the level of the transmit data of
                                                     channel 0 in UART mode                                                    */
            uint16_t            : 15;
    } SOL1_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t SSC1;                        /*!< (@ 0x000000B8) Serial Standby Control Register 1                          */
    
    struct {
      __IOM uint16_t SWC        : 1;            /*!< [0..0] Setting of the Snooze mode                                         */
      __IOM uint16_t SSEC       : 1;            /*!< [1..1] Selection of whether to enable or disable the generation
                                                     of communication error interrupts in the Snooze mode                      */
            uint16_t            : 14;
    } SSC1_b;
  } ;
} R_SAU1_Type;                                  /*!< Size = 186 (0xba)                                                         */



/* =========================================================================================================================== */
/* ================                                            TAU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer Array Unit (TAU)
  */

typedef struct {                                /*!< (@ 0x40095000) TAU Structure                                              */
  __IOM uint16_t  TDR00;                        /*!< (@ 0x00000000) Timer Data Register 00                                     */
  
  union {
    __IOM uint16_t TDR01;                       /*!< (@ 0x00000002) Timer Data Register 01                                     */
    
    struct {
      __IOM uint8_t TDR01L;                     /*!< (@ 0x00000002) Timer Data Register 01                                     */
      __IOM uint8_t TDR01H;                     /*!< (@ 0x00000003) Timer Data Register 01                                     */
    };
  };
  __IOM uint16_t  TDR02;                        /*!< (@ 0x00000004) Timer Data Register 02                                     */
  
  union {
    __IOM uint16_t TDR03;                       /*!< (@ 0x00000006) Timer Data Register 03                                     */
    
    struct {
      __IOM uint8_t TDR03L;                     /*!< (@ 0x00000006) Timer Data Register 03                                     */
      __IOM uint8_t TDR03H;                     /*!< (@ 0x00000007) Timer Data Register 03                                     */
    };
  };
  __IOM uint16_t  TDR04;                        /*!< (@ 0x00000008) Timer Data Register 04                                     */
  __IOM uint16_t  TDR05;                        /*!< (@ 0x0000000A) Timer Data Register 05                                     */
  __IOM uint16_t  TDR06;                        /*!< (@ 0x0000000C) Timer Data Register 06                                     */
  __IOM uint16_t  TDR07;                        /*!< (@ 0x0000000E) Timer Data Register 07                                     */
  __IM  uint16_t  RESERVED[56];
  __IM  uint16_t  TCR00;                        /*!< (@ 0x00000080) Timer Counter Register 00                                  */
  __IM  uint16_t  TCR01;                        /*!< (@ 0x00000082) Timer Counter Register 01                                  */
  __IM  uint16_t  TCR02;                        /*!< (@ 0x00000084) Timer Counter Register 02                                  */
  __IM  uint16_t  TCR03;                        /*!< (@ 0x00000086) Timer Counter Register 03                                  */
  __IM  uint16_t  TCR04;                        /*!< (@ 0x00000088) Timer Counter Register 04                                  */
  __IM  uint16_t  TCR05;                        /*!< (@ 0x0000008A) Timer Counter Register 05                                  */
  __IM  uint16_t  TCR06;                        /*!< (@ 0x0000008C) Timer Counter Register 06                                  */
  __IM  uint16_t  TCR07;                        /*!< (@ 0x0000008E) Timer Counter Register 07                                  */
  
  union {
    __IOM uint16_t TMR00;                       /*!< (@ 0x00000090) Timer Mode Register 00                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR00_b;
  } ;
  
  union {
    __IOM uint16_t TMR01;                       /*!< (@ 0x00000092) Timer Mode Register 01                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t SPLIT      : 1;            /*!< [11..11] Selection of 8 or 16-bit timer operation for channels
                                                     1 and 3                                                                   */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR01_b;
  } ;
  
  union {
    __IOM uint16_t TMR02;                       /*!< (@ 0x00000094) Timer Mode Register 02                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR02_b;
  } ;
  
  union {
    __IOM uint16_t TMR03;                       /*!< (@ 0x00000096) Timer Mode Register 03                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t SPLIT      : 1;            /*!< [11..11] Selection of 8 or 16-bit timer operation for channels
                                                     1 and 3                                                                   */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR03_b;
  } ;
  
  union {
    __IOM uint16_t TMR04;                       /*!< (@ 0x00000098) Timer Mode Register 04                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR04_b;
  } ;
  
  union {
    __IOM uint16_t TMR05;                       /*!< (@ 0x0000009A) Timer Mode Register 05                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR05_b;
  } ;
  
  union {
    __IOM uint16_t TMR06;                       /*!< (@ 0x0000009C) Timer Mode Register 06                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR06_b;
  } ;
  
  union {
    __IOM uint16_t TMR07;                       /*!< (@ 0x0000009E) Timer Mode Register 07                                     */
    
    struct {
      __IOM uint16_t OPIRQ      : 1;            /*!< [0..0] Setting of starting count and interrupt                            */
      __IOM uint16_t MD         : 3;            /*!< [3..1] Selection of operation mode at channel n                           */
            uint16_t            : 2;
      __IOM uint16_t CIS        : 2;            /*!< [7..6] Selection of TI0n pin input valid edge                             */
      __IOM uint16_t STS        : 3;            /*!< [10..8] Setting of start trigger or capture trigger of channel
                                                     n                                                                         */
      __IOM uint16_t MASTER     : 1;            /*!< [11..11] Selection between using channel n independently or
                                                     simultaneously with another channel (as a slave or master)                */
      __IOM uint16_t CCS        : 1;            /*!< [12..12] Selection of counter clock (fTCLK) of channel n                  */
            uint16_t            : 1;
      __IOM uint16_t CKS        : 2;            /*!< [15..14] Selection of operation clock (fMCK) of channel n                 */
    } TMR07_b;
  } ;
  
  union {
    __IM  uint16_t TSR00;                       /*!< (@ 0x000000A0) Timer Status Register 00                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR00_b;
  } ;
  
  union {
    __IM  uint16_t TSR01;                       /*!< (@ 0x000000A2) Timer Status Register 01                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR01_b;
  } ;
  
  union {
    __IM  uint16_t TSR02;                       /*!< (@ 0x000000A4) Timer Status Register 02                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR02_b;
  } ;
  
  union {
    __IM  uint16_t TSR03;                       /*!< (@ 0x000000A6) Timer Status Register 03                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR03_b;
  } ;
  
  union {
    __IM  uint16_t TSR04;                       /*!< (@ 0x000000A8) Timer Status Register 04                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR04_b;
  } ;
  
  union {
    __IM  uint16_t TSR05;                       /*!< (@ 0x000000AA) Timer Status Register 05                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR05_b;
  } ;
  
  union {
    __IM  uint16_t TSR06;                       /*!< (@ 0x000000AC) Timer Status Register 06                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR06_b;
  } ;
  
  union {
    __IM  uint16_t TSR07;                       /*!< (@ 0x000000AE) Timer Status Register 07                                   */
    
    struct {
      __IM  uint16_t OVF        : 1;            /*!< [0..0] Counter overflow state of channel n                                */
            uint16_t            : 15;
    } TSR07_b;
  } ;
  
  union {
    __IM  uint16_t TE0;                         /*!< (@ 0x000000B0) Timer Channel Enable Status Register 0                     */
    
    struct {
      __IM  uint16_t TE         : 8;            /*!< [7..0] Indication of operation enabled or disabled state of
                                                     channel n                                                                 */
            uint16_t            : 1;
      __IM  uint16_t TEH1       : 1;            /*!< [9..9] Indication of whether operation of the higher 8-bit timer
                                                     is enabled or disabled when channel 1 is in the 8-bit timer
                                                     mode                                                                      */
            uint16_t            : 1;
      __IM  uint16_t TEH3       : 1;            /*!< [11..11] Indication of whether operation of the higher 8-bit
                                                     timer is enabled or disabled when channel 3 is in the 8-bit
                                                     timer mode                                                                */
            uint16_t            : 4;
    } TE0_b;
  } ;
  
  union {
    __IOM uint16_t TS0;                         /*!< (@ 0x000000B2) Timer Channel Start Register 0                             */
    
    struct {
      __IOM uint16_t TS         : 8;            /*!< [7..0] Operation enable (start) trigger of channel n                      */
            uint16_t            : 1;
      __IOM uint16_t TSH1       : 1;            /*!< [9..9] Trigger to enable operation (start operation) of the
                                                     higher 8-bit timer when channel 1 is in the 8-bit timer
                                                     mode                                                                      */
            uint16_t            : 1;
      __IOM uint16_t TSH3       : 1;            /*!< [11..11] Trigger to enable operation (start operation) of the
                                                     higher 8-bit timer when channel 3 is in the 8-bit timer
                                                     mode                                                                      */
            uint16_t            : 4;
    } TS0_b;
  } ;
  
  union {
    __IOM uint16_t TT0;                         /*!< (@ 0x000000B4) Timer Channel Stop Register 0                              */
    
    struct {
      __IOM uint16_t TT         : 8;            /*!< [7..0] Operation stop trigger of channel n                                */
            uint16_t            : 1;
      __IOM uint16_t TTH1       : 1;            /*!< [9..9] Trigger to stop operation of the higher 8-bit timer when
                                                     channel 1 is in the 8-bit timer mode                                      */
            uint16_t            : 1;
      __IOM uint16_t TTH3       : 1;            /*!< [11..11] Trigger to stop operation of the higher 8-bit timer
                                                     when channel 3 is in the 8-bit timer mode                                 */
            uint16_t            : 4;
    } TT0_b;
  } ;
  
  union {
    __IOM uint16_t TPS0;                        /*!< (@ 0x000000B6) Timer Clock Select Register 0                              */
    
    struct {
      __IOM uint16_t PRS0       : 4;            /*!< [3..0] Selection of operation clock (CK00)                                */
      __IOM uint16_t PRS1       : 4;            /*!< [7..4] Selection of operation clock (CK01)                                */
      __IOM uint16_t PRS2       : 2;            /*!< [9..8] Selection of operation clock (CK02)                                */
            uint16_t            : 2;
      __IOM uint16_t PRS3       : 2;            /*!< [13..12] Selection of operation clock (CK03)                              */
            uint16_t            : 2;
    } TPS0_b;
  } ;
  
  union {
    __IOM uint16_t TO0;                         /*!< (@ 0x000000B8) Timer Output Register 0                                    */
    
    struct {
      __IOM uint16_t TO         : 8;            /*!< [7..0] Timer output of channel n                                          */
            uint16_t            : 8;
    } TO0_b;
  } ;
  
  union {
    __IOM uint16_t TOE0;                        /*!< (@ 0x000000BA) Timer Output Enable Register 0                             */
    
    struct {
      __IOM uint16_t TOE        : 8;            /*!< [7..0] Enabling or disabling timer output for channel n                   */
            uint16_t            : 8;
    } TOE0_b;
  } ;
  
  union {
    __IOM uint16_t TOL0;                        /*!< (@ 0x000000BC) Timer Output Level Register 0                              */
    
    struct {
            uint16_t            : 1;
      __IOM uint16_t TOL        : 7;            /*!< [7..1] Control of timer output of channel n                               */
            uint16_t            : 8;
    } TOL0_b;
  } ;
  
  union {
    __IOM uint16_t TOM0;                        /*!< (@ 0x000000BE) Timer Output Mode Register 0                               */
    
    struct {
            uint16_t            : 1;
      __IOM uint16_t TOM        : 7;            /*!< [7..1] Control of timer output mode of channel n                          */
            uint16_t            : 8;
    } TOM0_b;
  } ;
} R_TAU_Type;                                   /*!< Size = 192 (0xc0)                                                         */



/* =========================================================================================================================== */
/* ================                                           UARTA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UARTA (UARTA)
  */

typedef struct {                                /*!< (@ 0x40096000) UARTA Structure                                            */
  __IOM uint8_t   TXBA0;                        /*!< (@ 0x00000000) Transmit Buffer Register 0                                 */
  __IM  uint8_t   RXBA0;                        /*!< (@ 0x00000001) Receive Buffer Register 0                                  */
  
  union {
    __IOM uint8_t ASIMA00;                      /*!< (@ 0x00000002) Operation Mode Setting Register n0                         */
    
    struct {
      __IOM uint8_t ISRMA       : 1;            /*!< [0..0] Receive interrupt mode select                                      */
      __IOM uint8_t ISSMA       : 1;            /*!< [1..1] Transmit interrupt mode select                                     */
            uint8_t             : 3;
      __IOM uint8_t RXEA        : 1;            /*!< [5..5] Reception enable                                                   */
      __IOM uint8_t TXEA        : 1;            /*!< [6..6] Transmission enable                                                */
      __IOM uint8_t EN          : 1;            /*!< [7..7] UART operation enable                                              */
    } ASIMA00_b;
  } ;
  
  union {
    __IOM uint8_t ASIMA01;                      /*!< (@ 0x00000003) Operation Mode Setting Register n1                         */
    
    struct {
      __IOM uint8_t ALV         : 1;            /*!< [0..0] Transmission and reception level setting                           */
      __IOM uint8_t DIR         : 1;            /*!< [1..1] Transmission and reception order setting                           */
      __IOM uint8_t SL          : 1;            /*!< [2..2] Transmission stop bit length setting                               */
      __IOM uint8_t CL          : 2;            /*!< [4..3] Transmission and reception character length setting                */
      __IOM uint8_t PS          : 2;            /*!< [6..5] Transmission and reception parity bit setting                      */
            uint8_t             : 1;
    } ASIMA01_b;
  } ;
  __IOM uint8_t   BRGCA0;                       /*!< (@ 0x00000004) Baud Rate Generator Control Register 0                     */
  
  union {
    __IM  uint8_t ASISA0;                       /*!< (@ 0x00000005) Status Register 0                                          */
    
    struct {
      __IM  uint8_t OVEA        : 1;            /*!< [0..0] Overrun error flag                                                 */
      __IM  uint8_t FEA         : 1;            /*!< [1..1] Framing error flag                                                 */
      __IM  uint8_t PEA         : 1;            /*!< [2..2] Parity error flag                                                  */
            uint8_t             : 1;
      __IM  uint8_t TXSFA       : 1;            /*!< [4..4] Transmit shift register data flag                                  */
      __IM  uint8_t TXBFA       : 1;            /*!< [5..5] Transmit buffer data flag                                          */
            uint8_t             : 2;
    } ASISA0_b;
  } ;
  
  union {
    __IOM uint8_t ASCTA0;                       /*!< (@ 0x00000006) Status Clear Trigger Register 0                            */
    
    struct {
      __IOM uint8_t OVECTA      : 1;            /*!< [0..0] Overrun error flag clear trigger                                   */
      __IOM uint8_t FECTA       : 1;            /*!< [1..1] Framing error flag clear trigger                                   */
      __IOM uint8_t PECTA       : 1;            /*!< [2..2] Parity error flag clear trigger                                    */
            uint8_t             : 5;
    } ASCTA0_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IOM uint8_t   TXBA1;                        /*!< (@ 0x00000008) Transmit Buffer Register 1                                 */
  __IM  uint8_t   RXBA1;                        /*!< (@ 0x00000009) Receive Buffer Register 1                                  */
  
  union {
    __IOM uint8_t ASIMA10;                      /*!< (@ 0x0000000A) Operation Mode Setting Register n0                         */
    
    struct {
      __IOM uint8_t ISRMA       : 1;            /*!< [0..0] Receive interrupt mode select                                      */
      __IOM uint8_t ISSMA       : 1;            /*!< [1..1] Transmit interrupt mode select                                     */
            uint8_t             : 3;
      __IOM uint8_t RXEA        : 1;            /*!< [5..5] Reception enable                                                   */
      __IOM uint8_t TXEA        : 1;            /*!< [6..6] Transmission enable                                                */
      __IOM uint8_t EN          : 1;            /*!< [7..7] UART operation enable                                              */
    } ASIMA10_b;
  } ;
  
  union {
    __IOM uint8_t ASIMA11;                      /*!< (@ 0x0000000B) Operation Mode Setting Register n1                         */
    
    struct {
      __IOM uint8_t ALV         : 1;            /*!< [0..0] Transmission and reception level setting                           */
      __IOM uint8_t DIR         : 1;            /*!< [1..1] Transmission and reception order setting                           */
      __IOM uint8_t SL          : 1;            /*!< [2..2] Transmission stop bit length setting                               */
      __IOM uint8_t CL          : 2;            /*!< [4..3] Transmission and reception character length setting                */
      __IOM uint8_t PS          : 2;            /*!< [6..5] Transmission and reception parity bit setting                      */
            uint8_t             : 1;
    } ASIMA11_b;
  } ;
  __IOM uint8_t   BRGCA1;                       /*!< (@ 0x0000000C) Baud Rate Generator Control Register 1                     */
  
  union {
    __IM  uint8_t ASISA1;                       /*!< (@ 0x0000000D) Status Register 1                                          */
    
    struct {
      __IM  uint8_t OVEA        : 1;            /*!< [0..0] Overrun error flag                                                 */
      __IM  uint8_t FEA         : 1;            /*!< [1..1] Framing error flag                                                 */
      __IM  uint8_t PEA         : 1;            /*!< [2..2] Parity error flag                                                  */
            uint8_t             : 1;
      __IM  uint8_t TXSFA       : 1;            /*!< [4..4] Transmit shift register data flag                                  */
      __IM  uint8_t TXBFA       : 1;            /*!< [5..5] Transmit buffer data flag                                          */
            uint8_t             : 2;
    } ASISA1_b;
  } ;
  
  union {
    __IOM uint8_t ASCTA1;                       /*!< (@ 0x0000000E) Status Clear Trigger Register 1                            */
    
    struct {
      __IOM uint8_t OVECTA      : 1;            /*!< [0..0] Overrun error flag clear trigger                                   */
      __IOM uint8_t FECTA       : 1;            /*!< [1..1] Framing error flag clear trigger                                   */
      __IOM uint8_t PECTA       : 1;            /*!< [2..2] Parity error flag clear trigger                                    */
            uint8_t             : 5;
    } ASCTA1_b;
  } ;
  __IM  uint8_t   RESERVED1;
  
  union {
    __IOM uint8_t UTA0CK;                       /*!< (@ 0x00000010) UARTA Clock Select Register 0                              */
    
    struct {
      __IOM uint8_t CK          : 4;            /*!< [3..0] UARTA0 operation clock select (fUTA0)                              */
      __IOM uint8_t SEL         : 2;            /*!< [5..4] fSEL clock select                                                  */
            uint8_t             : 1;
      __IOM uint8_t EN          : 1;            /*!< [7..7] EN                                                                 */
    } UTA0CK_b;
  } ;
  
  union {
    __IOM uint8_t UTA1CK;                       /*!< (@ 0x00000011) UARTA Clock Select Register 1                              */
    
    struct {
      __IOM uint8_t CK          : 4;            /*!< [3..0] UARTA1 operation clock select (fUTA1)                              */
            uint8_t             : 3;
      __IOM uint8_t EN          : 1;            /*!< [7..7] UARTA1 clock output function enable                                */
    } UTA1CK_b;
  } ;
} R_UARTA_Type;                                 /*!< Size = 18 (0x12)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADC120                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief 12-bit A/D Converter (ADC120)
  */

typedef struct {                                /*!< (@ 0x4009C000) ADC120 Structure                                           */
  
  union {
    __IOM uint8_t ADM0;                         /*!< (@ 0x00000000) A/D Converter Mode Register 0                              */
    
    struct {
      __IOM uint8_t ADCE        : 1;            /*!< [0..0] A/D voltage comparator operation control                           */
      __IOM uint8_t LV          : 2;            /*!< [2..1] Select Operation voltage mode                                      */
      __IOM uint8_t FR          : 3;            /*!< [5..3] Select Conversion Clock (fAD)                                      */
      __IOM uint8_t ADMD        : 1;            /*!< [6..6] Specification of the A/D conversion channel selection
                                                     mode                                                                      */
      __IOM uint8_t ADCS        : 1;            /*!< [7..7] A/D conversion operation control                                   */
    } ADM0_b;
  } ;
  
  union {
    __IOM uint8_t ADS;                          /*!< (@ 0x00000001) Analog Input Channel Specification Register                */
    
    struct {
      __IOM uint8_t ADS         : 5;            /*!< [4..0] Selection of the analog input channel (See to )                    */
            uint8_t             : 2;
      __IOM uint8_t ADISS       : 1;            /*!< [7..7] Select internal or external of analog input (See to )              */
    } ADS_b;
  } ;
  
  union {
    __IOM uint8_t ADM1;                         /*!< (@ 0x00000002) A/D Converter Mode Register 1                              */
    
    struct {
      __IOM uint8_t ADTRS       : 3;            /*!< [2..0] Selection of the hardware trigger signal                           */
      __IOM uint8_t ADLSP       : 1;            /*!< [3..3] PCLKB input frequency setting                                      */
            uint8_t             : 1;
      __IOM uint8_t ADSCM       : 1;            /*!< [5..5] Specification of the A/D conversion mode                           */
      __IOM uint8_t ADTMD       : 2;            /*!< [7..6] Selection of the A/D conversion trigger mode                       */
    } ADM1_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IM  uint16_t ADCR;                        /*!< (@ 0x00000006) 12-bit or 10-bit A/D Conversion Result Register            */
    
    struct {
      __IM  uint8_t RESERVED2;
      __IM  uint8_t ADCRH;                      /*!< (@ 0x00000007) 8-bit A/D Conversion Result Register                       */
    };
  };
  __IM  uint16_t  RESERVED3[68];
  
  union {
    __IOM uint8_t ADM2;                         /*!< (@ 0x00000090) A/D Converter Mode Register 2                              */
    
    struct {
      __IOM uint8_t ADTYP       : 2;            /*!< [1..0] ADTYP                                                              */
      __IOM uint8_t AWC         : 1;            /*!< [2..2] AWC                                                                */
      __IOM uint8_t ADRCK       : 1;            /*!< [3..3] ADRCK                                                              */
            uint8_t             : 1;
      __IOM uint8_t ADREFM      : 1;            /*!< [5..5] ADREFM                                                             */
      __IOM uint8_t ADREFP      : 2;            /*!< [7..6] ADREFP                                                             */
    } ADM2_b;
  } ;
  __IOM uint8_t   ADUL;                         /*!< (@ 0x00000091) Conversion Result Comparison Upper Limit Setting
                                                                    Register                                                   */
  __IOM uint8_t   ADLL;                         /*!< (@ 0x00000092) Conversion Result Comparison Lower Limit Setting
                                                                    Register                                                   */
  
  union {
    __IOM uint8_t ADTES;                        /*!< (@ 0x00000093) A/D Test Register                                          */
    
    struct {
      __IOM uint8_t ADTES       : 2;            /*!< [1..0] Selection of A/D conversion target for testing                     */
            uint8_t             : 6;
    } ADTES_b;
  } ;
  __IM  uint16_t  RESERVED4[6];
  
  union {
    __IM  uint16_t ADCR0;                       /*!< (@ 0x000000A0) 12-bit or 10-bit A/D Conversion Result Register
                                                                    0                                                          */
    
    struct {
      __IM  uint8_t RESERVED5;
      __IM  uint8_t ADCR0H;                     /*!< (@ 0x000000A1) 8-bit A/D Conversion Result Register 0                     */
    };
  };
  
  union {
    __IM  uint16_t ADCR1;                       /*!< (@ 0x000000A2) 12-bit or 10-bit A/D Conversion Result Register
                                                                    1                                                          */
    
    struct {
      __IM  uint8_t RESERVED6;
      __IM  uint8_t ADCR1H;                     /*!< (@ 0x000000A3) 8-bit A/D Conversion Result Register 1                     */
    };
  };
  
  union {
    __IM  uint16_t ADCR2;                       /*!< (@ 0x000000A4) 12-bit or 10-bit A/D Conversion Result Register
                                                                    2                                                          */
    
    struct {
      __IM  uint8_t RESERVED7;
      __IM  uint8_t ADCR2H;                     /*!< (@ 0x000000A5) 8-bit A/D Conversion Result Register 2                     */
    };
  };
  
  union {
    __IM  uint16_t ADCR3;                       /*!< (@ 0x000000A6) 12-bit or 10-bit A/D Conversion Result Register
                                                                    3                                                          */
    
    struct {
      __IM  uint8_t RESERVED8;
      __IM  uint8_t ADCR3H;                     /*!< (@ 0x000000A7) 8-bit A/D Conversion Result Register 3                     */
    };
  };
} R_ADC120_Type;                                /*!< Size = 168 (0xa8)                                                         */



/* =========================================================================================================================== */
/* ================                                           FLCN                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash I/O Registers (FLCN)
  */

typedef struct {                                /*!< (@ 0x407EC000) FLCN Structure                                             */
  __IM  uint32_t  RESERVED[36];
  
  union {
    __IOM uint8_t DFLCTL;                       /*!< (@ 0x00000090) Data Flash Control Register                                */
    
    struct {
      __IOM uint8_t DFLEN       : 1;            /*!< [0..0] Data Flash Access Enable                                           */
            uint8_t             : 7;
    } DFLCTL_b;
  } ;
  __IM  uint8_t   RESERVED1;
  __IM  uint16_t  RESERVED2;
  __IM  uint32_t  RESERVED3[27];
  
  union {
    __IOM uint8_t FPMCR;                        /*!< (@ 0x00000100) Flash P/E Mode Control Register                            */
    
    struct {
            uint8_t             : 1;
      __IOM uint8_t FMS0        : 1;            /*!< [1..1] Flash Operating Mode Select 0                                      */
            uint8_t             : 1;
      __IOM uint8_t RPDIS       : 1;            /*!< [3..3] Code Flash P/E Disable                                             */
      __IOM uint8_t FMS1        : 1;            /*!< [4..4] Flash Operating Mode Select 1                                      */
            uint8_t             : 3;
    } FPMCR_b;
  } ;
  __IM  uint8_t   RESERVED4;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint8_t FASR;                         /*!< (@ 0x00000104) Flash Area Select Register                                 */
    
    struct {
      __IOM uint8_t EXS         : 1;            /*!< [0..0] Extra Area Select                                                  */
            uint8_t             : 7;
    } FASR_b;
  } ;
  __IM  uint8_t   RESERVED6;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t FSARL;                       /*!< (@ 0x00000108) Flash Processing Start Address Register L                  */
    
    struct {
      __IOM uint16_t FSARL      : 16;           /*!< [15..0] Flash Processing Start Address L                                  */
    } FSARL_b;
  } ;
  __IM  uint16_t  RESERVED8;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint16_t FSARH;                       /*!< (@ 0x00000110) Flash Processing Start Address Register H                  */
    
    struct {
      __IOM uint16_t FSARH      : 16;           /*!< [15..0] Flash Processing Start Address H                                  */
    } FSARH_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint8_t FCR;                          /*!< (@ 0x00000114) Flash Control Register                                     */
    
    struct {
      __IOM uint8_t CMD         : 4;            /*!< [3..0] Software Command Setting                                           */
            uint8_t             : 2;
      __IOM uint8_t STOP        : 1;            /*!< [6..6] Forced Processing Stop                                             */
      __IOM uint8_t OPST        : 1;            /*!< [7..7] Processing Start                                                   */
    } FCR_b;
  } ;
  __IM  uint8_t   RESERVED11;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t FEARL;                       /*!< (@ 0x00000118) Flash Processing End Address Register L                    */
    
    struct {
      __IOM uint16_t FEARL      : 16;           /*!< [15..0] Flash Processing End Address L                                    */
    } FEARL_b;
  } ;
  __IM  uint16_t  RESERVED13;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint16_t FEARH;                       /*!< (@ 0x00000120) Flash Processing End Address Register H                    */
    
    struct {
      __IOM uint16_t FEARH      : 16;           /*!< [15..0] Flash Processing End Address H                                    */
    } FEARH_b;
  } ;
  __IM  uint16_t  RESERVED15;
  
  union {
    __IOM uint8_t FRESETR;                      /*!< (@ 0x00000124) Flash Reset Register                                       */
    
    struct {
      __IOM uint8_t FRESET      : 1;            /*!< [0..0] Software reset of the registers                                    */
            uint8_t             : 7;
    } FRESETR_b;
  } ;
  __IM  uint8_t   RESERVED16;
  __IM  uint16_t  RESERVED17;
  
  union {
    __IM  uint16_t FSTATR00;                    /*!< (@ 0x00000128) Flash Status Register 0                                    */
    
    struct {
      __IM  uint16_t ERERR0     : 1;            /*!< [0..0] Erase Error Flag 0                                                 */
      __IM  uint16_t PRGERR0    : 1;            /*!< [1..1] Program Error Flag 0                                               */
            uint16_t            : 1;
      __IM  uint16_t BCERR0     : 1;            /*!< [3..3] Blank Check Error Flag 0                                           */
      __IM  uint16_t ILGLERR    : 1;            /*!< [4..4] Illegal Command Error Flag                                         */
      __IM  uint16_t EILGLERR   : 1;            /*!< [5..5] Extra Area Illegal Command Error Flag                              */
            uint16_t            : 10;
    } FSTATR00_b;
  } ;
  __IM  uint16_t  RESERVED18;
  
  union {
    __IM  uint8_t FSTATR1;                      /*!< (@ 0x0000012C) Flash Status Register 1                                    */
    
    struct {
            uint8_t             : 6;
      __IM  uint8_t FRDY        : 1;            /*!< [6..6] Flash Ready Flag                                                   */
      __IM  uint8_t EXRDY       : 1;            /*!< [7..7] Extra Area Ready Flag                                              */
    } FSTATR1_b;
  } ;
  __IM  uint8_t   RESERVED19;
  __IM  uint16_t  RESERVED20;
  
  union {
    __IOM uint16_t FWBL0;                       /*!< (@ 0x00000130) Flash Write Buffer Register L0                             */
    
    struct {
      __IOM uint16_t WDATA      : 16;           /*!< [15..0] Flash Write Buffer L0                                             */
    } FWBL0_b;
  } ;
  __IM  uint16_t  RESERVED21;
  __IM  uint32_t  RESERVED22;
  
  union {
    __IOM uint16_t FWBH0;                       /*!< (@ 0x00000138) Flash Write Buffer Register H0                             */
    
    struct {
      __IOM uint16_t WDATA      : 16;           /*!< [15..0] Flash Write Buffer H0                                             */
    } FWBH0_b;
  } ;
  __IM  uint16_t  RESERVED23;
  __IM  uint32_t  RESERVED24;
  
  union {
    __IOM uint16_t FWBL1;                       /*!< (@ 0x00000140) Flash Write Buffer Register L1                             */
    
    struct {
      __IOM uint16_t WDATA      : 16;           /*!< [15..0] Flash Write Buffer L1 Bits [47:32]                                */
    } FWBL1_b;
  } ;
  __IM  uint16_t  RESERVED25;
  
  union {
    __IOM uint16_t FWBH1;                       /*!< (@ 0x00000144) Flash Write Buffer Register H1                             */
    
    struct {
      __IOM uint16_t WDATA      : 16;           /*!< [15..0] Flash Write Buffer L1 Bits [63:48]                                */
    } FWBH1_b;
  } ;
  __IM  uint16_t  RESERVED26;
  __IM  uint32_t  RESERVED27[14];
  
  union {
    __IOM uint8_t FPR;                          /*!< (@ 0x00000180) Protection Unlock Register                                 */
    
    struct {
      __IOM uint8_t FPR         : 8;            /*!< [7..0] Protection Unlock                                                  */
    } FPR_b;
  } ;
  __IM  uint8_t   RESERVED28;
  __IM  uint16_t  RESERVED29;
  
  union {
    __IM  uint8_t FPSR;                         /*!< (@ 0x00000184) Protection Unlock Status Register                          */
    
    struct {
      __IM  uint8_t PERR        : 1;            /*!< [0..0] Protect Error Flag                                                 */
            uint8_t             : 7;
    } FPSR_b;
  } ;
  __IM  uint8_t   RESERVED30;
  __IM  uint16_t  RESERVED31;
  __IM  uint32_t  RESERVED32[14];
  
  union {
    __IM  uint16_t FSECMR;                      /*!< (@ 0x000001C0) Flash Protection Flag Monitor Register                     */
    
    struct {
            uint16_t            : 8;
      __IM  uint16_t BTFLG      : 1;            /*!< [8..8] Startup Area Select Protection Flag                                */
      __IM  uint16_t BTPR       : 1;            /*!< [9..9] Startup Area Select Protection Flag                                */
            uint16_t            : 3;
      __IM  uint16_t OCDDIS     : 1;            /*!< [13..13] On-Chip Debugger Connection Disable Flag                         */
      __IM  uint16_t FAPR       : 1;            /*!< [14..14] Access Window Protection Flag                                    */
            uint16_t            : 1;
    } FSECMR_b;
  } ;
  __IM  uint16_t  RESERVED33;
  __IM  uint32_t  RESERVED34;
  
  union {
    __IM  uint16_t FAWSMR;                      /*!< (@ 0x000001C8) Flash Access Window Start Address Monitor Register         */
    
    struct {
      __IM  uint16_t FAWS       : 11;           /*!< [10..0] Access Window Start Address                                       */
            uint16_t            : 5;
    } FAWSMR_b;
  } ;
  __IM  uint16_t  RESERVED35;
  __IM  uint32_t  RESERVED36;
  
  union {
    __IM  uint16_t FAWEMR;                      /*!< (@ 0x000001D0) Flash Access Window End Address Monitor Register           */
    
    struct {
      __IM  uint16_t FAWE       : 11;           /*!< [10..0] Access Window End Address                                         */
            uint16_t            : 5;
    } FAWEMR_b;
  } ;
  __IM  uint16_t  RESERVED37;
  __IM  uint32_t  RESERVED38;
  
  union {
    __IOM uint8_t FISR;                         /*!< (@ 0x000001D8) Flash Initial Setting Register                             */
    
    struct {
      __IOM uint8_t PCKA        : 6;            /*!< [5..0] Flash-IF Clock Notification                                        */
      __IOM uint8_t SAS         : 2;            /*!< [7..6] Startup Area Select                                                */
    } FISR_b;
  } ;
  __IM  uint8_t   RESERVED39;
  __IM  uint16_t  RESERVED40;
  
  union {
    __IOM uint8_t FEXCR;                        /*!< (@ 0x000001DC) Flash Extra Area Control Register                          */
    
    struct {
      __IOM uint8_t CMD         : 3;            /*!< [2..0] Software Command Setting                                           */
            uint8_t             : 4;
      __IOM uint8_t OPST        : 1;            /*!< [7..7] Processing Start                                                   */
    } FEXCR_b;
  } ;
  __IM  uint8_t   RESERVED41;
  __IM  uint16_t  RESERVED42;
  
  union {
    __IOM uint16_t FEAML;                       /*!< (@ 0x000001E0) Flash Error Address Monitor Register L                     */
    
    struct {
      __IOM uint16_t FEAML      : 16;           /*!< [15..0] Flash Error Address Monitor Register L                            */
    } FEAML_b;
  } ;
  __IM  uint16_t  RESERVED43;
  __IM  uint32_t  RESERVED44;
  
  union {
    __IOM uint16_t FEAMH;                       /*!< (@ 0x000001E8) Flash Error Address Monitor Register H                     */
    
    struct {
      __IOM uint16_t FEAMH      : 16;           /*!< [15..0] Flash Error Address Monitor Register H                            */
    } FEAMH_b;
  } ;
  __IM  uint16_t  RESERVED45;
  __IM  uint32_t  RESERVED46[15];
  
  union {
    __IM  uint32_t TSCDR;                       /*!< (@ 0x00000228) Temperature Sensor Calibration Data Register               */
    
    struct {
      __IM  uint32_t TSCDR      : 16;           /*!< [15..0] Temperature Sensor Calibration Data                               */
            uint32_t            : 16;
    } TSCDR_b;
  } ;
  __IM  uint32_t  RESERVED47[3937];
  
  union {
    __IOM uint16_t FENTRYR;                     /*!< (@ 0x00003FB0) Flash P/E Mode Entry Register                              */
    
    struct {
      __IOM uint16_t FENTRY0    : 1;            /*!< [0..0] Code Flash P/E Mode Entry 0                                        */
            uint16_t            : 6;
      __IOM uint16_t FENTRYD    : 1;            /*!< [7..7] Data Flash P/E Mode Entry                                          */
      __OM  uint16_t FEKEY      : 8;            /*!< [15..8] Key Code                                                          */
    } FENTRYR_b;
  } ;
  __IM  uint16_t  RESERVED48;
  __IM  uint32_t  RESERVED49[4];
  
  union {
    __IOM uint8_t FLDWAITR;                     /*!< (@ 0x00003FC4) Memory Wait Cycle Control Register for Data Flash          */
    
    struct {
      __IOM uint8_t FLDWAIT1    : 1;            /*!< [0..0] Memory Wait Cycle Select for Data Flash                            */
            uint8_t             : 7;
    } FLDWAITR_b;
  } ;
  __IM  uint8_t   RESERVED50;
  __IM  uint16_t  RESERVED51;
  
  union {
    __IOM uint8_t PFBER;                        /*!< (@ 0x00003FC8) Prefetch Buffer Enable Register                            */
    
    struct {
      __IOM uint8_t PFBE        : 1;            /*!< [0..0] Prefetch Buffer Enable bit                                         */
            uint8_t             : 7;
    } PFBER_b;
  } ;
  __IM  uint8_t   RESERVED52;
  __IM  uint16_t  RESERVED53;
} R_FLCN_Type;                                  /*!< Size = 16332 (0x3fcc)                                                     */



/* =========================================================================================================================== */
/* ================                                          CPU_DBG                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug Function (CPU_DBG)
  */

typedef struct {                                /*!< (@ 0x4001B000) CPU_DBG Structure                                          */
  
  union {
    __IM  uint32_t DBGSTR;                      /*!< (@ 0x00000000) Debug Status Register                                      */
    
    struct {
            uint32_t            : 28;
      __IM  uint32_t DMACTIVE   : 1;            /*!< [28..28] Debug active status from Debug Module                            */
            uint32_t            : 3;
    } DBGSTR_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t DBGSTOPCR;                   /*!< (@ 0x00000010) Debug Stop Control Register                                */
    
    struct {
      __IOM uint32_t DBGSTOP_IWDT : 1;          /*!< [0..0] Mask bit for IWDT reset/interrupt in the OCD run mode              */
      __IOM uint32_t DBGSTOP_WDT : 1;           /*!< [1..1] Mask bit for WDT reset/interrupt in the OCD run mode               */
            uint32_t            : 12;
      __IOM uint32_t DBGSTOP_TIM : 1;           /*!< [14..14] Control bit for RTC and TAU operation in the OCD break
                                                     mode                                                                      */
      __IOM uint32_t DBGSTOP_SIR : 1;           /*!< [15..15] Control bit for SAU and IICA operation in the OCD break
                                                     mode                                                                      */
      __IOM uint32_t DBGSTOP_LVD0 : 1;          /*!< [16..16] Mask bit for LVD0 reset                                          */
      __IOM uint32_t DBGSTOP_LVD1 : 1;          /*!< [17..17] Mask bit for LVD1 reset/interrupt                                */
      __IOM uint32_t DBGSTOP_LVD2 : 1;          /*!< [18..18] Mask bit for LVD2 reset/interrpt                                 */
            uint32_t            : 5;
      __IOM uint32_t DBGSTOP_RPER : 1;          /*!< [24..24] Mask bit for RAM parity error reset/interrupt                    */
      __IOM uint32_t DBGSTOP_RECCR : 1;         /*!< [25..25] Mask bit for RAM ECC error reset/interrupt                       */
            uint32_t            : 6;
    } DBGSTOPCR_b;
  } ;
  __IM  uint32_t  RESERVED1[1007];
  __IM  uint32_t  PIDR4;                        /*!< (@ 0x00000FD0) Peripheral Identification Register4                        */
  __IM  uint32_t  PIDR5;                        /*!< (@ 0x00000FD4) Peripheral Identification Register5                        */
  __IM  uint32_t  PIDR6;                        /*!< (@ 0x00000FD8) Peripheral Identification Register6                        */
  __IM  uint32_t  PIDR7;                        /*!< (@ 0x00000FDC) Peripheral Identification Register7                        */
  __IM  uint32_t  PIDR0;                        /*!< (@ 0x00000FE0) Peripheral Identification Register0                        */
  __IM  uint32_t  PIDR1;                        /*!< (@ 0x00000FE4) Peripheral Identification Register1                        */
  __IM  uint32_t  PIDR2;                        /*!< (@ 0x00000FE8) Peripheral Identification Register2                        */
  __IM  uint32_t  PIDR3;                        /*!< (@ 0x00000FEC) Peripheral Identification Register3                        */
  __IM  uint32_t  CIDR0;                        /*!< (@ 0x00000FF0) Component Identification Register0                         */
  __IM  uint32_t  CIDR1;                        /*!< (@ 0x00000FF4) Component Identification Register1                         */
  __IM  uint32_t  CIDR2;                        /*!< (@ 0x00000FF8) Component Identification Register2                         */
  __IM  uint32_t  CIDR3;                        /*!< (@ 0x00000FFC) Component Identification Register3                         */
} R_CPU_DBG_Type;                               /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          CPU_AUX                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief CPU Auxiliary Register (CPU_AUX)
  */

typedef struct {                                /*!< (@ 0x4001A000) CPU_AUX Structure                                          */
  
  union {
    __IOM uint32_t MACTCR;                      /*!< (@ 0x00000000) Machine Timer Control Register                             */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] Machine Timer clock enable                                         */
      __IOM uint32_t CLOCKSOURCE : 1;           /*!< [1..1] Machine Timer clock source select                                  */
            uint32_t            : 30;
    } MACTCR_b;
  } ;
  __IM  uint32_t  RESERVED[63];
  
  union {
    __IOM uint32_t SWRCR;                       /*!< (@ 0x00000100) Software Reset Control Register                            */
    
    struct {
      __IOM uint32_t SYSRESETREQ : 1;           /*!< [0..0] System reset request                                               */
            uint32_t            : 31;
    } SWRCR_b;
  } ;
  __IM  uint32_t  RESERVED1[63];
  
  union {
    __IOM uint32_t NMIADDR;                     /*!< (@ 0x00000200) NMI Hander Address Register                                */
    
    struct {
      __IOM uint32_t NMIADDR    : 32;           /*!< [31..0] NMI handler address. Lower 6 bits must always be set
                                                     0.                                                                        */
    } NMIADDR_b;
  } ;
} R_CPU_AUX_Type;                               /*!< Size = 516 (0x204)                                                        */



/* =========================================================================================================================== */
/* ================                                           CLIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Core-Local Interrupt Controller (CLIC)
  */

typedef struct {                                /*!< (@ 0xE2000000) CLIC Structure                                             */
  
  union {
    __IOM uint8_t cliccfg;                      /*!< (@ 0x00000000) CLIC Configuration Register                                */
    
    struct {
      __IM  uint8_t NVBITS      : 1;            /*!< [0..0] Selective interrupt hardware vectoring feature is implemented.
                                                     This bit is read as 1.                                                    */
      __IOM uint8_t NLBITS      : 4;            /*!< [4..1] Number of bits in clicintctl[i] allocated for specifying
                                                     interrupt levels.                                                         */
      __IM  uint8_t NMBITS      : 2;            /*!< [6..5] Number of bits in clicintattr[i].MODE register                     */
            uint8_t             : 1;
    } cliccfg_b;
  } ;
  __IM  uint8_t   RESERVED;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IM  uint32_t clicinfo;                    /*!< (@ 0x00000004) CLIC Information Register                                  */
    
    struct {
      __IM  uint32_t NUM_INTERRUPT : 13;        /*!< [12..0] Number of total interrupts supported by CLIC                      */
      __IM  uint32_t VERSION    : 8;            /*!< [20..13] Version of CLIC                                                  */
      __IM  uint32_t CLICINTCTLBITS : 4;        /*!< [24..21] The value of the CLICINTCTLBITS parameter                        */
            uint32_t            : 7;
    } clicinfo_b;
  } ;
  __IM  uint32_t  RESERVED2[1022];
  
  union {
    __IOM uint8_t clicintip0;                   /*!< (@ 0x00001000) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip0_b;
  } ;
  
  union {
    __IOM uint8_t clicintie0;                   /*!< (@ 0x00001001) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie0_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr0;                 /*!< (@ 0x00001002) 0                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr0_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl0;                  /*!< (@ 0x00001003) 0                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl0_b;
  } ;
  
  union {
    __IOM uint8_t clicintip1;                   /*!< (@ 0x00001004) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip1_b;
  } ;
  
  union {
    __IOM uint8_t clicintie1;                   /*!< (@ 0x00001005) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie1_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr1;                 /*!< (@ 0x00001006) 1                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr1_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl1;                  /*!< (@ 0x00001007) 1                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl1_b;
  } ;
  
  union {
    __IOM uint8_t clicintip2;                   /*!< (@ 0x00001008) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip2_b;
  } ;
  
  union {
    __IOM uint8_t clicintie2;                   /*!< (@ 0x00001009) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie2_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr2;                 /*!< (@ 0x0000100A) 2                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr2_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl2;                  /*!< (@ 0x0000100B) 2                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl2_b;
  } ;
  
  union {
    __IOM uint8_t clicintip3;                   /*!< (@ 0x0000100C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip3_b;
  } ;
  
  union {
    __IOM uint8_t clicintie3;                   /*!< (@ 0x0000100D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie3_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr3;                 /*!< (@ 0x0000100E) 3                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr3_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl3;                  /*!< (@ 0x0000100F) 3                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl3_b;
  } ;
  
  union {
    __IOM uint8_t clicintip4;                   /*!< (@ 0x00001010) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip4_b;
  } ;
  
  union {
    __IOM uint8_t clicintie4;                   /*!< (@ 0x00001011) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie4_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr4;                 /*!< (@ 0x00001012) 4                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr4_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl4;                  /*!< (@ 0x00001013) 4                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl4_b;
  } ;
  
  union {
    __IOM uint8_t clicintip5;                   /*!< (@ 0x00001014) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip5_b;
  } ;
  
  union {
    __IOM uint8_t clicintie5;                   /*!< (@ 0x00001015) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie5_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr5;                 /*!< (@ 0x00001016) 5                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr5_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl5;                  /*!< (@ 0x00001017) 5                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl5_b;
  } ;
  
  union {
    __IOM uint8_t clicintip6;                   /*!< (@ 0x00001018) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip6_b;
  } ;
  
  union {
    __IOM uint8_t clicintie6;                   /*!< (@ 0x00001019) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie6_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr6;                 /*!< (@ 0x0000101A) 6                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr6_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl6;                  /*!< (@ 0x0000101B) 6                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl6_b;
  } ;
  
  union {
    __IOM uint8_t clicintip7;                   /*!< (@ 0x0000101C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip7_b;
  } ;
  
  union {
    __IOM uint8_t clicintie7;                   /*!< (@ 0x0000101D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie7_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr7;                 /*!< (@ 0x0000101E) 7                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr7_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl7;                  /*!< (@ 0x0000101F) 7                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl7_b;
  } ;
  
  union {
    __IOM uint8_t clicintip8;                   /*!< (@ 0x00001020) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip8_b;
  } ;
  
  union {
    __IOM uint8_t clicintie8;                   /*!< (@ 0x00001021) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie8_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr8;                 /*!< (@ 0x00001022) 8                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr8_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl8;                  /*!< (@ 0x00001023) 8                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl8_b;
  } ;
  
  union {
    __IOM uint8_t clicintip9;                   /*!< (@ 0x00001024) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip9_b;
  } ;
  
  union {
    __IOM uint8_t clicintie9;                   /*!< (@ 0x00001025) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie9_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr9;                 /*!< (@ 0x00001026) 9                                                          */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr9_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl9;                  /*!< (@ 0x00001027) 9                                                          */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl9_b;
  } ;
  
  union {
    __IOM uint8_t clicintip10;                  /*!< (@ 0x00001028) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip10_b;
  } ;
  
  union {
    __IOM uint8_t clicintie10;                  /*!< (@ 0x00001029) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie10_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr10;                /*!< (@ 0x0000102A) 10                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr10_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl10;                 /*!< (@ 0x0000102B) 10                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl10_b;
  } ;
  
  union {
    __IOM uint8_t clicintip11;                  /*!< (@ 0x0000102C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip11_b;
  } ;
  
  union {
    __IOM uint8_t clicintie11;                  /*!< (@ 0x0000102D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie11_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr11;                /*!< (@ 0x0000102E) 11                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr11_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl11;                 /*!< (@ 0x0000102F) 11                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl11_b;
  } ;
  
  union {
    __IOM uint8_t clicintip12;                  /*!< (@ 0x00001030) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip12_b;
  } ;
  
  union {
    __IOM uint8_t clicintie12;                  /*!< (@ 0x00001031) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie12_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr12;                /*!< (@ 0x00001032) 12                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr12_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl12;                 /*!< (@ 0x00001033) 12                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl12_b;
  } ;
  
  union {
    __IOM uint8_t clicintip13;                  /*!< (@ 0x00001034) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip13_b;
  } ;
  
  union {
    __IOM uint8_t clicintie13;                  /*!< (@ 0x00001035) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie13_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr13;                /*!< (@ 0x00001036) 13                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr13_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl13;                 /*!< (@ 0x00001037) 13                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl13_b;
  } ;
  
  union {
    __IOM uint8_t clicintip14;                  /*!< (@ 0x00001038) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip14_b;
  } ;
  
  union {
    __IOM uint8_t clicintie14;                  /*!< (@ 0x00001039) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie14_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr14;                /*!< (@ 0x0000103A) 14                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr14_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl14;                 /*!< (@ 0x0000103B) 14                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl14_b;
  } ;
  
  union {
    __IOM uint8_t clicintip15;                  /*!< (@ 0x0000103C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip15_b;
  } ;
  
  union {
    __IOM uint8_t clicintie15;                  /*!< (@ 0x0000103D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie15_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr15;                /*!< (@ 0x0000103E) 15                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr15_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl15;                 /*!< (@ 0x0000103F) 15                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl15_b;
  } ;
  
  union {
    __IOM uint8_t clicintip16;                  /*!< (@ 0x00001040) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip16_b;
  } ;
  
  union {
    __IOM uint8_t clicintie16;                  /*!< (@ 0x00001041) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie16_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr16;                /*!< (@ 0x00001042) 16                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr16_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl16;                 /*!< (@ 0x00001043) 16                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl16_b;
  } ;
  
  union {
    __IOM uint8_t clicintip17;                  /*!< (@ 0x00001044) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip17_b;
  } ;
  
  union {
    __IOM uint8_t clicintie17;                  /*!< (@ 0x00001045) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie17_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr17;                /*!< (@ 0x00001046) 17                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr17_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl17;                 /*!< (@ 0x00001047) 17                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl17_b;
  } ;
  
  union {
    __IOM uint8_t clicintip18;                  /*!< (@ 0x00001048) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip18_b;
  } ;
  
  union {
    __IOM uint8_t clicintie18;                  /*!< (@ 0x00001049) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie18_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr18;                /*!< (@ 0x0000104A) 18                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr18_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl18;                 /*!< (@ 0x0000104B) 18                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl18_b;
  } ;
  
  union {
    __IOM uint8_t clicintip19;                  /*!< (@ 0x0000104C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip19_b;
  } ;
  
  union {
    __IOM uint8_t clicintie19;                  /*!< (@ 0x0000104D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie19_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr19;                /*!< (@ 0x0000104E) 19                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr19_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl19;                 /*!< (@ 0x0000104F) 19                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl19_b;
  } ;
  
  union {
    __IOM uint8_t clicintip20;                  /*!< (@ 0x00001050) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip20_b;
  } ;
  
  union {
    __IOM uint8_t clicintie20;                  /*!< (@ 0x00001051) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie20_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr20;                /*!< (@ 0x00001052) 20                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr20_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl20;                 /*!< (@ 0x00001053) 20                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl20_b;
  } ;
  
  union {
    __IOM uint8_t clicintip21;                  /*!< (@ 0x00001054) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip21_b;
  } ;
  
  union {
    __IOM uint8_t clicintie21;                  /*!< (@ 0x00001055) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie21_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr21;                /*!< (@ 0x00001056) 21                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr21_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl21;                 /*!< (@ 0x00001057) 21                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl21_b;
  } ;
  
  union {
    __IOM uint8_t clicintip22;                  /*!< (@ 0x00001058) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip22_b;
  } ;
  
  union {
    __IOM uint8_t clicintie22;                  /*!< (@ 0x00001059) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie22_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr22;                /*!< (@ 0x0000105A) 22                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr22_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl22;                 /*!< (@ 0x0000105B) 22                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl22_b;
  } ;
  
  union {
    __IOM uint8_t clicintip23;                  /*!< (@ 0x0000105C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip23_b;
  } ;
  
  union {
    __IOM uint8_t clicintie23;                  /*!< (@ 0x0000105D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie23_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr23;                /*!< (@ 0x0000105E) 23                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr23_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl23;                 /*!< (@ 0x0000105F) 23                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl23_b;
  } ;
  
  union {
    __IOM uint8_t clicintip24;                  /*!< (@ 0x00001060) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip24_b;
  } ;
  
  union {
    __IOM uint8_t clicintie24;                  /*!< (@ 0x00001061) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie24_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr24;                /*!< (@ 0x00001062) 24                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr24_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl24;                 /*!< (@ 0x00001063) 24                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl24_b;
  } ;
  
  union {
    __IOM uint8_t clicintip25;                  /*!< (@ 0x00001064) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip25_b;
  } ;
  
  union {
    __IOM uint8_t clicintie25;                  /*!< (@ 0x00001065) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie25_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr25;                /*!< (@ 0x00001066) 25                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr25_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl25;                 /*!< (@ 0x00001067) 25                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl25_b;
  } ;
  
  union {
    __IOM uint8_t clicintip26;                  /*!< (@ 0x00001068) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip26_b;
  } ;
  
  union {
    __IOM uint8_t clicintie26;                  /*!< (@ 0x00001069) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie26_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr26;                /*!< (@ 0x0000106A) 26                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr26_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl26;                 /*!< (@ 0x0000106B) 26                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl26_b;
  } ;
  
  union {
    __IOM uint8_t clicintip27;                  /*!< (@ 0x0000106C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip27_b;
  } ;
  
  union {
    __IOM uint8_t clicintie27;                  /*!< (@ 0x0000106D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie27_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr27;                /*!< (@ 0x0000106E) 27                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr27_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl27;                 /*!< (@ 0x0000106F) 27                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl27_b;
  } ;
  
  union {
    __IOM uint8_t clicintip28;                  /*!< (@ 0x00001070) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip28_b;
  } ;
  
  union {
    __IOM uint8_t clicintie28;                  /*!< (@ 0x00001071) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie28_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr28;                /*!< (@ 0x00001072) 28                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr28_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl28;                 /*!< (@ 0x00001073) 28                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl28_b;
  } ;
  
  union {
    __IOM uint8_t clicintip29;                  /*!< (@ 0x00001074) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip29_b;
  } ;
  
  union {
    __IOM uint8_t clicintie29;                  /*!< (@ 0x00001075) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie29_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr29;                /*!< (@ 0x00001076) 29                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr29_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl29;                 /*!< (@ 0x00001077) 29                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl29_b;
  } ;
  
  union {
    __IOM uint8_t clicintip30;                  /*!< (@ 0x00001078) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip30_b;
  } ;
  
  union {
    __IOM uint8_t clicintie30;                  /*!< (@ 0x00001079) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie30_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr30;                /*!< (@ 0x0000107A) 30                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr30_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl30;                 /*!< (@ 0x0000107B) 30                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl30_b;
  } ;
  
  union {
    __IOM uint8_t clicintip31;                  /*!< (@ 0x0000107C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip31_b;
  } ;
  
  union {
    __IOM uint8_t clicintie31;                  /*!< (@ 0x0000107D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie31_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr31;                /*!< (@ 0x0000107E) 31                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr31_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl31;                 /*!< (@ 0x0000107F) 31                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl31_b;
  } ;
  
  union {
    __IOM uint8_t clicintip32;                  /*!< (@ 0x00001080) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip32_b;
  } ;
  
  union {
    __IOM uint8_t clicintie32;                  /*!< (@ 0x00001081) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie32_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr32;                /*!< (@ 0x00001082) 32                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr32_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl32;                 /*!< (@ 0x00001083) 32                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl32_b;
  } ;
  
  union {
    __IOM uint8_t clicintip33;                  /*!< (@ 0x00001084) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip33_b;
  } ;
  
  union {
    __IOM uint8_t clicintie33;                  /*!< (@ 0x00001085) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie33_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr33;                /*!< (@ 0x00001086) 33                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr33_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl33;                 /*!< (@ 0x00001087) 33                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl33_b;
  } ;
  
  union {
    __IOM uint8_t clicintip34;                  /*!< (@ 0x00001088) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip34_b;
  } ;
  
  union {
    __IOM uint8_t clicintie34;                  /*!< (@ 0x00001089) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie34_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr34;                /*!< (@ 0x0000108A) 34                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr34_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl34;                 /*!< (@ 0x0000108B) 34                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl34_b;
  } ;
  
  union {
    __IOM uint8_t clicintip35;                  /*!< (@ 0x0000108C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip35_b;
  } ;
  
  union {
    __IOM uint8_t clicintie35;                  /*!< (@ 0x0000108D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie35_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr35;                /*!< (@ 0x0000108E) 35                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr35_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl35;                 /*!< (@ 0x0000108F) 35                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl35_b;
  } ;
  
  union {
    __IOM uint8_t clicintip36;                  /*!< (@ 0x00001090) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip36_b;
  } ;
  
  union {
    __IOM uint8_t clicintie36;                  /*!< (@ 0x00001091) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie36_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr36;                /*!< (@ 0x00001092) 36                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr36_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl36;                 /*!< (@ 0x00001093) 36                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl36_b;
  } ;
  
  union {
    __IOM uint8_t clicintip37;                  /*!< (@ 0x00001094) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip37_b;
  } ;
  
  union {
    __IOM uint8_t clicintie37;                  /*!< (@ 0x00001095) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie37_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr37;                /*!< (@ 0x00001096) 37                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr37_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl37;                 /*!< (@ 0x00001097) 37                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl37_b;
  } ;
  
  union {
    __IOM uint8_t clicintip38;                  /*!< (@ 0x00001098) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip38_b;
  } ;
  
  union {
    __IOM uint8_t clicintie38;                  /*!< (@ 0x00001099) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie38_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr38;                /*!< (@ 0x0000109A) 38                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr38_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl38;                 /*!< (@ 0x0000109B) 38                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl38_b;
  } ;
  
  union {
    __IOM uint8_t clicintip39;                  /*!< (@ 0x0000109C) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip39_b;
  } ;
  
  union {
    __IOM uint8_t clicintie39;                  /*!< (@ 0x0000109D) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie39_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr39;                /*!< (@ 0x0000109E) 39                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr39_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl39;                 /*!< (@ 0x0000109F) 39                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl39_b;
  } ;
  
  union {
    __IOM uint8_t clicintip40;                  /*!< (@ 0x000010A0) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip40_b;
  } ;
  
  union {
    __IOM uint8_t clicintie40;                  /*!< (@ 0x000010A1) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie40_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr40;                /*!< (@ 0x000010A2) 40                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr40_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl40;                 /*!< (@ 0x000010A3) 40                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl40_b;
  } ;
  
  union {
    __IOM uint8_t clicintip41;                  /*!< (@ 0x000010A4) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip41_b;
  } ;
  
  union {
    __IOM uint8_t clicintie41;                  /*!< (@ 0x000010A5) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie41_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr41;                /*!< (@ 0x000010A6) 41                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr41_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl41;                 /*!< (@ 0x000010A7) 41                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl41_b;
  } ;
  
  union {
    __IOM uint8_t clicintip42;                  /*!< (@ 0x000010A8) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip42_b;
  } ;
  
  union {
    __IOM uint8_t clicintie42;                  /*!< (@ 0x000010A9) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie42_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr42;                /*!< (@ 0x000010AA) 42                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr42_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl42;                 /*!< (@ 0x000010AB) 42                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl42_b;
  } ;
  
  union {
    __IOM uint8_t clicintip43;                  /*!< (@ 0x000010AC) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip43_b;
  } ;
  
  union {
    __IOM uint8_t clicintie43;                  /*!< (@ 0x000010AD) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie43_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr43;                /*!< (@ 0x000010AE) 43                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr43_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl43;                 /*!< (@ 0x000010AF) 43                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl43_b;
  } ;
  
  union {
    __IOM uint8_t clicintip44;                  /*!< (@ 0x000010B0) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip44_b;
  } ;
  
  union {
    __IOM uint8_t clicintie44;                  /*!< (@ 0x000010B1) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie44_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr44;                /*!< (@ 0x000010B2) 44                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr44_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl44;                 /*!< (@ 0x000010B3) 44                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl44_b;
  } ;
  
  union {
    __IOM uint8_t clicintip45;                  /*!< (@ 0x000010B4) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip45_b;
  } ;
  
  union {
    __IOM uint8_t clicintie45;                  /*!< (@ 0x000010B5) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie45_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr45;                /*!< (@ 0x000010B6) 45                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr45_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl45;                 /*!< (@ 0x000010B7) 45                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl45_b;
  } ;
  
  union {
    __IOM uint8_t clicintip46;                  /*!< (@ 0x000010B8) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip46_b;
  } ;
  
  union {
    __IOM uint8_t clicintie46;                  /*!< (@ 0x000010B9) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie46_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr46;                /*!< (@ 0x000010BA) 46                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr46_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl46;                 /*!< (@ 0x000010BB) 46                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl46_b;
  } ;
  
  union {
    __IOM uint8_t clicintip47;                  /*!< (@ 0x000010BC) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip47_b;
  } ;
  
  union {
    __IOM uint8_t clicintie47;                  /*!< (@ 0x000010BD) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie47_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr47;                /*!< (@ 0x000010BE) 47                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr47_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl47;                 /*!< (@ 0x000010BF) 47                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl47_b;
  } ;
  
  union {
    __IOM uint8_t clicintip48;                  /*!< (@ 0x000010C0) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip48_b;
  } ;
  
  union {
    __IOM uint8_t clicintie48;                  /*!< (@ 0x000010C1) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie48_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr48;                /*!< (@ 0x000010C2) 48                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr48_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl48;                 /*!< (@ 0x000010C3) 48                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl48_b;
  } ;
  
  union {
    __IOM uint8_t clicintip49;                  /*!< (@ 0x000010C4) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip49_b;
  } ;
  
  union {
    __IOM uint8_t clicintie49;                  /*!< (@ 0x000010C5) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie49_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr49;                /*!< (@ 0x000010C6) 49                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr49_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl49;                 /*!< (@ 0x000010C7) 49                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl49_b;
  } ;
  
  union {
    __IOM uint8_t clicintip50;                  /*!< (@ 0x000010C8) CLIC Interrupt Pending Register                            */
    
    struct {
      __IOM uint8_t IP          : 1;            /*!< [0..0] Pending bit for the associated interrupt                           */
            uint8_t             : 7;
    } clicintip50_b;
  } ;
  
  union {
    __IOM uint8_t clicintie50;                  /*!< (@ 0x000010C9) CLIC Interrupt Enable Register                             */
    
    struct {
      __IOM uint8_t IE          : 1;            /*!< [0..0] Enable bit for the associated interrupt                            */
            uint8_t             : 7;
    } clicintie50_b;
  } ;
  
  union {
    __IOM uint8_t clicintattr50;                /*!< (@ 0x000010CA) 50                                                         */
    
    struct {
      __IOM uint8_t SHV         : 1;            /*!< [0..0] Selective Hardware Vectoring type for the associated
                                                     interrupt                                                                 */
      __IM  uint8_t TRG         : 1;            /*!< [1..1] Trigger type for the associated interrupt. This bit is
                                                     read as 1.                                                                */
            uint8_t             : 4;
      __IM  uint8_t MODE        : 2;            /*!< [7..6] Privilege mode that the associated interrupt is triggered.
                                                     Read value are 2'b11.                                                     */
    } clicintattr50_b;
  } ;
  
  union {
    __IOM uint8_t clicintctl50;                 /*!< (@ 0x000010CB) 50                                                         */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t LVL_PRIO    : 4;            /*!< [7..4] Interrupt level and priority for the associated interrupt          */
    } clicintctl50_b;
  } ;
} R_CLIC_Type;                                  /*!< Size = 4300 (0x10cc)                                                      */



/* =========================================================================================================================== */
/* ================                                           MTIME                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Machine Timer (MTIME)
  */

typedef struct {                                /*!< (@ 0xE6000000) MTIME Structure                                            */
  __IOM uint32_t  mtime_lo;                     /*!< (@ 0x00000000) Machine Timer Counter Register Low                         */
  __IOM uint32_t  mtime_hi;                     /*!< (@ 0x00000004) Machine Timer Counter Register High                        */
  __IOM uint32_t  mtimecmp_lo;                  /*!< (@ 0x00000008) Machine Timer Comparator Register 0 Low                    */
  __IOM uint32_t  mtimecmp_hi;                  /*!< (@ 0x0000000C) Machine Timer Comparator Register 0 High                   */
  __IM  uint32_t  RESERVED[1019];
  
  union {
    __IOM uint32_t msip;                        /*!< (@ 0x00000FFC) Triggering Software Interrupt                              */
    
    struct {
      __IOM uint32_t MSIP       : 1;            /*!< [0..0] Machine software interrupt control                                 */
            uint32_t            : 31;
    } msip_b;
  } ;
} R_MTIME_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug Module (DBG)
  */

typedef struct {                                /*!< (@ 0xE6800000) DBG Structure                                              */
  __IM  uint32_t  RESERVED[32];
  __IOM uint32_t  progbuf0;                     /*!< (@ 0x00000080) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf1;                     /*!< (@ 0x00000084) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf2;                     /*!< (@ 0x00000088) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf3;                     /*!< (@ 0x0000008C) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf4;                     /*!< (@ 0x00000090) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf5;                     /*!< (@ 0x00000094) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf6;                     /*!< (@ 0x00000098) Program Buffer 0 to 7                                      */
  __IOM uint32_t  progbuf7;                     /*!< (@ 0x0000009C) Program Buffer 0 to 7                                      */
  __IM  uint32_t  RESERVED1[8];
  __IOM uint32_t  data0;                        /*!< (@ 0x000000C0) Abstract Data 0 to 3                                       */
  __IOM uint32_t  data1;                        /*!< (@ 0x000000C4) Abstract Data 0 to 3                                       */
  __IOM uint32_t  data2;                        /*!< (@ 0x000000C8) Abstract Data 0 to 3                                       */
  __IOM uint32_t  data3;                        /*!< (@ 0x000000CC) Abstract Data 0 to 3                                       */
} R_DBG_Type;                                   /*!< Size = 208 (0xd0)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define R_SRAM_BASE                 0x40002000UL
#define R_BUS_BASE                  0x40003000UL
#define R_DTC_BASE                  0x40005400UL
#define R_ICU_BASE                  0x40006000UL
#define R_SYSC_BASE                 0x4001E000UL
#define R_PORT0_BASE                0x40040000UL
#define R_PORT1_BASE                0x40040020UL
#define R_PORT2_BASE                0x40040040UL
#define R_PORT3_BASE                0x40040060UL
#define R_PORT4_BASE                0x40040080UL
#define R_PFS_BASE                  0x40040800UL
#define R_ELC_BASE                  0x40041000UL
#define R_WDT_BASE                  0x40044200UL
#define R_IWDT_BASE                 0x40044400UL
#define R_CAC_BASE                  0x40044600UL
#define R_MSTP_BASE                 0x40047000UL
#define R_DAC8_BASE                 0x4005E000UL
#define R_CRC_BASE                  0x40074000UL
#define R_KINT_BASE                 0x40080000UL
#define R_DOC_BASE                  0x40085F00UL
#define R_PORGA_BASE                0x40091000UL
#define R_TRNG_BASE                 0x40091100UL
#define R_CMP_BASE                  0x40091200UL
#define R_RTC_BASE                  0x40092000UL
#define R_REMC_BASE                 0x40092100UL
#define R_TML32_BASE                0x40092200UL
#define R_IICA_BASE                 0x40093000UL
#define R_SAU0_BASE                 0x40094000UL
#define R_SAU1_BASE                 0x40094100UL
#define R_TAU_BASE                  0x40095000UL
#define R_UARTA_BASE                0x40096000UL
#define R_ADC120_BASE               0x4009C000UL
#define R_FLCN_BASE                 0x407EC000UL
#define R_CPU_DBG_BASE              0x4001B000UL
#define R_CPU_AUX_BASE              0x4001A000UL
#define R_CLIC_BASE                 0xE2000000UL
#define R_MTIME_BASE                0xE6000000UL
#define R_DBG_BASE                  0xE6800000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define R_SRAM                      ((R_SRAM_Type*)            R_SRAM_BASE)
#define R_BUS                       ((R_BUS_Type*)             R_BUS_BASE)
#define R_DTC                       ((R_DTC_Type*)             R_DTC_BASE)
#define R_ICU                       ((R_ICU_Type*)             R_ICU_BASE)
#define R_SYSC                      ((R_SYSC_Type*)            R_SYSC_BASE)
#define R_PORT0                     ((R_PORT0_Type*)           R_PORT0_BASE)
#define R_PORT1                     ((R_PORT1_Type*)           R_PORT1_BASE)
#define R_PORT2                     ((R_PORT1_Type*)           R_PORT2_BASE)
#define R_PORT3                     ((R_PORT0_Type*)           R_PORT3_BASE)
#define R_PORT4                     ((R_PORT0_Type*)           R_PORT4_BASE)
#define R_PFS                       ((R_PFS_Type*)             R_PFS_BASE)
#define R_ELC                       ((R_ELC_Type*)             R_ELC_BASE)
#define R_WDT                       ((R_WDT_Type*)             R_WDT_BASE)
#define R_IWDT                      ((R_IWDT_Type*)            R_IWDT_BASE)
#define R_CAC                       ((R_CAC_Type*)             R_CAC_BASE)
#define R_MSTP                      ((R_MSTP_Type*)            R_MSTP_BASE)
#define R_DAC8                      ((R_DAC8_Type*)            R_DAC8_BASE)
#define R_CRC                       ((R_CRC_Type*)             R_CRC_BASE)
#define R_KINT                      ((R_KINT_Type*)            R_KINT_BASE)
#define R_DOC                       ((R_DOC_Type*)             R_DOC_BASE)
#define R_PORGA                     ((R_PORGA_Type*)           R_PORGA_BASE)
#define R_TRNG                      ((R_TRNG_Type*)            R_TRNG_BASE)
#define R_CMP                       ((R_CMP_Type*)             R_CMP_BASE)
#define R_RTC                       ((R_RTC_Type*)             R_RTC_BASE)
#define R_REMC                      ((R_REMC_Type*)            R_REMC_BASE)
#define R_TML32                     ((R_TML32_Type*)           R_TML32_BASE)
#define R_IICA                      ((R_IICA_Type*)            R_IICA_BASE)
#define R_SAU0                      ((R_SAU0_Type*)            R_SAU0_BASE)
#define R_SAU1                      ((R_SAU1_Type*)            R_SAU1_BASE)
#define R_TAU                       ((R_TAU_Type*)             R_TAU_BASE)
#define R_UARTA                     ((R_UARTA_Type*)           R_UARTA_BASE)
#define R_ADC120                    ((R_ADC120_Type*)          R_ADC120_BASE)
#define R_FLCN                      ((R_FLCN_Type*)            R_FLCN_BASE)
#define R_CPU_DBG                   ((R_CPU_DBG_Type*)         R_CPU_DBG_BASE)
#define R_CPU_AUX                   ((R_CPU_AUX_Type*)         R_CPU_AUX_BASE)
#define R_CLIC                      ((R_CLIC_Type*)            R_CLIC_BASE)
#define R_MTIME                     ((R_MTIME_Type*)           R_MTIME_BASE)
#define R_DBG                       ((R_DBG_Type*)             R_DBG_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */

#ifdef __cplusplus
}
#endif

#endif /* R9A02G021_H */


/** @} */ /* End of group R9A02G021 */

/** @} */ /* End of group Renesas Electronics Corporation */
